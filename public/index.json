[
{
	"uri": "https://bksanjuk.github.io/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "Infra Engineer Reference  Reference 참고 사이트및 문서의 마지막 수정일     Reference docs Officail Site Fix Date     Linux Linux Document 2018-10-28   RedHat RedHat Document N/A   CentOS CentOS Document 2018-10-28   Ubuntu Ubuntu Document 2018-10-03   AWS AWS Document 2018-11-17   Docker Dokcer Document 2018-10-14   FreeBSD FreeBSD Handbook 2018-10-03    Prepared by bksanjuk@gmail.com\n"
},
{
	"uri": "https://bksanjuk.github.io/docker/install/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": "Quick install  CentOS7 Quick install\n [root@CentOS7 ~]# yum install -y yum-utils device-mapper-persistent-data lvm2\r[root@CentOS7 ~]# yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r[root@CentOS7 ~]# yum install -y docker-ce\r[root@CentOS7 ~]# sudo usermod -aG docker test\r[root@CentOS7 ~]# systemctl enable docker\r[root@CentOS7 ~]# sudo curl -L \u0026quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)\u0026quot; -o /usr/local/bin/docker-compose\r[root@CentOS7 ~]# sudo chmod +x /usr/local/bin/docker-compose\r Docker 특정버전 설치\n [root@CentOS7 ~]# curl https://releases.rancher.com/install-docker/18.06.sh | sh\rBinary install  wget 을 이용하여 docker 설치 파일을 다운로드 합니다.\n test@ubuntu1604:~$ wget https://download.docker.com/linux/static/stable/x86_64/docker-17.12.0-ce.tgz\r--2018-02-05 18:21:58-- https://download.docker.com/linux/static/stable/x86_64/docker-17.12.0-ce.tgz\rResolving download.docker.com (download.docker.com)... 54.192.183.142, 54.192.183.217, 54.192.183.121, ...\rConnecting to download.docker.com (download.docker.com)|54.192.183.142|:443... connected.\rHTTP request sent, awaiting response... 200 OK\rLength: 34272897 (33M) [application/x-tar]\rSaving to: ‘docker-17.12.0-ce.tgz’\rdocker-17.12.0-ce.t 100%[===================\u0026gt;] 32.68M 13.4MB/s in 2.4s\r2018-02-05 18:22:01 (13.4 MB/s) - ‘docker-17.12.0-ce.tgz’ saved [34272897/34272897]\rtest@ubuntu1604:~$\r 압축풀기\n test@ubuntu1604:~$ tar xvf docker-17.12.0-ce.tgz\rdocker/\rdocker/docker-containerd-shim\rdocker/docker-containerd\rdocker/docker-runc\rdocker/docker\rdocker/docker-init\rdocker/docker-containerd-ctr\rdocker/docker-proxy\rdocker/dockerd\rtest@ubuntu1604:~$\r Docker 파일 카피\n test@ubuntu1604:~$ sudo cp docker/* /usr/bin/\r Docker 실행\n test@ubuntu1604:~$ sudo dockerd \u0026amp;\r~중략\rtest@ubuntu1604:~$ sudo docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rtest@ubuntu1604:~$\r docker 사용자 등록\n test@ubuntu1604:~$ sudo usermod -aG docker test\r Systemd Scripts 생성\n sanjuk@docker-test:~$ cat /lib/systemd/system/docker.service\r[Unit]\rDescription=Docker Application Container Engine\rDocumentation=https://docs.docker.com\rAfter=network-online.target docker.socket firewalld.service\rWants=network-online.target\rRequires=docker.socket\r[Service]\rType=notify\r# the default is not to use systemd for cgroups because the delegate issues still\r# exists and systemd currently does not support the cgroup feature set required\r# for containers run by docker\rExecStart=/usr/bin/dockerd -H fd://\rExecReload=/bin/kill -s HUP $MAINPID\rLimitNOFILE=1048576\r# Having non-zero Limit*s causes performance problems due to accounting overhead\r# in the kernel. We recommend using cgroups to do container-local accounting.\rLimitNPROC=infinity\rLimitCORE=infinity\r# Uncomment TasksMax if your systemd version supports it.\r# Only systemd 226 and above support this version.\rTasksMax=infinity\rTimeoutStartSec=0\r# set delegate yes so that systemd does not reset the cgroups of docker containers\rDelegate=yes\r# kill only the docker process, not all processes in the cgroup\rKillMode=process\r# restart the docker process if it exits prematurely\rRestart=on-failure\rStartLimitBurst=3\rStartLimitInterval=60s\r[Install]\rWantedBy=multi-user.target\r systemctl docker enable 모든 설정을 완료한뒤 테스트를 위하여 시스템을 재기동 합니다.\n test@ubuntu1604:~$ sudo -i\r[sudo] password for test:\rroot@ubuntu1604:~# docker ps\rCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\rroot@ubuntu1604:~# systemctl enable docker\rCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /lib/systemd/system/docker.service.\rroot@ubuntu1604:~# init 6\r docker Test\n도커 테스트를 위하여 ubuntu 16.04 버젼을 image 를 실행해 봅니다.\ndocker run 실행시 -it 옵션을 하여 도커 내부로 접속 합니다.\n-rm 옵션의 경우 도커 외부로 빠져나오면 컨테이너 실행이 정지 하게 됩니다.\n sanjuk@ubuntu1604:~$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rsanjuk@ubuntu1604:~$ docker run ubuntu:16.04\rUnable to find image \u0026#39;ubuntu:16.04\u0026#39; locally\r16.04: Pulling from library/ubuntu\r1be7f2b886e8: Pull complete\r6fbc4a21b806: Pull complete\rc71a6f8e1378: Pull complete\r4be3072e5a37: Pull complete\r06c6d2f59700: Pull complete\rDigest: sha256:e27e9d7f7f28d67aa9e2d7540bdc2b33254b452ee8e60f388875e5b7d9b2b696\rStatus: Downloaded newer image for ubuntu:16.04\rsanjuk@ubuntu1604:~$ docker run --rm -it ubuntu:16.04 /bin/bash\rroot@cd21ecd3c368:/# uname -a\rLinux cd21ecd3c368 4.4.0-62-generic #83-Ubuntu SMP Wed Jan 18 14:10:15 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\rroot@cd21ecd3c368:/# exit\rScripts install  get.docker.com 에서 제공하는 스크립트를 이용하여 간단히 설치 할수 있습니다.\n  Docker 설치\nusermode -aG docker $user-name 를 통하여 유저권한을 추가해야 합니다.\n test@ubuntu-docs:~$ curl -s https://get.docker.com/ | sudo sh\rtest@ubuntu-docs:~$ sudo usermod -aG docker test\rCentOS Docker install  required package 설치\n [root@centos7 ~]# sudo yum install -y yum-utils \\\rdevice-mapper-persistent-data \\\rlvm2\r repositori 추가\n [root@centos7 ~]# sudo yum-config-manager \\\r--add-repo \\\rhttps://download.docker.com/linux/centos/docker-ce.repo\r repolist 확인\ndocker-ce-stable repo 추가 확인 합니다.\n [root@centos7 ~]# yum repolist\rLoaded plugins: fastestmirror\rLoading mirror speeds from cached hostfile\r* base: mirror.kakao.com\r* extras: mirror.kakao.com\r* updates: mirror.kakao.com\rrepo id repo name status\rbase/7/x86_64 CentOS-7 - Base 9,911\rdocker-ce-stable/x86_64 Docker CE Stable - x86_64 20\rextras/7/x86_64 CentOS-7 - Extras 432\rupdates/7/x86_64 CentOS-7 - Updates 1,540\rrepolist: 11,903\r[root@centos7 ~]#\r yum install docker\n [root@centos7 ~]# yum install -y docker-ce\r systemctl docker 활성화 및 docker start\n [root@centos7 ~]# systemctl enable docker\rCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\r[root@centos7 ~]# systemctl start docker\r docker test\n [root@centos7 ~]# docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r[root@centos7 ~]# docker run --rm -it ubuntu:16.04 /bin/bash\rUnable to find image \u0026#39;ubuntu:16.04\u0026#39; locally\r16.04: Pulling from library/ubuntu\r3b37166ec614: Pull complete\r504facff238f: Pull complete\rebbcacd28e10: Pull complete\rc7fb3351ecad: Pull complete\r2e3debadcbf7: Pull complete\rDigest: sha256:45ddfa61744947b0b8f7f20b8de70cbcdd441a6a0532f791fd4c09f5e491a8eb\rStatus: Downloaded newer image for ubuntu:16.04\rroot@e5010e637a43:/# cat /etc/lsb-release\rDISTRIB_ID=Ubuntu\rDISTRIB_RELEASE=16.04\rDISTRIB_CODENAME=xenial\rDISTRIB_DESCRIPTION=\u0026#34;Ubuntu 16.04.5 LTS\u0026#34;\rroot@e5010e637a43:/#\rUbuntu Docker install  Docker 설치전 apt update 를 실행합니다.\n test@ubuntu:~$ sudo apt-get update\r https 저장소를 사용하기 위하여 패키지를 설치 합니다.\n test@ubuntu:~$ sudo apt-get install \\\rapt-transport-https \\\rca-certificates \\\rcurl \\\rsoftware-properties-common\r Docker 공식 GPG key 값 추가\n test@ubuntu:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\r apt 저장소를 등록 합니다.\n test@ubuntu:~$ sudo add-apt-repository \\\r\u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\r$(lsb_release -cs) \\\rstable\u0026#34;\r docker 설치전 apt update 를 진행합니다.\n test@ubuntu:~$ sudo apt-get update\r Docker 설치\n test@ubuntu:~$ sudo apt-get install docker-ce\r User 권한 추가\n test@ubuntu:~$ sudo usermod -aG docker test\r ssh client 재접속후 docker ps 명령어를 실행 합니다.\n test@ubuntu:~$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rtest@ubuntu:~$\r Docker test\n test@ubuntu:~$ docker run --rm -it ubuntu:16.04 /bin/bash\rUnable to find image \u0026#39;ubuntu:16.04\u0026#39; locally\r16.04: Pulling from library/ubuntu\r3b37166ec614: Pull complete\r504facff238f: Pull complete\rebbcacd28e10: Pull complete\rc7fb3351ecad: Pull complete\r2e3debadcbf7: Pull complete\rDigest: sha256:45ddfa61744947b0b8f7f20b8de70cbcdd441a6a0532f791fd4c09f5e491a8eb\rStatus: Downloaded newer image for ubuntu:16.04\rroot@d3fabfa958c7:/#\r"
},
{
	"uri": "https://bksanjuk.github.io/freebsd/install/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": "Install FreeBSD 설치 방법을 기술 합니다.\n설치환경 : vm\nCpu 1core / Memory 1G / Hdd 20G\n최소설치의 경우 Memory 32M 에서도 설치가 되지만 어플리케이션 운영 및 Ports 패키지\n설치시 문제가 될수 있음으로 1G 이상의 메모리를 사용하는것이 좋습니다.\n\r 1. DVD image 를 이용하여 부팅을 합니다.\n(1번을 선택하여 설치를 진행합니다.)\n  2. Install 을 선택 합니다.\n  3. keymap 을 설정 합니다.\n(United States of America ISO-8859-1 을 선택 합니다)\n  4. keymap Selection 에서 Continue with us.iso.kbd\nkeymap 을 선택 하여 설치를 계속 진행 합니다.\n  5. Set Hostname (차후에 /etc/rc.conf 수정을 통하여\nhostname 를 변경 할수 있습니다.) bsd11 을 입력 합니다.\n  6. Distribution Select\n(추가 설치 패키지 선택에서는 doc 및 src 를 추가 합니다.)\n  7. Partitioning (파티션 작업 진행) Auto (UFS)를 선택 합니다.\n  8. Partition (Entire Disk 를 선택 합니다.)\n  9. Partition Scheme (MBR 을 선택 합니다.)\nBSD 나 GPT 를 선택 하여도 됩니다.\n  10. Partition Editor\n(Finish 를 선택하여 다음을 세팅 합니다.)\n  11. Confirmation\n(Commit 을 선택 하면 설치를 진행 합니다.)\n  12. Fetching Distribution\n  13. Archive Extraction\n  14. 설치가 끝나면 세팅을 진행 합니다. Root 패스워드 입력\n  15. Network Configuration\n(네트워크 설정) OK 를 눌러 다음을 설정합니다.\n  16. Network Configureation\n( IPv4 사용유무 Yes를 선택 합니다.)\n  17. Network Configureation\n( DHCP 사용유무 Yes를 선택 합니다. ) 차후 /etc/rc.conf 에서 수정이 가능 합니다.\n  18. Network Configureation\n( IPv6 사용유무 No를 선택 합니다. )\n  19. Time Zone Selector\n( Asia 를 선택 합니다.)\n  20. Countries in Asia\n(Korea, Republic of 를 선택 합니다.)\n  21. Time \u0026amp; Date\n( 시간과 날짜 설정)\n  22. Time \u0026amp; Date\n( 시간과 날짜 설정)\n  23. System Configuration (시스템 설정)\n차후 /etc/rc.conf 를 수정하여 변경 할수 있습니다.\n  24. System Hardening ( Disable Sendmail service 를 선택 합니다.)\n11 버전부터는 일부 서비스를 설치시 Disable 할수 있습니다.\n  25. Add User Accounts (추가유저 생성 No 선택 )\n차후 pw 명령어를 이용하여 유저를 생성 합니다.\n  26. Final Configuration\n(Exit 를 선택하여 설치를 종료 합니다.)\n  27. Complete\n(FreeBSD 11.1 의 설치가 완료 되었습니다. Reboot 를 선택합니다.)\n "
},
{
	"uri": "https://bksanjuk.github.io/kubernetes/install/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": "Kubernetes install 문서 참고 사항\n작성중인 문서 입니다.\n단순 참고용으로 부탁 드립니다.\n\r참고 사이트\nKubernetes 사이트\n\rConfig 참고사항\nk8s Kubernetes 설치시 모든 node (master 를 포함한 모든노드) , 또는 master node 에서만 작업을 해야 합니다.\n\r  hosts 파일 설정   모든 노드에서 작업\r# vi /etc/hosts\r10.10.10.27 k8s-master\r10.10.10.28 k8s-node01\r10.10.10.29 k8s-node02\r selinux disable   모든 노드에서 작업\r# vi /etc/selinux/config\r# This file controls the state of SELinux on the system.\r# SELINUX= can take one of these three values:\r# enforcing - SELinux security policy is enforced.\r# permissive - SELinux prints warnings instead of enforcing.\r# disabled - No SELinux policy is loaded.\rSELINUX=disabled\r sysctl.conf 설정   모든 노드에서 작업 # cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/k8s.conf\rnet.bridge.bridge-nf-call-ip6tables = 1\rnet.bridge.bridge-nf-call-iptables = 1\rEOF\r# sysctl --system\r* Applying /usr/lib/sysctl.d/00-system.conf ...\r* Applying /usr/lib/sysctl.d/10-default-yama-scope.conf ...\rkernel.yama.ptrace_scope = 0\r* Applying /usr/lib/sysctl.d/50-default.conf ...\rkernel.sysrq = 16\rkernel.core_uses_pid = 1\rnet.ipv4.conf.default.rp_filter = 1\rnet.ipv4.conf.all.rp_filter = 1\rnet.ipv4.conf.default.accept_source_route = 0\rnet.ipv4.conf.all.accept_source_route = 0\rnet.ipv4.conf.default.promote_secondaries = 1\rnet.ipv4.conf.all.promote_secondaries = 1\rfs.protected_hardlinks = 1\rfs.protected_symlinks = 1\r* Applying /etc/sysctl.d/99-sysctl.conf ...\r* Applying /etc/sysctl.d/k8s.conf ...\r* Applying /etc/sysctl.conf ...\r swapoff (k8s 의 경우 swap 을 사용하지 않습니다.)   모든 노드에서 작업 # swapoff -a\r# vi /etc/fstab\r# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info\r#\rUUID=d7bb5d3b-5b37-47e0-8c26-fe40f7311597 / xfs defaults 0 0\rUUID=43ec35ea-2e35-46f1-864c-b13603a8acac /boot xfs defaults 0 0\r#UUID=2de336ec-4a33-36r1-8w2s-asdf2342ccgg swap swap defaults 0 0\r docker-ce 설치   모든 노드에서 작업\r# yum install -y yum-utils device-mapper-persistent-data lvm2\r# yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\r# yum install -y docker-ce\r# mkdir /etc/docker\r# mkdir /etc/docker\r# cat \u0026gt; /etc/docker/daemon.json \u0026lt;\u0026lt;EOF\r{\r\u0026quot;exec-opts\u0026quot;: [\u0026quot;native.cgroupdriver=systemd\u0026quot;],\r\u0026quot;log-driver\u0026quot;: \u0026quot;json-file\u0026quot;,\r\u0026quot;log-opts\u0026quot;: {\r\u0026quot;max-size\u0026quot;: \u0026quot;100m\u0026quot;\r},\r\u0026quot;storage-driver\u0026quot;: \u0026quot;overlay2\u0026quot;,\r\u0026quot;storage-opts\u0026quot;: [\r\u0026quot;overlay2.override_kernel_check=true\u0026quot;\r]\r}\rEOF\r# mkdir -p /etc/systemd/system/docker.service.d\r# systemctl daemon-reload\r# systemctl restart docker\r kubernetes 설치 및 system 리부팅   # vi /etc/yum.repos.d/kubernetes.repo\r[kubernetes]\rname=Kubernetes\rbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64\renabled=1\rgpgcheck=1\rrepo_gpgcheck=1\rgpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg\rhttps://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\r# yum install -y kubelet kubeadm kubectl\r# init 6\r# systemctl start docker ; systemctl enable docker\r# systemctl start kubelet ; systemctl enable kubelet\r\rk8s-master Only\nk8s-master node 에서만 작업 합니다.\n\r k8s-master node 에서 apiserver 와 pod-network 를 설정 합니다.   [root@k8s-master ~]# kubeadm init --apiserver-advertise-address=10.10.10.27 --pod-network-cidr=20.20.0.0/16\r~중략\r[addons] Applied essential addon: kube-proxy\rYour Kubernetes control-plane has initialized successfully!\rTo start using your cluster, you need to run the following as a regular user:\rmkdir -p $HOME/.kube\rsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\rsudo chown $(id -u):$(id -g) $HOME/.kube/config\rYou should now deploy a pod network to the cluster.\rRun \u0026quot;kubectl apply -f [podnetwork].yaml\u0026quot; with one of the options listed at:\rhttps://kubernetes.io/docs/concepts/cluster-administration/addons/\rThen you can join any number of worker nodes by running the following on each as root:\rkubeadm join 10.10.10.27:6443 --token syojz8.svxybs8x0f3iy28a \\\r--discovery-token-ca-cert-hash sha256:b28c6474e92e2bc87e8f7b470119e506df36ae6ae08a8f50dd070f5d714a28e1\r[root@k8s-master ~]#\r[root@k8s-master ~]# mkdir -p $HOME/.kube\r[root@k8s-master ~]# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\r[root@k8s-master ~]# sudo chown $(id -u):$(id -g) $HOME/.kube/config\r[root@k8s-master ~]# kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\r[root@k8s-master ~]# kubectl get nodes\rNAME STATUS ROLES AGE VERSION\rk8s-master Ready master 2m22s v1.14.1\r[root@k8s-master ~]# kubectl get pods --all-namespaces\rNAMESPACE NAME READY STATUS RESTARTS AGE\rkube-system coredns-fb8b8dccf-kwnbc 0/1 Running 0 112s\rkube-system coredns-fb8b8dccf-nlpqx 0/1 Running 0 112s\rkube-system etcd-k8s-master 1/1 Running 0 86s\rkube-system kube-apiserver-k8s-master 1/1 Running 0 79s\rkube-system kube-controller-manager-k8s-master 1/1 Running 0 85s\rkube-system kube-flannel-ds-amd64-5rft8 1/1 Running 0 32s\rkube-system kube-proxy-fvf6z 1/1 Running 0 112s\rkube-system kube-scheduler-k8s-master 1/1 Running 0 82s\r[root@k8s-master ~]#\r k8s-node01 / k8s-node02 에서 작업   [root@k8s-node01 ~]# kubeadm join 10.10.10.27:6443 --token syojz8.svxybs8x0f3iy28a \\\r--discovery-token-ca-cert-hash sha256:b28c6474e92e2bc87e8f7b470119e506df36ae6ae08a8f50dd070f5d714a28e1\r[root@k8s-node02 ~]# kubeadm join 10.10.10.27:6443 --token syojz8.svxybs8x0f3iy28a \\\r--discovery-token-ca-cert-hash sha256:b28c6474e92e2bc87e8f7b470119e506df36ae6ae08a8f50dd070f5d714a28e1\r k9s-master 에서 확인   [root@k8s-master ~]# kubectl get nodes\rNAME STATUS ROLES AGE VERSION\rk8s-master Ready master 4m32s v1.14.1\rk8s-node01 Ready \u0026lt;none\u0026gt; 79s v1.14.1\rk8s-node02 NotReady \u0026lt;none\u0026gt; 17s v1.14.1\r[root@k8s-master ~]#\r k8s Testing (k8s-master 에서만 진행 합니다.)   [root@k8s-master ~]# kubectl create deployment nginx --image=nginx\r[root@k8s-master ~]# kubectl describe deployment nginx\rName: nginx\rNamespace: default\rCreationTimestamp: Fri, 03 May 2019 00:28:11 +0900\rLabels: app=nginx\rAnnotations: deployment.kubernetes.io/revision: 1\rSelector: app=nginx\rReplicas: 1 desired | 1 updated | 1 total | 0 available | 1 unavailable\rStrategyType: RollingUpdate\rMinReadySeconds: 0\rRollingUpdateStrategy: 25% max unavailable, 25% max surge\rPod Template:\rLabels: app=nginx\rContainers:\rnginx:\rImage: nginx\rPort: \u0026lt;none\u0026gt;\rHost Port: \u0026lt;none\u0026gt;\rEnvironment: \u0026lt;none\u0026gt;\rMounts: \u0026lt;none\u0026gt;\rVolumes: \u0026lt;none\u0026gt;\rConditions:\rType Status Reason\r---- ------ ------\rAvailable False MinimumReplicasUnavailable\rProgressing True ReplicaSetUpdated\rOldReplicaSets: \u0026lt;none\u0026gt;\rNewReplicaSet: nginx-65f88748fd (1/1 replicas created)\rEvents:\rType Reason Age From Message\r---- ------ ---- ---- -------\rNormal ScalingReplicaSet 18s deployment-controller Scaled up replica set nginx-65f88748fd to 1\r[root@k8s-master ~]#\r[root@k8s-master ~]# kubectl create service nodeport nginx --tcp=80:80\r[root@k8s-master ~]# kubectl get svc\rNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE\rkubernetes ClusterIP 10.96.0.1 \u0026lt;none\u0026gt; 443/TCP 6m33s\rnginx NodePort 10.102.109.228 \u0026lt;none\u0026gt; 80:30187/TCP 21s\r k8s-master node 에서 nginx 확인   [root@k8s-master ~]# curl k8s-node01:30187\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;Welcome to nginx!\u0026lt;/title\u0026gt;\r\u0026lt;style\u0026gt;\rbody {\rwidth: 35em;\rmargin: 0 auto;\rfont-family: Tahoma, Verdana, Arial, sans-serif;\r}\r\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;Welcome to nginx!\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;If you see this page, the nginx web server is successfully installed and\rworking. Further configuration is required.\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;For online documentation and support please refer to\r\u0026lt;a href=\u0026quot;http://nginx.org/\u0026quot;\u0026gt;nginx.org\u0026lt;/a\u0026gt;.\u0026lt;br/\u0026gt;\rCommercial support is available at\r\u0026lt;a href=\u0026quot;http://nginx.com/\u0026quot;\u0026gt;nginx.com\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;\u0026lt;em\u0026gt;Thank you for using nginx.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r[root@k8s-master ~]#\r pods scale up (k8s-master 에서 진행)   최초 생성시 1개의 pods 입니다. [root@k8s-master ~]# kubectl get pods\rNAME READY STATUS RESTARTS AGE\rnginx-65f88748fd-8lqrb 1/1 Running 0 5m12s\r[root@k8s-master ~]#\rpods 을 5개로 늘립니다. [root@k8s-master ~]# kubectl scale --replicas=5 deployment/nginx\rdeployment.extensions/nginx scaled\r[root@k8s-master ~]# kubectl get pods\rNAME READY STATUS RESTARTS AGE\rnginx-65f88748fd-6v7n5 1/1 Running 0 13s\rnginx-65f88748fd-86svl 0/1 ContainerCreating 0 13s\rnginx-65f88748fd-8lqrb 1/1 Running 0 12m\rnginx-65f88748fd-pq8p8 0/1 ContainerCreating 0 13s\rnginx-65f88748fd-w4tq8 0/1 ContainerCreating 0 13s\r[root@k8s-master ~]#\r"
},
{
	"uri": "https://bksanjuk.github.io/redhat-enterprise-linux/redhat-cluster-suite/",
	"title": "RedHat Cluster Suite",
	"tags": [],
	"description": "",
	"content": "\r작성중인 문서 입니다.\nKVM 내용은 차후 작성할 예정 입니다.\n\r 2019-05-21-vmware-fence-rhcs-install.md\n본 문서는 vmware ESXi 5.5 와 vcenter 로 테스트 하였습니다.\nOS Version 은 rhel 7.6 입니다.\npcmk_reboot_action fence option 사용시 vmware 에서는 정상적으로 작동하지 않습니다.\n OS 설정  방화벽 및 selinux 를 disable 합니다.\nha-node01 , ha-node02 에서 작업\n # systemctl disable firewalld\r# echo 'GRUB_CMDLINE_LINUX=\u0026quot;net.ifnames=0\u0026quot;' \u0026gt;\u0026gt;/etc/default/grub\r# grub2-mkconfig -o /boot/grub2/grub.cfg\r hosts 파일 설정\nha-node01 , ha-node02 에서 작업\n [root@ha-node01 ~]# cat /etc/hosts\r127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4\r::1 localhost localhost.localdomain localhost6 localhost6.localdomain6\r10.10.10.32 ha-node01\r10.10.10.33 ha-node02\r iso.repo 파일 생성\nha-node01 , ha-node02 에서 작업\n [root@ha-node01 ~]# vi /etc/yum.repos.d/iso.repo\r[iso]\rname=iso\rbaseurl=file:///mnt\rgpgcheck=0\r[HighAvailability]\rname=HighAvailability\rbaseurl=file:///mnt/addons/HighAvailability\rgpgcheck=0\r[ResilientStorage]\rname=RS\rbaseurl=file:///mnt/addons/ResilientStorage\rgpgcheck=0\r network 설정\n [root@ha-node01 ~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0\rTYPE=Ethernet\rBOOTPROTO=none\rDEVICE=eth0\rONBOOT=yes\rIPADDR=10.10.10.32\rNETMASK=255.255.255.0\r[root@ha-node02 ~]# vi /etc/sysconfig/network-scripts/ifcfg-eth0\rTYPE=Ethernet\rBOOTPROTO=none\rDEVICE=eth0\rONBOOT=yes\rIPADDR=10.10.10.33\rNETMASK=255.255.255.0\r패키지 설치  High-availability 패키지 설치\n [root@ha-node01 ~]# yum install -y pcs fence-agents-all\r[root@ha-node02 ~]# yum install -y pcs fence-agents-all\rhigh-availability 패키지 설치시 hacluster user 가 생성 됩니다. hacluster 유저의 패스워드를 ha-node01 , ha-node02 동일하게 설정 합니다. [root@ha-node01 ~]# passwd hacluster\r[root@ha-node02 ~]# passwd hacluster\rha-node01 , ha-node02 에 동일하게 설정 합니다. [root@ha-node01 ~]# systemctl enable pcsd\r[root@ha-node01 ~]# systemctl start pcsd\r ha-node01 에서만 인증을 실행 합니다.\n root@ha-node01 ~]# pcs cluster auth ha-node01 ha-node02\rUsername: hacluster\rPassword:\rha-node02: Authorized\rha-node01: Authorized\r[root@ha-node01 ~]#\r클러스터 생성  클러스터를 만들고 노드를 추가한후 Cluster 서비스를 시작 합니다.\nha-node01 에서만 실행\n [root@ha-node01 ~]# pcs cluster setup --name ha-scv ha-node01 ha-node02\rDestroying cluster on nodes: ha-node01, ha-node02...\rha-node02: Stopping Cluster (pacemaker)...\rha-node01: Stopping Cluster (pacemaker)...\rha-node02: Successfully destroyed cluster\rha-node01: Successfully destroyed cluster\rSending 'pacemaker_remote authkey' to 'ha-node01', 'ha-node02'\rha-node01: successful distribution of the file 'pacemaker_remote authkey'\rha-node02: successful distribution of the file 'pacemaker_remote authkey'\rSending cluster config files to the nodes...\rha-node01: Succeeded\rha-node02: Succeeded\rSynchronizing pcsd certificates on nodes ha-node01, ha-node02...\rha-node02: Success\rha-node01: Success\rRestarting pcsd on the nodes in order to reload the certificates...\rha-node02: Success\rha-node01: Success\r[root@ha-node01 ~]#\r Cluster 서비스가 부팅후 자동으로 실행 될수 있도록 enable 합니다.\nha-node01 에서만 실행\n [root@ha-node01 ~]# pcs cluster enable --all\rpcs cluster 를 실행  ha-node01 , ha-node02 에서 실행\n [root@ha-node01 ~]# pcs cluster start\r[root@ha-node02 ~]# pcs cluster start\rpcs cluster 상태를 확인 합니다. [root@ha-node01 ~]# pcs status\rCluster name: ha-scv\rWARNINGS:\rNo stonith devices and stonith-enabled is not false\rStack: corosync\rCurrent DC: ha-node01 (version 1.1.19-8.el7-c3c624ea3d) - partition with quorum\rLast updated: Thu May 9 01:37:03 2019\rLast change: Thu May 9 01:36:44 2019 by hacluster via crmd on ha-node01\r2 nodes configured\r0 resources configured\rOnline: [ ha-node01 ha-node02 ]\rNo resources\rDaemon Status:\rcorosync: active/disabled\rpacemaker: active/disabled\rpcsd: active/enabled\r[root@ha-node01 ~]#\rFence Device 설정  vmware 환경 , vcenter 로 로그인 해야 합니다\nha-node01 에서 작업\n vm node 를 검색 합니다. # fence_vmware_soap -a 10.10.10.201 -l administrator@vsphere.local -p Dkdlxlqmfpdls1! -z --ssl-insecure -o list |grep -i ha-node\rha-node01 / ha-node02 fence-device 를 생성 합니다. ha-node01\raction=\u0026quot;reboot\u0026quot; 와 pcmk_reboot_action 차이는 ? [root@ha-node01 ~]# pcs stonith create fence_node01 fence_vmware_soap pcmk_host_list=\u0026quot;ha-node01\u0026quot; port=\u0026quot;ha-node01\u0026quot; ipaddr=\u0026quot;10.10.10.201\u0026quot; ssl_insecure=1 login=\u0026quot;administrator@vsphere.local\u0026quot; passwd='Dkdlxlqmfpdls1!' ssl_insecure=1 action=\u0026quot;reboot\u0026quot; pcmk_monitor_timeout=60s --force\r[root@ha-node01 ~]# pcs stonith create fence_node02 fence_vmware_soap pcmk_host_list=\u0026quot;ha-node02\u0026quot; port=\u0026quot;ha-node02\u0026quot; ipaddr=\u0026quot;10.10.10.201\u0026quot; ssl_insecure=1 login=\u0026quot;administrator@vsphere.local\u0026quot; passwd='Dkdlxlqmfpdls1!' ssl_insecure=1 action=\u0026quot;reboot\u0026quot; pcmk_monitor_timeout=60s --force\r[root@ha-node01 ~]# pcs property set stonith-timeout=120s\r[root@ha-node01 ~]# pcs constraint location fence_node02 prefers ha-node02\r[root@ha-node01 ~]# pcs resource cleanup --all\rCleaned up fence_node02 on ha-node02\rCleaned up fence_node02 on ha-node01\rWaiting for 1 replies from the CRMd. OK\r[root@ha-node01 ~]#\rResource 설정  vip 설정\n [root@ha-node01 ~]# pcs resource create VIP IPaddr2 ip=10.10.10.40 cidr_netmask=22 nic=eth0 --group test-svc\r 모니터링 설정\n [root@ha-node01 ~]# pcs resource create svcnet-monitor ethmonitor interface=eth0 --clone\r[root@ha-node01 ~]# pcs constraint location VIP rule score=-INFINITY ethmonitor-eth0 ne 1\r Cluster 상태 확인\n [root@ha-node01 ~]# ip addr show\r1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\rlink/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\rinet 127.0.0.1/8 scope host lo\rvalid_lft forever preferred_lft forever\rinet6 ::1/128 scope host\rvalid_lft forever preferred_lft forever\r2: eth0: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000\rlink/ether 00:50:56:9f:79:e7 brd ff:ff:ff:ff:ff:ff\rinet 10.10.10.35/24 brd 10.10.10.255 scope global noprefixroute eth0\rvalid_lft forever preferred_lft forever\rinet 10.10.10.40/22 scope global eth0\rvalid_lft forever preferred_lft forever\rinet6 fe80::250:56ff:fe9f:79e7/64 scope link\rvalid_lft forever preferred_lft forever\r[root@ha-node01 ~]#\r pcs resource 삭제\n [root@ha-node01 ~]# pcs resource delete fence_node01\r Resource Group 이관\n [root@ha-node02 ~]# pcs status ~중략\rfence_node01 (stonith:fence_vmware_soap): Started ha-node02\rfence_node02 (stonith:fence_vmware_soap): Starting ha-node02\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node02\rResource Group 을 이관 합니다. ha-node01 -\u0026gt; ha-node02 로 이관\r[root@ha-node02 ~]# pcs resource move test-svc ha-node01\rResource Group 상태 확인 [root@ha-node02 ~]# pcs status\r~중략 Resource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node01\rClone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node01 ha-node02 ]\rfencing test  ha-node02 에서 ha-node01 시스템을 리부팅 시킵니다.\nhttps://access.redhat.com/solutions/1172133\nhttps://access.redhat.com/solutions/3994601\n \r[root@ha-node02 ~]# stonith_admin --reboot ha-node01\r약 120s 정도의 시간이 걸립니다. Cluster 상태를 확인 합니다. [root@ha-node02 ~]# pcs status\rCluster name: ha-scv\rWARNINGS:\rFollowing stonith devices have the 'action' option set, it is recommended to set 'pcmk_off_action', 'pcmk_reboot_action' instead: fence_node01, fence_node02\rStack: corosync\rCurrent DC: ha-node02 (version 1.1.19-8.el7-c3c624ea3d) - partition with quorum\rLast updated: Fri May 17 00:01:18 2019\rLast change: Thu May 16 23:56:28 2019 by root via crm_resource on ha-node02\r2 nodes configured\r5 resources configured\rOnline: [ ha-node02 ]\rOFFLINE: [ ha-node01 ]\rFull list of resources:\rfence_node01 (stonith:fence_vmware_soap): Started ha-node02\rfence_node02 (stonith:fence_vmware_soap): Started ha-node02\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node02\rClone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node02 ]\rStopped: [ ha-node01 ]\rDaemon Status:\rcorosync: active/enabled\rpacemaker: active/enabled\rpcsd: active/enabled\r[root@ha-node02 ~]#\r오류 메시지 삭제후 Cluster 상태를 확인 합니다. [root@ha-node02 ~]# pcs resource cleanup --all\rCleaned up all resources on all nodes\r[root@ha-node02 ~]# pcs status\rCluster name: ha-scv\rWARNINGS:\rFollowing stonith devices have the 'action' option set, it is recommended to set 'pcmk_off_action', 'pcmk_reboot_action' instead: fence_node01, fence_node02\rStack: corosync\rCurrent DC: ha-node02 (version 1.1.19-8.el7-c3c624ea3d) - partition with quorum\rLast updated: Fri May 17 00:02:07 2019\rLast change: Thu May 16 23:56:28 2019 by root via crm_resource on ha-node02\r2 nodes configured\r5 resources configured\rOnline: [ ha-node01 ha-node02 ]\rFull list of resources:\rfence_node01 (stonith:fence_vmware_soap): Started ha-node02\rfence_node02 (stonith:fence_vmware_soap): Started ha-node02\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node01\rClone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node01 ha-node02 ]\rDaemon Status:\rcorosync: active/enabled\rpacemaker: active/enabled\rpcsd: active/enabled\r[root@ha-node02 ~]#\r Nic 장애 테스트\n장애 시나리오: ha-node01 의 eth0 Nic Down 현상 시 ha-node01 이 정상적으로 시스템 리부팅이 되는지 확인 합니다.\n서비스 상태 확인 후 ha-node01 의 eth0 Nic 를 Down 합니다.\nNetwork 이 단절된 관계로 vmware local(물리장비) 에서 확인 합니다.\n \r[root@ha-node01 ~]# pcs status\r~중략 Resource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node01\rClone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node01 ha-node02 ]\r[root@ha-node01 ~]# ifdown eth0\r[root@ha-node01 ~]# pcs status\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node01 (UNCLEAN) \u0026lt;--- 상태가 UNCLEAN 으로 변경 되었습니다.\rClone Set: svcnet-monitor-clone [svcnet-monitor]\rsvcnet-monitor (ocf::heartbeat:ethmonitor): Started ha-node01 (UNCLEAN) \u0026lt;--- 상태가 UNCLEAN 으로 변경 되었습니다. Started: [ ha-node02 ]\rha-node02 확인 [root@ha-node02 ~]# pcs status\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Starting ha-node02 \u0026lt;-- ha-node01 에서 ha-node02 로 VIP 가 이관 되었습니다. Clone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node02 ]\rStopped: [ ha-node01 ]\rHA-LVM  ha-storage vm 을 설정 합니다.\n운영 장비에서는 Storage Data 보호를 위하여 HA-LVM 을 사용 해야 합니다.\nResource 를 사용 하는 node 에서 Storage mount 시 다른 한쪽에서는 mount 할수 없습니다.\n동일볼륨을 모든 node 에서 마운트 하였을시 filesystem 이 깨지는것을 방지 하기 위하여 사용 합니다.\n  /etc/hosts 설정 ha-node01 , ha-node02 , ha-storage 에 동일하게 추가 합니다.  [root@ha-storage ~]# cat /etc/hosts\r127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4\r10.10.10.35 ha-node01\r10.10.10.36 ha-node02\r10.10.10.37 ha-storage\r/dev/sdb 10G 의 Disk 를 VM에 추가 하였습니다. [root@ha-storage ~]# lsblk\rNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT\rfd0 2:0 1 4K 0 disk\rsda 8:0 0 16G 0 disk\r├─sda1 8:1 0 1G 0 part /boot\r├─sda2 8:2 0 1G 0 part [SWAP]\r└─sda3 8:3 0 14G 0 part /\rsdb 8:16 0 10G 0 disk\r 패키지 설치\n [root@ha-storage ~]# yum install targetcli\r fdisk 작업\n [root@ha-storage ~]# fdisk /dev/sdb\riscsi 용 볼륨을 생성 합니다. 용량은 전체 용량을 설정 하였습니다. Select (default p): p\rPartition number (1-4, default 1):\rFirst sector (2048-20971519, default 2048):\rUsing default value 2048\rLast sector, +sectors or +size{K,M,G} (2048-20971519, default 20971519):\rUsing default value 20971519\rPartition 1 of type Linux and of size 10 GiB is set\rCommand (m for help): t\rSelected partition 1\rHex code (type L to list all codes): 8e\rChanged type of partition 'Linux' to 'Linux LVM'\rCommand (m for help): wq\rThe partition table has been altered!\rCalling ioctl() to re-read partition table.\rSyncing disks.\r[root@ha-storage ~]# partprobe\rWarning: Unable to open /dev/sr0 read-write (Read-only file system). /das been opened read-only.\r[root@ha-storage ~]#\r LVM 패키지를 설치 및 LVM 을 생성 합니다.\n [root@ha-storage ~]# yum install -y lvm2\r[root@ha-storage ~]# vgcreate vg00 /dev/sdb1\rVolume group \u0026quot;vg00\u0026quot; successfully created\r[root@ha-storage ~]# lvcreate -L 1G -n lv-vol1 vg00\rLogical volume \u0026quot;lv-vol1\u0026quot; created.\r[root@ha-storage ~]# lvcreate -L 1G -n lv-vol2 vg00\rLogical volume \u0026quot;lv-vol2\u0026quot; created.\r[root@ha-storage ~]# lvcreate -L 1G -n lv-vol3 vg00\rLogical volume \u0026quot;lv-vol3\u0026quot; created.\r[root@ha-storage ~]#\r[root@ha-storage ~]# lvs\rLV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert\rlv-vol1 vg00 -wi-a----- 1.00g\rlv-vol2 vg00 -wi-a----- 1.00g\rlv-vol3 vg00 -wi-a----- 1.00g\r[root@ha-storage ~]#\r iscsi block 생성\n [root@ha-storage ~]# targetcli\r/iscsi/iqn.20...:target1/tpg1\u0026gt; cd /backstores/block\r/backstores/block\u0026gt; create lv-vol1 /dev/vg00/lv-vol1\r/backstores/block\u0026gt; create lv-vol2 /dev/vg00/lv-vol2\r/backstores/block\u0026gt; create lv-vol3 /dev/vg00/lv-vol3\r/backstores/block\u0026gt; cd /iscsi\r/iscsi\u0026gt; create iqn.2019-05.com.hacluster:target1\r/iscsi\u0026gt; cd iqn.2019-05.com.hacluster:target1/\r/iscsi/iqn.20...uster:target1\u0026gt; cd tpg1/luns\r/iscsi/iqn.20...et1/tpg1/luns\u0026gt; create /backstores/block/lv-vol1\r/iscsi/iqn.20...et1/tpg1/luns\u0026gt; create /backstores/block/lv-vol2\r/iscsi/iqn.20...et1/tpg1/luns\u0026gt; create /backstores/block/lv-vol3\r/iscsi/iqn.20...:target1/tpg1\u0026gt; set attribute authentication=0\r/iscsi/iqn.20...:target1/tpg1\u0026gt; set attribute demo_mode_write_protect=0\r/iscsi/iqn.20...:target1/tpg1\u0026gt; set attribute generate_node_acls=1\r/iscsi/iqn.20...:target1/tpg1\u0026gt; exit\r ha-node01 / ha-node01 iscsi 연결\niscsi-initiator-utils 패키지를 설치 합니다.\n [root@ha-node01 ~]# yum install -y iscsi-initiator-utils\r[root@ha-node02 ~]# yum install -y iscsi-initiator-utils\r ha-node01 에서 ha-storage 볼륨을 확인 합니다.\n [root@ha-node01 ~]# iscsiadm --mode discoverydb --type sendtargets --portal ha-storage --discover\r10.10.10.37:3260,1 iqn.2019-05.com.hacluster:target1\r ha-node02 에서 ha-storage 볼륨을 확인 합니다.\n [root@ha-node02 ~]# iscsiadm --mode discoverydb --type sendtargets --portal ha-storage --discover\r10.10.10.37:3260,1 iqn.2019-05.com.hacluster:target1\r iscsi server 에 로그인 합니다.\n [root@ha-node01 ~]# iscsiadm --mode node --targetname iqn.2019-05.com.hacluster:target1 --portal ha-storage --login\r[root@ha-node02 ~]# iscsiadm --mode node --targetname iqn.2019-05.com.hacluster:target1 --portal ha-storage --login\r[root@ha-node01 ~]# lsblk\rNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT\rfd0 2:0 1 4K 0 disk\rsda 8:0 0 16G 0 disk\r├─sda1 8:1 0 1G 0 part /boot\r├─sda2 8:2 0 1G 0 part [SWAP]\r└─sda3 8:3 0 14G 0 part /\rsdb 8:16 0 1G 0 disk \u0026lt;--- iscsi 볼륨\rsdc 8:32 0 1G 0 disk \u0026lt;--- iscsi 볼륨\rsdd 8:48 0 1G 0 disk \u0026lt;--- iscsi 볼륨\r[root@ha-node01 ~]#\r[root@ha-node02 ~]# lsblk\rNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT\rfd0 2:0 1 4K 0 disk\rsda 8:0 0 16G 0 disk\r├─sda1 8:1 0 1G 0 part /boot\r├─sda2 8:2 0 1G 0 part [SWAP]\r└─sda3 8:3 0 14G 0 part /\rsdb 8:16 0 1G 0 disk \u0026lt;--- iscsi 볼륨\rsdc 8:32 0 1G 0 disk \u0026lt;--- iscsi 볼륨\rsdd 8:48 0 1G 0 disk \u0026lt;--- iscsi 볼륨\r[root@ha-node02 ~]#\r iscsi Volume 정보 확인\nha-storage 시스템 에서 확인 가능 합니다.\n [root@ha-storage ~]# targetcli\rtargetcli shell version 2.1.fb41\rCopyright 2011-2013 by Datera, Inc and others.\rFor help on commands, type 'help'.\r/iscsi/iqn.20...:target2/tpg1\u0026gt; ls\ro- tpg1 ............................................................ [gen-acls, no-auth]\ro- acls .................................................................... [ACLs: 0]\ro- luns .................................................................... [LUNs: 3]\r| o- lun0 ........................................ [block/lv-vol1 (/dev/vg00/lv-vol1)]\r| o- lun1 ........................................ [block/lv-vol2 (/dev/vg00/lv-vol2)]\r| o- lun2 ........................................ [block/lv-vol3 (/dev/vg00/lv-vol3)]\ro- portals .............................................................. [Portals: 1]\ro- 0.0.0.0:3260 ............................................................... [OK]\r/iscsi/iqn.20...:target2/tpg1\u0026gt; cd\r/\u0026gt; ls\ro- / ............................................................................. [...]\ro- backstores .................................................................. [...]\r| o- block ...................................................... [Storage Objects: 3]\r| | o- lv-vol1 ...................... [/dev/vg00/lv-vol1 (2.0GiB) write-thru activated]\r| | o- lv-vol2 ...................... [/dev/vg00/lv-vol2 (2.0GiB) write-thru activated]\r| | o- lv-vol3 ...................... [/dev/vg00/lv-vol3 (2.0GiB) write-thru activated]\r| o- fileio ...................................................... [Storage Objects: 1]\r| | o- disk1 ....................... [/images/disk1.img (10.0GiB) write-back activated]\r| o- pscsi ....................................................... [Storage Objects: 0]\r| o- ramdisk ..................................................... [Storage Objects: 0]\ro- iscsi ................................................................. [Targets: 2]\r| o- iqn.2018-04.com.example:target1 ........................................ [TPGs: 1]\r| | o- tpg1 ....................................................... [gen-acls, no-auth]\r| | o- acls ............................................................... [ACLs: 0]\r| | o- luns ............................................................... [LUNs: 1]\r| | | o- lun0 .................................... [fileio/disk1 (/images/disk1.img)]\r| | o- portals ......................................................... [Portals: 1]\r| | o- 0.0.0.0:3260 .......................................................... [OK]\r| o- iqn.2018-04.com.example:target2 ........................................ [TPGs: 1]\r| o- tpg1 ....................................................... [gen-acls, no-auth]\r| o- acls ............................................................... [ACLs: 0]\r| o- luns ............................................................... [LUNs: 3]\r| | o- lun0 ................................... [block/lv-vol1 (/dev/vg00/lv-vol1)]\r| | o- lun1 ................................... [block/lv-vol2 (/dev/vg00/lv-vol2)]\r| | o- lun2 ................................... [block/lv-vol3 (/dev/vg00/lv-vol3)]\r| o- portals ......................................................... [Portals: 1]\r| o- 0.0.0.0:3260 .......................................................... [OK]\ro- loopback .............................................................. [Targets: 0]\r/\u0026gt; ls |grep -i target\ro- / .............................................................................. [...]\ro- backstores ................................................................... [...]\r| o- block ....................................................... [Storage Objects: 3]\r| | o- lv-vol1 ...................... [/dev/vg00/lv-vol1 (2.0GiB) write-thru activated]\r| | o- lv-vol2 ...................... [/dev/vg00/lv-vol2 (2.0GiB) write-thru activated]\r| | o- lv-vol3 ...................... [/dev/vg00/lv-vol3 (2.0GiB) write-thru activated]\r| o- fileio ...................................................... [Storage Objects: 1]\r| | o- disk1 ....................... [/images/disk1.img (10.0GiB) write-back activated]\r| o- pscsi ....................................................... [Storage Objects: 0]\r| o- ramdisk ..................................................... [Storage Objects: 0]\ro- iscsi ................................................................. [Targets: 2]\r| o- iqn.2018-04.com.example:target1 ........................................ [TPGs: 1]\r| | o- tpg1 ....................................................... [gen-acls, no-auth]\r| | o- acls ............................................................... [ACLs: 0]\r| | o- luns ............................................................... [LUNs: 1]\r| | | o- lun0 .................................... [fileio/disk1 (/images/disk1.img)]\r| | o- portals ......................................................... [Portals: 1]\r| | o- 0.0.0.0:3260 .......................................................... [OK]\r| o- iqn.2018-04.com.example:target2 ........................................ [TPGs: 1]\r| o- tpg1 ....................................................... [gen-acls, no-auth]\r| o- acls ............................................................... [ACLs: 0]\r| o- luns ............................................................... [LUNs: 3]\r| | o- lun0 ................................... [block/lv-vol1 (/dev/vg00/lv-vol1)]\r| | o- lun1 ................................... [block/lv-vol2 (/dev/vg00/lv-vol2)]\r| | o- lun2 ................................... [block/lv-vol3 (/dev/vg00/lv-vol3)]\r| o- portals ......................................................... [Portals: 1]\r| o- 0.0.0.0:3260 .......................................................... [OK]\ro- loopback .............................................................. [Targets: 0]\r/\u0026gt;\rlvm2 패키지 설치  ha-node01 , ha-node02 에 설치 합니다.\ncluster 에서 lvm 사용시 설정 하며 lvm 을 설정할 경우 clvm 을 이용한 halvm 을 구성 해야 합니다.\n [root@ha-node01 ~]# yum install -y lvm2\r[root@ha-node02 ~]# yum install -y lvm2\r lvm 생성   ha-node01 에서 작업 합니다. (한쪽 노드에서만 작업을 합니다.)\n [root@ha-node01 ~]# pvcreate /dev/sdb /dev/sdc /dev/sdd\r[root@ha-node01 ~]# vgcreate vg00 /dev/sdb /dev/sdc /dev/sdd\r[root@ha-node01 ~]# lvcreate -l 100%free -n halvm vg00\rlvm 정보를 확인 합니다. [root@ha-node01 ~]# lvs\rLV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert\rhalvm vg00 -wi-a----- \u0026lt;2.91g\r[root@ha-node01 ~]#\r HA-LVM Resource 추가\nha-node01 , ha-node02 에서 작업\nlvmconf 실행시 Warning 메세지는 무시 합니다.\n [root@ha-node01 ~]# systemctl stop lvm2-lvmetad\r[root@ha-node01 ~]# systemctl disable lvm2-lvmetad\r[root@ha-node01 ~]# systemctl stop lvm2-lvmetad.socket\r[root@ha-node01 ~]# systemctl disable lvm2-lvmetad.socket\r[root@ha-node01 ~]# lvmconf --enable-halvm --services --startstopservices\rWarning: Stopping lvm2-lvmetad.service, but it can still be activated by:\rlvm2-lvmetad.socket\rRemoved symlink /etc/systemd/system/sysinit.target.wants/lvm2-lvmetad.socket.\r[root@ha-node01 ~]#\r[root@ha-node02 ~]# lvmconf --enable-halvm --services --startstopservices\rWarning: Stopping lvm2-lvmetad.service, but it can still be activated by:\rlvm2-lvmetad.socket\rRemoved symlink /etc/systemd/system/sysinit.target.wants/lvm2-lvmetad.socket.\r[root@ha-node02 ~]#\r- lvm.conf 확인 [root@ha-node01 ~]# grep -e \u0026quot;locking_type = 1\u0026quot; -e \u0026quot;use_lvmetad = 0\u0026quot; /etc/lvm/lvm.conf\rlocking_type = 1\ruse_lvmetad = 0\r[root@ha-node01 ~]#\r[root@ha-node02 ~]# grep -e \u0026quot;locking_type = 1\u0026quot; -e \u0026quot;use_lvmetad = 0\u0026quot; /etc/lvm/lvm.conf\rlocking_type = 1\ruse_lvmetad = 0\r[root@ha-node02 ~]#\r- lvm2-lvmetad 서비스 확인 [root@ha-node01 ~]# systemctl status lvm2-lvmetad.service | grep -i -e active -e loaded\rLoaded: loaded (/usr/lib/systemd/system/lvm2-lvmetad.service; static; vendor preset: enabled)\rActive: inactive (dead) since Fri 2019-05-17 23:08:31 KST; 1min 28s ago\r[root@ha-node01 ~]# [root@ha-node02 ~]# systemctl status lvm2-lvmetad.service | grep -i -e active -e loaded\rLoaded: loaded (/usr/lib/systemd/system/lvm2-lvmetad.service; static; vendor preset: enabled)\rActive: inactive (dead) since Fri 2019-05-17 23:08:31 KST; 1min 28s ago\r[root@ha-node01 ~]#  OS 에서 항상 사용중인 LVM 이 있을경우 volume_list 에 추가 합니다.\nhalvm resource 를 설정 하면 안됩니다.\n  ha-node01 , ha-node02 에서 작업  [root@ha-node01 ~]# vi /etc/lvm/lvm.conf\r# Example\r# volume_list = [ \u0026quot;vg1\u0026quot;, \u0026quot;vg2/lvol1\u0026quot;, \u0026quot;@tag1\u0026quot;, \u0026quot;@*\u0026quot; ]\rvolume_list = [\u0026quot;VGOS\u0026quot;]\r만약 설정할 내용이 없을 경우 아래와 같이 설정 합니다. volume_list = []\rResource 를 추가 합니다. ha-node01 에서 작업 [root@ha-node01 ~]# pcs resource create halvm LVM volgrpname=vg00 exclusive=true --group test-svc\rinitd 를 재갱신 합니다. (주의!!: lvm os 구성후 lvm.conf 에 Volum_list 추가 없이 Dracut 명령어를 실행할 경우 정상적으로 os 가 부팅 되지 않습니다. Rescue mode 에서 lvm.conf 설정변경후 Dracut 으로 initrd 를 갱신해야 합니다.)\r[root@ha-node01 ~]# dracut -H -f /boot/initramfs-$(uname -r).img $(uname -r)\r[root@ha-node02 ~]# dracut -H -f /boot/initramfs-$(uname -r).img $(uname -r)\rsystem을 재시작 합니다. ha-node01 부터 [root@ha-node01 ~]# init 6\r[root@ha-node02 ~]# init 6\rresource 를 cleanup 합니다. [root@ha-node02 ~]# pcs resource cleanup --all\rCleaned up all resources on all nodes\rWaiting for 3 replies from the CRMd... OK\rcluster 정보를 확인 합니다. [root@ha-node02 ~]# pcs status\rCluster name: ha-scv\rWARNINGS:\rFollowing stonith devices have the 'action' option set, it is recommended to set 'pcmk_off_action', 'pcmk_reboot_action' instead: fence_node01, fence_node02\rStack: corosync\rCurrent DC: ha-node01 (version 1.1.19-8.el7-c3c624ea3d) - partition with quorum\rLast updated: Sat May 18 00:49:54 2019\rLast change: Sat May 18 00:49:49 2019 by hacluster via crmd on ha-node02\r2 nodes configured\r6 resources configured\rOnline: [ ha-node01 ha-node02 ]\rFull list of resources:\rfence_node01 (stonith:fence_vmware_soap): Starting ha-node01\rfence_node02 (stonith:fence_vmware_soap): Started ha-node02\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node01\rhalvm (ocf::heartbeat:LVM): Started ha-node01\rClone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node01 ha-node02 ]\rDaemon Status:\rcorosync: active/enabled\rpacemaker: active/enabled\rpcsd: active/enabled\r[root@ha-node02 ~]#  halvm resource 가 정상적으로 기동이 안되는 경우  [root@ha-node01 ~]# pcs status\rCluster name: ha-scv\rWARNINGS:\rFollowing stonith devices have the 'action' option set, it is recommended to set 'pcmk_off_action', 'pcmk_reboot_action' instead: fence_node01, fence_node02\rStack: corosync\rCurrent DC: ha-node02 (version 1.1.19-8.el7-c3c624ea3d) - partition with quorum\rLast updated: Tue May 21 18:52:57 2019\rLast change: Tue May 21 18:47:04 2019 by root via cibadmin on ha-node01\r2 nodes configured\r6 resources configured\rOnline: [ ha-node01 ha-node02 ]\rFull list of resources:\rfence_node01 (stonith:fence_vmware_soap): Starting ha-node01\rfence_node02 (stonith:fence_vmware_soap): Starting ha-node01\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node02\rhalvm (ocf::heartbeat:LVM): Stopped \u0026lt;--- halvm resource 가 Stop 상태 입니다. Clone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node01 ]\rStopped: [ ha-node02 ]\rFailed Actions:\r* halvm_monitor_0 on ha-node02 'unknown error' (1): call=30, status=complete, ex itreason='WARNING: vg00 is active without the cluster tag, \u0026quot;pacemaker\u0026quot;',\rlast-rc-change='Tue May 21 18:47:05 2019', queued=1ms, exec=291ms\rDaemon Status:\rcorosync: active/enabled\rpacemaker: active/enabled\rpcsd: active/enabled\r[root@ha-node01 ~]#\r[root@ha-node01 ~]# vgchange -ay /dev/vg00\r0 logical volume(s) in volume group \u0026quot;vg00\u0026quot; now active\r[root@ha-node01 ~]# pcs resource cleanup --all\rCleaned up all resources on all nodes\rWaiting for 2 replies from the CRMd.. OK\r[root@ha-node01 ~]# pcs status\rCluster name: ha-scv\rWARNINGS:\rFollowing stonith devices have the 'action' option set, it is recommended to set 'pcmk_off_action', 'pcmk_reboot_action' instead: fence_node01, fence_node02\rStack: corosync\rCurrent DC: ha-node01 (version 1.1.19-8.el7-c3c624ea3d) - partition with quorum\rLast updated: Tue May 21 18:53:43 2019\rLast change: Tue May 21 18:53:38 2019 by hacluster via crmd on ha-node01\r2 nodes configured\r6 resources configured\rOnline: [ ha-node01 ]\rOFFLINE: [ ha-node02 ]\rFull list of resources:\rfence_node01 (stonith:fence_vmware_soap): Starting ha-node01\rfence_node02 (stonith:fence_vmware_soap): Starting ha-node01\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node01\rhalvm (ocf::heartbeat:LVM): Started ha-node01\rClone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node01 ]\rStopped: [ ha-node02 ]\rDaemon Status:\rcorosync: active/enabled\rpacemaker: active/enabled\rpcsd: active/enabled\r[root@ha-node01 ~]#\r HA-LVM 을 Mount 하기 위하여 xfs 파일시스템 으로 포멧합니다.\nxfs 파일시스템 포멧시 test-svc Resource 를 가지고 있는 node 에서 작업 해야 합니다.\n [root@ha-node01 ~]# pcs status\rCluster name: ha-scv\rWARNINGS:\rFollowing stonith devices have the 'action' option set, it is recommended to set 'pcmk_off_action', 'pcmk_reboot_action' instead: fence_node01, fence_node02\rStack: corosync\rCurrent DC: ha-node01 (version 1.1.19-8.el7-c3c624ea3d) - partition with quorum\rLast updated: Sat May 18 00:52:10 2019\rLast change: Sat May 18 00:49:49 2019 by hacluster via crmd on ha-node02\r2 nodes configured\r6 resources configured\rOnline: [ ha-node01 ha-node02 ]\rFull list of resources:\rfence_node01 (stonith:fence_vmware_soap): Started ha-node01\rfence_node02 (stonith:fence_vmware_soap): Started ha-node02\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node01\rhalvm (ocf::heartbeat:LVM): Started ha-node01 \u0026lt;--- ha-node01 에서 halvm Resource 를 가지고 있습니다. Clone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node01 ha-node02 ]\rDaemon Status:\rcorosync: active/enabled\rpacemaker: active/enabled\rpcsd: active/enabled\r[root@ha-node01 ~]#\r ha-node02 에서 xfs 파일시스템으로 포멧을 합니다.\n [root@ha-node01 ~]# mkfs.xfs /dev/mapper/vg00-halvm -f\rmeta-data=/dev/mapper/vg00-halvm isize=512 agcount=4, agsize=190464 blks\r= sectsz=512 attr=2, projid32bit=1\r= crc=1 finobt=0, sparse=0\rdata = bsize=4096 blocks=761856, imaxpct=25\r= sunit=0 swidth=0 blks\rnaming =version 2 bsize=4096 ascii-ci=0 ftype=1\rlog =internal log bsize=4096 blocks=2560, version=2\r= sectsz=512 sunit=0 blks, lazy-count=1\rrealtime =none extsz=4096 blocks=0, rtextents=0\r[root@ha-node01 ~]#\rMount 디렉토리 생성 ha-node01 , ha-node02 에서 작업 합니다. [root@ha-node01 ~]# mkdir /test\r[root@ha-node02 ~]# mkdir /test\r xfs 파일시스템 리소스를 추가 합니다. (ha-node01 에서만 작업 합니다.)\n [root@ha-node01 ~]# pcs resource create testlv_FS Filesystem device=\u0026quot;/dev/mapper/vg00-halvm\u0026quot; directory=\u0026quot;/test\u0026quot; fstype=\u0026quot;xfs\u0026quot; force_unmount=true --group test-svc\rCluster 확인 [root@ha-node01 ~]# pcs status\rCluster name: ha-scv\rWARNINGS:\rFollowing stonith devices have the 'action' option set, it is recommended to set 'pcmk_off_action', 'pcmk_reboot_action' instead: fence_node01, fence_node02\rStack: corosync\rCurrent DC: ha-node01 (version 1.1.19-8.el7-c3c624ea3d) - partition with quorum\rLast updated: Sat May 18 00:55:17 2019\rLast change: Sat May 18 00:55:08 2019 by root via cibadmin on ha-node01\r2 nodes configured\r7 resources configured\rOnline: [ ha-node01 ha-node02 ]\rFull list of resources:\rfence_node01 (stonith:fence_vmware_soap): Started ha-node01\rfence_node02 (stonith:fence_vmware_soap): Started ha-node02\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node01\rhalvm (ocf::heartbeat:LVM): Started ha-node01\rtestlv_FS (ocf::heartbeat:Filesystem): Started ha-node01\rClone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node01 ha-node02 ]\rDaemon Status:\rcorosync: active/enabled\rpacemaker: active/enabled\rpcsd: active/enabled\r[root@ha-node01 ~]#\r mount 확인\n [root@ha-node01 ~]# df -h\rFilesystem Size Used Avail Use% Mounted on\r/dev/sda3 14G 1.4G 13G 10% /\rdevtmpfs 990M 0 990M 0% /dev\rtmpfs 1000M 54M 946M 6% /dev/shm\rtmpfs 1000M 8.9M 991M 1% /run\rtmpfs 1000M 0 1000M 0% /sys/fs/cgroup\r/dev/sda1 1014M 137M 878M 14% /boot\rtmpfs 200M 0 200M 0% /run/user/0\r/dev/mapper/vg00-halvm 2.9G 33M 2.9G 2% /test \u0026lt;--- /test 디렉토리에 정상적으로 Mount 되었습니다. [root@ha-node01 ~]#\rha-node01 에서 ha-node02 로 서비스 구룹을 이관 합니다. [root@ha-node01 ~]# pcs resource move test-svc ha-node02\r[root@ha-node02 ~]# pcs status\rCluster name: ha-scv\rWARNINGS:\rFollowing stonith devices have the 'action' option set, it is recommended to set 'pcmk_off_action', 'pcmk_reboot_action' instead: fence_node01, fence_node02\rStack: corosync\rCurrent DC: ha-node01 (version 1.1.19-8.el7-c3c624ea3d) - partition with quorum\rLast updated: Sat May 18 00:58:06 2019\rLast change: Sat May 18 00:58:03 2019 by hacluster via crmd on ha-node01\r2 nodes configured\r7 resources configured\rOnline: [ ha-node01 ha-node02 ]\rFull list of resources:\rfence_node01 (stonith:fence_vmware_soap): Started ha-node02\rfence_node02 (stonith:fence_vmware_soap): Started ha-node02\rResource Group: test-svc \u0026lt;-- 서비스 구룹 VIP (ocf::heartbeat:IPaddr2): Started ha-node02 \u0026lt;-- ha-node02 에서 정상적으로 실행 중입니다. halvm (ocf::heartbeat:LVM): Started ha-node02 \u0026lt;-- ha-node02 에서 정상적으로 실행 중입니다. testlv_FS (ocf::heartbeat:Filesystem): Started ha-node02 \u0026lt;-- ha-node02 에서 정상적으로 실행 중입니다. Clone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node01 ha-node02 ]\rDaemon Status:\rcorosync: active/enabled\rpacemaker: active/enabled\rpcsd: active/enabled\r[root@ha-node02 ~]#\r[root@ha-node02 ~]# df -h\rFilesystem Size Used Avail Use% Mounted on\r/dev/sda3 14G 1.3G 13G 9% /\rdevtmpfs 990M 0 990M 0% /dev\rtmpfs 1000M 39M 962M 4% /dev/shm\rtmpfs 1000M 8.9M 991M 1% /run\rtmpfs 1000M 0 1000M 0% /sys/fs/cgroup\r/dev/sda1 1014M 137M 878M 14% /boot\rtmpfs 200M 0 200M 0% /run/user/0\r/dev/mapper/vg00-halvm 2.9G 33M 2.9G 2% /test \u0026lt;-- /test 디렉토리가 Mount 되었습니다. [root@ha-node02 ~]#\rHALVM 구성  ha-node01 , ha-node02 에서 작업 합니다.\nResilient Storage package group 을 설치 합니다.\niscsi 에 login 합니다.\n [root@ha-node01 ~]# yum groupinstall 'Resilient Storage' -y [root@ha-node01 ~]# yum install iscsi-init* -y\r[root@ha-node01 ~]# iscsiadm --mode discoverydb --type sendtargets --portal ha-storage --discover\r10.10.10.37:3260,1 iqn.2019-05.com.hacluster:target1\r\u0026gt; iscsi server 에 로그인 합니다. [root@ha-node01 ~]# iscsiadm --mode node --targetname iqn.2019-05.com.hacluster:target1 --portal ha-storage --login\r확인 [root@ha-node01 ~]# lsblk\rNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT\rfd0 2:0 1 4K 0 disk\rsda 8:0 0 16G 0 disk\r├─sda1 8:1 0 1G 0 part /boot\r├─sda2 8:2 0 1G 0 part [SWAP]\r└─sda3 8:3 0 14G 0 part /\rsdb 8:16 0 1G 0 disk\rsdc 8:32 0 1G 0 disk\rsdd 8:48 0 1G 0 disk\r[root@ha-node01 ~]#  fdisk 작업   ha-node01 에서 작업\n/dev/sdd /dev/sdc /dev/sdd\n [root@ha-node01 ~]# fdisk /dev/sdb\rWelcome to fdisk (util-linux 2.23.2).\rChanges will remain in memory only, until you decide to write them.\rBe careful before using the write command.\rDevice does not contain a recognized partition table\rBuilding a new DOS disklabel with disk identifier 0x6a013082.\rCommand (m for help): p\rDisk /dev/sdb: 1073 MB, 1073741824 bytes, 2097152 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 33550336 bytes\rDisk label type: dos\rDisk identifier: 0x6a013082\rDevice Boot Start End Blocks Id System\rCommand (m for help): n\rPartition type:\rp primary (0 primary, 0 extended, 4 free)\re extended\rSelect (default p): p\rPartition number (1-4, default 1): 1\rFirst sector (65528-2097151, default 65528):\rUsing default value 65528\rLast sector, +sectors or +size{K,M,G} (65528-2097151, default 2097151):\rUsing default value 2097151\rPartition 1 of type Linux and of size 992 MiB is set\rCommand (m for help): t\rSelected partition 1\rHex code (type L to list all codes): 8e\rChanged type of partition 'Linux' to 'Linux LVM'\rCommand (m for help): wq\rThe partition table has been altered!\rCalling ioctl() to re-read partition table.\rSyncing disks.\r[root@ha-node01 ~]#\r~ 생략 - lvm 작업 \u0026gt; lvm 생성은 ha-node01에서만 작업 합니다. \u0026gt; lvmconf 부분만 ha-node01 , ha-node02 에서 작업 합니다. [root@ha-node01 ~]# lvmconf --enable-cluster\r[root@ha-node01 ~]# grep 'locking_type =' /etc/lvm/lvm.conf \u0026lt;--- ha-node01 , ha-node02 에서 작업\rlocking_type = 3\r[root@ha-node01 ~]# pvcreate /dev/sdb1 /dev/sdc1 /dev/sdd1\r[root@ha-node01 ~]# vgcreate -Ay -cy vg00 /dev/sdb1 /dev/sdc1 /dev/sdd1\r[root@ha-node01 ~]# vi /etc/lvm/lvm.conf\rlocking_type = 0\r[root@ha-node01 ~]# mkfs.xfs /dev/mapper/vg00-halvm -f\rmeta-data=/dev/mapper/vg00-halvm isize=512 agcount=4, agsize=184320 blks\r= sectsz=512 attr=2, projid32bit=1\r= crc=1 finobt=0, sparse=0\rdata = bsize=4096 blocks=737280, imaxpct=25\r= sunit=0 swidth=0 blks\rnaming =version 2 bsize=4096 ascii-ci=0 ftype=1\rlog =internal log bsize=4096 blocks=2560, version=2\r= sectsz=512 sunit=0 blks, lazy-count=1\rrealtime =none extsz=4096 blocks=0, rtextents=0\r[root@ha-node01 ~]#\rroot@ha-node01 ~]# vi /etc/lvm/lvm.conf\rlocking_type = 3\r CLVM 작업   ha-node2 에서 작업\n [root@ha-node01 ~]# pcs resource create dlm ocf:pacemaker:controld op monitor interval=30s on-fail=fence clone interleave=true ordered=true\r[root@ha-node01 ~]# pcs resource create clvmd ocf:heartbeat:clvm op monitor interval=30s on-fail=fence clone interleave=true ordered=true\r[root@ha-node01 ~]# pcs constraint order start dlm-clone then clvmd-clone\r[root@ha-node01 ~]# pcs constraint colocation add clvmd-clone with dlm-clone\r[root@ha-node01 ~]# pcs resource create halvm LVM volgrpname=vg00 exclusive=true --group test-svc\r[root@ha-node01 ~]# mkdir /test\r[root@ha-node02 ~]# mkdir /test \u0026lt;--- ha-node02 에서 작업 합니다.\r[root@ha-node01 ~]# pcs resource create test-xfs Filesystem device=/dev/mapper/vg00-halvm directory=/test fstype=xfs force_unmount=true --group test-svc\r ha-node01 , ha-node02 에서 작업\n [root@ha-node01 ~]# systemctl stop lvm2-lvmetad.socket\r[root@ha-node01 ~]# systemctl stop lvm2-lvmetad.service\r[root@ha-node01 ~]# systemctl disable lvm2-lvmetad.socket\r[root@ha-node01 ~]# systemctl disable lvm2-lvmetad.service\r[root@ha-node01 ~]# dracut -H -f /boot/initramfs-$(uname -r).img $(uname -r)\r[root@ha-node01 ~]# init 6  ha-node01 에서 resource 확인을 진행 합니다.\n노드 리부팅후 cleanup 후 정상적으로 cluster 구동이 안될경우 ha-node01 , ha-node02 에서\nlvmconf \u0026ndash;enable-cluster 실행후 pcs resource cleanup \u0026ndash;all 을 합니다.\n [root@ha-node01 ~]# pcs resource cleanup --all [root@ha-node01 ~]# pcs status\rCluster name: ha-scv\rWARNINGS:\rFollowing stonith devices have the 'action' option set, it is recommended to set 'pcmk_off_action', 'pcmk_reboot_action' instead: fence_node01, fence_node02\rStack: corosync\rCurrent DC: ha-node01 (version 1.1.19-8.el7-c3c624ea3d) - partition with quorum\rLast updated: Tue May 21 23:15:55 2019\rLast change: Tue May 21 23:15:50 2019 by hacluster via crmd on ha-node01\r2 nodes configured\r11 resources configured\rOnline: [ ha-node01 ha-node02 ]\rFull list of resources:\rfence_node01 (stonith:fence_vmware_soap): Starting ha-node01\rfence_node02 (stonith:fence_vmware_soap): Starting ha-node02\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node01\rhalvm (ocf::heartbeat:LVM): Started ha-node01\rtest-xfs (ocf::heartbeat:Filesystem): Started ha-node01\rClone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node01 ha-node02 ]\rClone Set: dlm-clone [dlm]\rStarted: [ ha-node01 ha-node02 ]\rClone Set: clvmd-clone [clvmd]\rStarted: [ ha-node01 ha-node02 ]\rDaemon Status:\rcorosync: active/enabled\rpacemaker: active/enabled\rpcsd: active/enabled\r[root@ha-node01 ~]#\r[root@ha-node01 ~]# df -h\rFilesystem Size Used Avail Use% Mounted on\r/dev/sda3 14G 1.3G 13G 9% /\rdevtmpfs 990M 0 990M 0% /dev\rtmpfs 1000M 73M 928M 8% /dev/shm\rtmpfs 1000M 8.9M 991M 1% /run\rtmpfs 1000M 0 1000M 0% /sys/fs/cgroup\r/dev/sda1 1014M 137M 878M 14% /boot\rtmpfs 200M 0 200M 0% /run/user/0\r/dev/mapper/vg00-halvm 2.9G 33M 2.8G 2% /test\r[root@ha-node01 ~]#\r 서비스 이관 테스트\n [root@ha-node02 ~]# pcs status\rCluster name: ha-scv\rWARNINGS:\rFollowing stonith devices have the 'action' option set, it is recommended to set 'pcmk_off_action', 'pcmk_reboot_action' instead: fence_node01, fence_node02\rStack: corosync\rCurrent DC: ha-node01 (version 1.1.19-8.el7-c3c624ea3d) - partition with quorum\rLast updated: Tue May 21 23:18:41 2019\rLast change: Tue May 21 23:18:26 2019 by hacluster via crmd on ha-node01\r2 nodes configured\r11 resources configured\rOnline: [ ha-node01 ha-node02 ]\rFull list of resources:\rfence_node01 (stonith:fence_vmware_soap): Starting ha-node01\rfence_node02 (stonith:fence_vmware_soap): Starting ha-node02\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node02\rhalvm (ocf::heartbeat:LVM): Started ha-node02\rtest-xfs (ocf::heartbeat:Filesystem): Started ha-node02\rClone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node01 ha-node02 ]\rClone Set: dlm-clone [dlm]\rStarted: [ ha-node01 ha-node02 ]\rClone Set: clvmd-clone [clvmd]\rStarted: [ ha-node01 ha-node02 ]\rDaemon Status:\rcorosync: active/enabled\rpacemaker: active/enabled\rdf pcsd: active/enabled\r-h\r[root@ha-node02 ~]# df -h\rFilesystem Size Used Avail Use% Mounted on\r/dev/sda3 14G 1.3G 13G 9% /\rdevtmpfs 990M 0 990M 0% /dev\rtmpfs 1000M 57M 944M 6% /dev/shm\rtmpfs 1000M 8.9M 991M 1% /run\rtmpfs 1000M 0 1000M 0% /sys/fs/cgroup\r/dev/sda1 1014M 137M 878M 14% /boot\rtmpfs 200M 0 200M 0% /run/user/0\r/dev/mapper/vg00-halvm 2.9G 33M 2.8G 2% /test\r[root@ha-node02 ~]#\rhttpd Resource 추가  ha-node01 , ha-node02 에서 작업\nhttpd 패키지를 설치 합니다.\nhttpd.conf 파일을 설정 합니다.\n [root@ha-node01 ~]# yum install -y httpd wget\r[root@ha-node01 ~]# systemctl status httpd\r● httpd.service - The Apache HTTP Server\rLoaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)\rActive: inactive (dead)\rDocs: man:httpd(8)\rman:apachectl(8)\r[root@ha-node01 ~]#\r[root@ha-node01 ~]# vi /etc/httpd/conf/httpd.conf\r#DocumentRoot \u0026quot;/var/www/html\u0026quot;\r#\u0026lt;Directory \u0026quot;/var/www/html\u0026quot;\u0026gt;\rDocumentRoot \u0026quot;/test\u0026quot;\r\u0026lt;Directory \u0026quot;/test\u0026quot;\u0026gt;\rIncludeOptional conf.d/*.conf\r\u0026lt;Location /server-status\u0026gt;\rSetHandler server-status\rOrder deny,allow\rDeny from all\rAllow from 127.0.0.1\r\u0026lt;/Location\u0026gt;\r httpd resource 추가  [root@ha-node01 ~]# pcs resource create web-service ocf:heartbeat:apache configfile=\u0026quot;/etc/httpd/conf/httpd.conf\u0026quot; \\\rstatusurl=\u0026quot;http://127.0.0.1/server-status\u0026quot; --group test-svc\r[root@ha-node02 ~]# pcs status\rCluster name: ha-scv\rWARNINGS:\rFollowing stonith devices have the 'action' option set, it is recommended to set 'pcmk_off_action', 'pcmk_reboot_action' instead: fence_node01, fence_node02\rStack: corosync\rCurrent DC: ha-node01 (version 1.1.19-8.el7-c3c624ea3d) - partition with quorum\rLast updated: Tue May 21 23:49:06 2019\rLast change: Tue May 21 23:49:03 2019 by hacluster via crmd on ha-node02\r2 nodes configured\r12 resources configured\rOnline: [ ha-node01 ha-node02 ]\rFull list of resources:\rfence_node01 (stonith:fence_vmware_soap): Stopped\rfence_node02 (stonith:fence_vmware_soap): Stopped\rResource Group: test-svc\rVIP (ocf::heartbeat:IPaddr2): Started ha-node01\rhalvm (ocf::heartbeat:LVM): Started ha-node01\rtest-xfs (ocf::heartbeat:Filesystem): Started ha-node01\rweb-service (ocf::heartbeat:apache): Starting ha-node01\rClone Set: svcnet-monitor-clone [svcnet-monitor]\rStarted: [ ha-node01 ha-node02 ]\rClone Set: dlm-clone [dlm]\rStarted: [ ha-node01 ha-node02 ]\rClone Set: clvmd-clone [clvmd]\rStarted: [ ha-node01 ha-node02 ]\rDaemon Status:\rcorosync: active/enabled\rpacemaker: active/enabled\rpcsd: active/enabled\r[root@ha-node02 ~]#\r httpd 디렉토리에 index.html 파일을 생성 합니다.  [root@ha-node02 ~]# vi /test/index.html\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;ha-test\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r"
},
{
	"uri": "https://bksanjuk.github.io/ubuntu/install/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": "Install 본 문서는 16.04 Version 문서 입니다.\n\r Ubuntu16.04 Server 설치\n설치환경: vm\nCpu 1core / Memory 1G / Hdd 20G\nDVD Image 로 부팅 하면 최초 설치 화면을 볼수 있습니다.\n  Ubuntu 16.04 booting 화면\n최초부팅시 설치 언어를 선택 할수 있습니다. 편의상 English 를 선택 합니다.\n  Install Ubuntu Server 를 선택 합니다.\n  System 에서 사용할 언어를 지정합니다.\nEnglish 로 설정 합니다.\n  Time Zone 설정\nother -\u0026gt; Asia -\u0026gt; Korea, Republic of 를 선택 합니다.\n  Time Zone 설정\n  Time Zone 설정\n  System locale 설정 United States - en_US.UTF-8 을 설정 합니다.\nko_KR.UTF-8 의 경우 차후 설정할수 있습니다.\n  Keyboard 설정 No 를 선택하여 Skip 합니다.\n  Configure the keyboard / English (US) 를 선택 합니다.\n  English (US) 를 선택 합니다.\n  설치가 진행 됩니다.\n  Hostname 을 설정 합니다.\n  사용할 user 를 생성 합니다.\n  user password 를 입력합니다.\n  user password 를 확인합니다.\n  Encrypt home directory 의 경우 No 를 선택합니다.\n  System 시간을 설정 합니다.\n  Time zone 이 Asia/Seoul 로 설정 되었는지 확인후 Yes 를 선택 합니다.\n  테스트용 vm 이기 때문에 LVM 으로 선택 합니다.\nManual 로 선택하면 파티션 사이즈를 수동으로 지정할수 있습니다.\n  Disk Size 확인및 선택을 합니다.\n  Continue 를 선택합니다.\n  Yes 를 선택 합니다.\n  System 설치가 진행 됩니다.\n  Continue 를 선택 합니다.\n  No automatic updates 를 선택 합니다.\nSystem pkg update 의 경우 차후 update 를 진행 합니다.\n  원격접속을 위하여 OpenSSH server 를 선택 합니다.\n  선택된 OpenSSH server install 이 진행 됩니다.\n  GRUB boot loader 를 설치 합니다.\n설치를 마무리 합니다.\n  Continue 를 선택\n  설치가 마무리 되면 리부팅이 진행 됩니다.\n "
},
{
	"uri": "https://bksanjuk.github.io/centos/kernel-version-info/",
	"title": "Kernel Version Info",
	"tags": [],
	"description": "",
	"content": "Kernel Version Info  REHL Kernel Version  wikipedia 에서 kernel version 정보를 확인 할수 있습니다. 단순참고 이며, Release date 가 상이 할수 있습니다.\n\r CentOS 7 kernel version     Release Release date Kernel Version     CentOS 7.0 (1406) 2014-07-07 3.10.0-123   CentOS 7.1 (1503) 2015-03-31 3.10.0-229   CentOS 7.2 (1511) 2015-12-14 3.10.0-327   CentOS 7.3 (1611) 2016-12-12 3.10.0-514   CentOS 7.4 (1708) 2017-09-13 3.10.0-693   CentOS 7.5 (1804) 2018-05-10 3.10.0-862   CentOS 7.6 (1810) 2018-12-03 3.10.0-957   CentOS 7.7 (1908) 2018-04-10 3.10.0-1062     CentOS 6 kernel version     Release Release date Kernel Version     CentOS 6.0 2011-07-10 2.6.32-71   CentOS 6.1 2011-12-09 2.6.32-131   CentOS 6.2 2011-12-20 2.6.32-220   CentOS 6.3 2012-07-09 2.6.32-279   CentOS 6.4 2013-03-09 2.6.32-358   CentOS 6.5 2013-12-01 2.6.32-431   CentOS 6.6 2014-10-28 2.6.32-504   CentOS 6.7 2015-08-07 2.6.32-573   CentOS 6.8 2016-05-25 2.6.32-642   CentOS 6.9 2017-04-25 2.6.32-696   CentOS 6.10 2018-07-03 2.6.32-754    "
},
{
	"uri": "https://bksanjuk.github.io/linux/",
	"title": "Linux",
	"tags": [],
	"description": "",
	"content": "History of Linux 리눅스는 핀란드 헬싱키 대학의 대학원생인 리누스 토발즈가 취미로 개발한 커널이었다.\n토발즈는 원래 앤드루 스튜어트 타넨바움 교수가 운영 체제 디자인을 가르치기 위해 만든 교육용 유닉스인 미닉스를 사용하고 있었는데,\n이 미닉스를 다른 사람이 함부로 개조하지 못하도록 제한을 두자, 미닉스의 기능에 만족하지 못했던 토발즈는 새로운 운영 체제를 개발하고자 했다.\n리눅스는 운영 체제 위에서 실행되는 터미널 에뮬레이터였다. 초기에는 시리얼 포트를 이용한 간단한 신호를 주고 받는 작업밖에 할 수 없었지만,\n토발즈는 디스크의 파일도 읽고, 쓰게하고 싶었다. 이처럼 완전한 파일 제어가 가능해지자, 토발즈는 이것을 포직스(POSIX)에 호환되는 운영 체제\n커널로 발전시키기로 마음먹고 이를 기반으로 리눅스를 개발하기 시작하였다.\n리눅스의 첫 번째 버전인 0.01은 1991년 9월 17일 뉴스 그룹을 통해 인터넷에 통해 공개되었고, 첫 공식버전인 0.02는 같은해 10월에 발표되었다.\n\r Linux distros (배포판 종류)\n이밖에도 수많은 리눅스 배포판이 있습니다.\n  What is kernel 컴퓨터의 핵심 운영체제 시스템의 모든것을 완벽하게 제어,통제 하는 프로그램중에 하나 입니다.\n소프트 웨어 입출력 , 중앙처리 장치 의 데잍터 처리 명령 변환 , 키보드 , 모니터 , 프린터 및 스피커 와 같은 주변 장치 및 메모리를 처리 합니다.\n커널은 응용 프로그램 소프트웨어 를 컴퓨터 하드웨어에 연결 합니다.\n커널의 핵심 코드는 별도의 메모리 영역에 로드되며, 이 영역은 응용 프로그램 이나 운영 체제 중용하지 않는 다른부분에 액세스 하는것으로 부터 보호 합니다.\n커널 공간에서 프로세스 실행, 하드 디스크와 같은 하드웨어 장치 관리 및 인터럽트 처리를 합니다.\n\r Shell   리눅스 쉘은 각 운영체제와 사용자가 대화하는 중간 창구 역할을 합니다.\nDOS의 command.com 및 윈도의 탐색기와 비슷합니다.\n리눅스에서 사용자와 운영체제가 통신하는 주요 수단입니다.\n유닉스 명령어 인터프리터로서 사용자가 입력한 명령을 해석하여 또 다른 프로그램을 수행하라는 명령으로 해석 한다.\n  Kernel 과 Shell   kernel 은 system 상에서 자원을 관리해주는 핵심동작을 합니다.\nshell은 사용자와 kernel 에서 상주해서 돌아가는 프로그램 관리 및 kernel 관리 혹은 시스템에 직접 사용자가 명령을 내릴수 있는 interface 역활을 해 주는 환경을 제공해 줍니다.\n기본적으로 bash shell 을 많이 사용하고 있지만 Unix 환경 에서는 csh 나 ksh 등도 많이 사용하고 있습니다.\n  본 쉘(sh)   리눅스를 사용하면서 일반적으로 가장 많이 사용된다고 볼수 있는 쉘은 개발자(Steven Borne:벨연구소)의 이름을 따라 명명된 본 쉘(Bourn Shell) 입니다.\n1979년에 개발되고 실행 파일이 /bin/sh 인 본 쉘의 최신판은 모든 리눅스 시스템에서 사용할수 있으며 본쉘 프로그램의 명령 이름은 sh 입니다.\n본쉘 보다 최근에 개발된 C 쉘이나 콘 쉘과 기능적인 면을 비교해 보면 본쉘에 미흡한 점이 있습니다.\n그중 가장큰 단점은 상호 대화형(interactive) 방식을 취하지 않고 있다는 점입니다. 이러한 상호 대화형 방식을 사용하고자 한다면 쉘을 바꿔서 작업하는것이 좋습니다.\n  C 쉘(csh)   C 쉘은 작업용 언어로 가장 많이 사용하는 언어인 C언어와 유사하고, 몇 가지 프로그램 개발에 편리한 기능도 내장하고 있어서 많이 보급이 되었습니다.\n현재 쓰이고 있는 리눅스 시스템에 C 쉘이 존재하고 본쉘을 사용중 C 쉘을 사용하고 싶을 때는 csh 명령으로 사용할수 있습니다.\n사용중인 쉘을 확인 하고 싶을 때는 ps 명령어를 통하여 확인 할수 있습니다.\n  콘 쉘(ksh)   콘 쉘(Korn Shell) 은 ksh 라는 약자로 불리기도 하며, 데이비드 콘(David Korn) 에 의하여 1983년에 개발된 유닉스 운영 체제의 명령어 해석기 프로그램이며 실행\n파일은 /bin/ksh 입니다. 콘쉘은 유닉스에서 제공되는 원래의 쉘과 호환성이 있으며, 사용하기 편리하고 기능이 탁원하기 때문에 널리 사용되고 있습니다.\n일반적으로 유닉스에서 가장 많이 사용되고 있는 쉘입니다. 또한, 명령행 편집기능을 제공 합니다.\n  배 시(bash)   배시 (Bash, Bourne-Agin Shell) 는 브라이언 폭스(Brain Fox) 외 몇몇 사랑에 의하여 1899년에 개발되었으며 실행 파일은 /bin/bash 입니다.\nsh 호환의 명령 언어 해석기로 표준 입력 또는 파일로 부터 읽어들인 명령을 실행하고 또한 콘쉘과 C 쉘(ksh,csh) 부터 유용한 기능을 도입하였습니다.\nIEEE POSIX 쉘과 도구 명세(IEEE Working Group 1003.2) 에 호환되도록 쉘을 구현하겠다는 목표를 가지고 있다.\n처음 로그인을 하였을때 디폴트로 주어지는 쉘이 배시이며, 또 여러 글자 옵션을 해석하며 이옵션을 인식시키려면 명령어행에서 단일 글자 옵션보다 앞에 적어야 한다.\n쉘의 경로 설정 파일 /etc/shells 파일을 열어보면 사용할수 있는 쉘들의 경로를 설정되어 있다.\n  Z 쉘(zsh)   Z 셸(Z shell, zsh)은 상호작용 로그인 셸이자 셸 스크립트를 위한 강력한 명령 줄 인터프리터로 사용할 수 있는 유닉스 셸이다.\nZsh는 bash, ksh, tcsh의 일부 기능을 포함하여 수많은 개선 사항이 갖추어진 확장형 본 셸입니다.\n "
},
{
	"uri": "https://bksanjuk.github.io/linux/linux-booting-process/",
	"title": "Linux Booting Process",
	"tags": [],
	"description": "",
	"content": "Linux Booting Process  Linux 부팅 과정  Linux 부팅 과정은 장애 처리에 있어 핵심적인 요소 입니다.\n부팅까지 완전히 끝났다고 하면 다른 부팅 과정을 빼고 다른 부분의 장애 포인트를 트러블 슈팅 하여 문제를 해결 할수 있습니다.\nCentOS7 에서는 기존에 사용되던 SysV init 스크립트를 systemd 로 대체 하였습니다.\n\r Linux Booting 시 수행되는 과정     단계 단계별 설명     1 단계 컴퓨터의 Bios 가 post 를 수행 합니다.   2 단계 Bios 가 부트 로더의 MBR 을 읽습니다.   3 단계 GRUB2 부트로더 에서 vmlinuz 커널 이미지를 로드 합니다.   4 단계 GRUB2 부트로더 에서 initramfs 이미지의 내용을 추출합니다.   5 단계 initramfs에서 드라이버 모듈을 로드 합니다.   6 단계 시스템의 첫번째 프로세스인 systemd를 시작 합니다.   7 단계 systemd 프로세스가 작업을 수행 합니다.       7단계 systemd 프로세스 작업 Detail     /etc/systemd 디렉토리에서 구성 파일을 읽습니다.   /etc/systemd/system/default.target에 의해 링크 된 파일을 읽습니다.   system target 으로 정의된 시스템 상태로 시스템으로 가져옵니다.   /etc/rc.local 을 실행 합니다.    1) POST ( Power on Self Test)\n Universal Extended Firmware Interface (UEFI) 또는 Basic Input Output System (BIOS) 시스템 펌웨어에서 POST (Power-On Self-Test)가 실행되고 하드웨어를 시작하는 데 필요한 하드웨어 시스템이 초기화됩니다.\n 2) MBR Bootable\n MBR (마스터 부트 레코드)은 BIOS에서 메모리로 읽는 부팅 드라이브의 처음 512 바이트입니다. 다음 64 바이트는 디스크의 파티션 테이블을 포함합니다. 마지막 두 바이트는 오류 탐지에 사용되는 \u0026ldquo;매직 번호\u0026quot;입니다. MBR은 부팅 가능한 장치를 발견하고 GRUB2 부트 로더를 메모리에로드하고 그에 대한 제어를 전달합니다.  GRUB2 3) GRUB2 Boot Loader\n RHEL 7에서 사용되는 기본 부트 로더 프로그램은 GRUB 2입니다. GRUB는 GRand Unified Bootloader의 약자입니다. GRUB 2는 레거시 GRUB라고도 불리는 이전 GRUB 부트 로더를 대체합니다. GRUB 2 구성 파일은 /boot/grub2/grub.cfg에 있습니다 (이 파일을 직접 편집하지 마십시오).  ### BEGIN /etc/grub.d/10_linux ###\rmenuentry \u0026#39;CentOS Linux (3.10.0-862.11.6.el7.x86_64) 7 (Core)\u0026#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option \u0026#39;gnulinux-3.10.0-862.11.6.el7.x86_64-advanced-96e4bd20-d719-4d7b-a495-12c4867847c4\u0026#39; {\rload_video\rset gfxpayload=keep\rinsmod gzio\rinsmod part_msdos\rinsmod xfs\rset root=\u0026#39;hd0,msdos1\u0026#39;\rif [ x$feature_platform_search_hint = xy ]; then\rsearch --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1 --hint=\u0026#39;hd0,msdos1\u0026#39; 4cae8e08-00be-4af6-acb8-49388e4c102d\relse\rsearch --no-floppy --fs-uuid --set=root 4cae8e08-00be-4af6-acb8-49388e4c102d\rfi\rlinux16 /vmlinuz-3.10.0-862.11.6.el7.x86_64 root=UUID=96e4bd20-d719-4d7b-a495-12c4867847c4 ro crashkernel=auto rhgb quiet\rinitrd16 /initramfs-3.10.0-862.11.6.el7.x86_64.img\r}\r GRUB2 메뉴 구성 설정은 grub.cfg를 생성 할 때 /etc/default/grub 에서 가져옵니다.  [root@centos7 ~]# cat /etc/default/grub\rGRUB_TIMEOUT=5\rGRUB_DISTRIBUTOR=\u0026#34;$(sed \u0026#39;s, release .*$,,g\u0026#39; /etc/system-release)\u0026#34;\rGRUB_DEFAULT=saved\rGRUB_DISABLE_SUBMENU=true\rGRUB_TERMINAL_OUTPUT=\u0026#34;console\u0026#34;\rGRUB_CMDLINE_LINUX=\u0026#34;crashkernel=auto rhgb quiet\u0026#34;\rGRUB_DISABLE_RECOVERY=\u0026#34;true\u0026#34;\r[root@centos7 ~]#\r /etc/default/grub 파일 수정시 grub2-mkconfig 명령이 실행 되어야 합니다.  [root@centos7 ~]# grub2-mkconfig -o /boot/grub2/grub.cfg\r  GRUB2는 / boot 디렉토리의 vmlinuz라고도하는 압축 된 커널 이미지 파일을 검색합니다. GRUB2는 vmlinuz 커널 이미지 파일을 메모리에로드하고 initramfs 이미지 파일의 내용을 임시 메모리 기반 파일 시스템 (tmpfs)으로 추출합니다. 초기 RAM 디스크 (initrd)는 실제 루트 파일 시스템보다 먼저 마운트되는 초기 루트 파일 시스템입니다.    initramfs    초기 RAM 파일 시스템의 작업은 IDE, SCSI 또는 RAID와 같은 블록 장치 모듈을 사전로드하여 해당 모듈이 정상적으로 상주하는 루트 파일 시스템에 액세스하고 마운트 할수 있도록합니다. initramfs는 커널에 바인딩되며 커널은이 initramfs를 2 단계 부팅 프로세스의 일부로 마운트합니다. dracut 유틸리티는 새로운 커널이 설치 될 때마다 initramfs를 생성합니다. lsinitrd 명령을 사용하여 dracut에 의해 작성된 이미지의 내용을보십시오.   [root@centos7 ~]# lsinitrd |less\r4) Kernel 로드\n 커널은 프로세스 ID가 1 인 systemd 프로세스를 시작합니다.\n [root@centos7 ~]# ps -ef |grep systemd\rroot 1 0 0 14:20 ? 00:00:03 /usr/lib/systemd/systemd --switched-root --system --deserialize 22\r  initrd 이미지에서 필요한 드라이버 모듈을로드합니다. initramfs는 부팅에 필요한 모든 하드웨어의 커널 모듈과 부팅의 다음 단계로 진행하는 데 필요한 초기 스크립트를 포함합니다.   systemd 5) Systemd 시작\n PID 가 1인 systemd 프로세스가 커널에 의해 시작 합니다.\n [root@centos7 ~]# ps -ef |grep systemd\rroot 1 0 0 14:20 ? 00:00:03 /usr/lib/systemd/systemd --switched-root --system --deserialize 22\r  systemd는 시스템 부팅 후 시작되는 첫번째 프로세스이며 시스템이 종료 될때 까지 실행되는 최종 프로세스입니다. 부팅의 최종 단계를 제어하고 시스템을 사용할 준비를합니다. 또한 서비스를 동시에로드하여 부팅 속도를 높입니다. systemd 는 /etc/systemd/system/default.target 에 링크된 파일을 읽습니다.    Run Level     Run Level Target Units 설명     0 runlevel0.target, poweroff.target 종료 및 전원off   1 runlevel1.target, rescue.target Rescue shell   2,3,4 runlevel[234].target, multi- user.target 그래픽을 사용하지 않는 multi-user shell   5 runlevel5.target, graphical.target 그래픽을 사용하는 multi-user shell   6 runlevel6.target, reboot.target system rebooting       Systemd 에 의해 실행되는 시스템 초기화 작업     호스트 이름 설정   네트워크 초기화   설정에 따라 SELinux 초기화하기   환영 배너 출력   커널 부팅 인수를 기반으로 시스템 하드웨어 초기화   /proc 파일 시스템과 같은 가상 파일 시스템을 포함하여 파일 시스템 마운트   /var에있는 디렉토리 정리하기   스와핑 시작하기     System target 확인  [root@centos7 ~]# systemctl get-default\rmulti-user.target\r Run Level 로 확인  [root@centos7 ~]# runlevel\rN 3\r default.target Link 확인  [root@centos7 ~]# ls -al /etc/systemd/system/default.target\rlrwxrwxrwx. 1 root root 37 Sep 29 06:02 /etc/systemd/system/default.target -\u0026gt; /lib/systemd/system/multi-user.target\r booting시 장애 증상별 체크 포인트  부팅장애시 확인 할수 있는 체크 포인트 입니다.\n\r   부팅 단계 설명     POST H/W구성   부팅 장치선택 BIOS/UEFI 설정 또는 H/W 부팅메뉴   boot loader 로드 grub2-install and /etc/defaults/grub 파일   kernel 로드 GRUB 설정 및 /etc/dracut.conf   /sbin/init 실행 initramfs 재생성   initrd.target initramfs 재생성   Filesystem mount , Mainternance mode /etc/fstab 확인   default target 실행 /etc/systemd/system/default.target    "
},
{
	"uri": "https://bksanjuk.github.io/docker/remove-all-containers/",
	"title": "Remove All Containers",
	"tags": [],
	"description": "",
	"content": "Remove all Containers 명령어 입력시 주의가 필요합니다.\n모든 컨테이너 및 모든 이미지 자료가 삭제 됩니다.\n\r 실행중인 모든 컨테이너 삭제  test@ubuntu:~/Workspace$ docker rm -f `docker ps -a -q`\r 모든 이미지 일괄 삭제  test@ubuntu:~/Workspace$ docker rmi -f `docker images`\r docker-compose 이미지 삭제  test@ubuntu:~/Workspace$ docker-compose down --rmi all\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/",
	"title": "Centos",
	"tags": [],
	"description": "",
	"content": "What is CentOS  CentOS (Community Enterprise Operationg System) , Red Hat Enterprise Linux (RHEL)과 기능적으로 호환되는 무료 엔터프라이즈급 커뮤니티 기반 컴퓨팅 플랫폼을 제공하는 리눅스 입니다.   CentOS7 Image 는 아래 링크에서 다운 받을수 있습니다.  한국에서 사용하기에는 kakao ftp 또는 jaist ftp 가 가장 빠릅니다.\nfreebsd / ubuntu 의 경우도 kakao ftp 나 jaist ftp 에서 다운로드 하실수 있습니다.\n\r   이름 링크     CentOS Official Mirror list Centos Official Mirror list   CentOS7 Official image CentOS7 Official image   Daum Kakao ftp Daum kakao   Jaist ftp Jaist ftp    "
},
{
	"uri": "https://bksanjuk.github.io/docker/docker-tutorial/",
	"title": "Docker Tutorial",
	"tags": [],
	"description": "",
	"content": "Docker Tutorial  Docker Version 확인\n test@docker-test:~$ docker version\rClient:\rVersion: 18.05.0-ce\rAPI version: 1.37\rGo version: go1.9.5\rGit commit: f150324\rBuilt: Wed May 9 22:16:25 2018\rOS/Arch: linux/amd64\rExperimental: false\rOrchestrator: swarm\rServer:\rEngine:\rVersion: 18.05.0-ce\rAPI version: 1.37 (minimum version 1.12)\rGo version: go1.9.5\rGit commit: f150324\rBuilt: Wed May 9 22:14:32 2018\rOS/Arch: linux/amd64\rExperimental: false\rtest@docker-test:~$\r Docker 실행 옵션\ndocker run 에서 사용할수 있는 옵션을 다음과 같습니다.\n docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...] 옵션 설명 -d : detached mode 흔히 말하는 백그라운드 모드 -p : 호스트와 컨테이너의 포트를 연결 (포워딩) -v : 호스트와 컨테이너의 디렉토리를 연결 (마운트) -e : 컨테이너 내에서 사용할 환경변수 설정 -name : 컨테이너 이름 설정 -rm : 프로세스 종료시 컨테이너 자동제거 -it : -i 와 -t 를 동시에 사용한것으로 터미널 입력을 위한 옵션 -link : 컨테이너 연결 [컨테이너명:별칭]  ubuntu 16.04 컨테이너 생성\ndocker run 으로 ubuntu:16.04 를 실행 하여도 별도의 옵션이 없으면\nubuntu:16.04 image 만 다운로드 받습니다.실행을 하기 위해서는 옵션을 지정해야 합니다.\n test@docker-test:~$ docker run ubuntu:16.04\rUnable to find image \u0026#39;ubuntu:16.04\u0026#39; locally\r16.04: Pulling from library/ubuntu\r3b37166ec614: Pull complete\r504facff238f: Pull complete\rebbcacd28e10: Pull complete\rc7fb3351ecad: Pull complete\r2e3debadcbf7: Pull complete\rDigest: sha256:45ddfa61744947b0b8f7f20b8de70cbcdd441a6a0532f791fd4c09f5e491a8eb\rStatus: Downloaded newer image for ubuntu:16.04\rtest@docker-test:~$\r docker ps\n컨테이너가 실행중인지 확인을 할수 있습니다.\nps -a 옵션 사용시 정지된 컨테이너 까지 확인 합니다.\n test@docker-test:~$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rtest@docker-test:~$\r docker 실행\ndocker 실행시 -it 옵션을 사용 \u0026ndash;rm 을 사용 합니다.\n/bin/bash 를 커맨드 라인 마지막에 추가 합니다.\n-it /bin/bash 사용시 컨테이너 내부로 접속 할수 있습니다.\nexit 하여 docker ps 로 확인시 컨테이너 실행이 정지된것을 확인 할수 있습니다.\n간단하게 테스트 할경우 docker run 을 이용하여 컨테이너 구동을 하지만 일반적으로는\nDockerfile 을 만들어 컨테이너를 생성 합니다.\n test@ubuntu:~$ docker run --rm -it ubuntu:16.04 /bin/bash\rroot@8ace718689ac:/# cat /etc/lsb-release\rDISTRIB_ID=Ubuntu\rDISTRIB_RELEASE=16.04\rDISTRIB_CODENAME=xenial\rDISTRIB_DESCRIPTION=\u0026#34;Ubuntu 16.04.5 LTS\u0026#34;\rroot@8ace718689ac:/# exit\rtest@ubuntu:~$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rtest@ubuntu:~$\r Docker images\nDocker Hub에서 공식 images 를 제공 합니다.\ndocker search 명령어를 통하여 images 를 검색 할수 있습니다.\nOFFICIAL [OK] image 의 경우 공식 이미지 입니다. apache 이미지의 경우 httpd 입니다.\n test@ubuntu:~$ docker search apache\rNAME DESCRIPTION STARS OFFICIAL AUTOMATED\rtomcat Apache Tomcat is an open source implementati… 2061 [OK]\rhttpd The Apache HTTP Server Project 2035 [OK]\rcassandra Apache Cassandra is an open-source distribut… 867 [OK]\rmaven Apache Maven is a software project managemen… 696 [OK]\rsolr Solr is the popular, blazing-fast, open sour… 586 [OK]\rzookeeper Apache ZooKeeper is an open-source server wh… 483 [OK]\reboraas/apache-php PHP5 on Apache (with SSL support), built on … 139 [OK]\reboraas/apache Apache (with SSL support), built on Debian 90 [OK]\rwebdevops/php-apache-dev PHP with Apache for Development (eg. with xd… 78 [OK]\rwebdevops/php-apache Apache with PHP-FPM (based on webdevops/php) 74 [OK]\rgroovy Apache Groovy is a multi-faceted language fo… 58 [OK]\rtomee Apache TomEE is an all-Apache Java EE certif… 56 [OK]\rnimmis/apache-php5 This is docker images of Ubuntu 14.04 LTS wi… 53 [OK]\rapacheignite/ignite Apache Ignite In-Memory docker image. 44 [OK]\rbitnami/apache Bitnami Apache Docker Image 42 [OK]\rlinuxserver/apache An Apache container, brought to you by Linux… 18\rapache/nutch Apache Nutch 15 [OK]\r1and1internet/ubuntu-16-apache-php-7.0 ubuntu-16-apache-php-7.0 13 [OK]\rwebdevops/apache Apache container 11 [OK]\rantage/apache2-php5 Docker image for running Apache 2.x with PHP… 10 [OK]\rlephare/apache Apache container 4 [OK]\rnewdeveloper/apache-php apache-php7.2 2\rmastertinner/apache-directory-index-resource A Concourse resource for the apache director… 1 [OK]\rsecoresearch/apache-varnish Apache+PHP+Varnish5.0 0 [OK]\rjelastic/apachephp An image of the Apache PHP application serve… 0\rtest@ubuntu:~$\r Docker pull\ndocker pull 명령어의 경우 images 를 System 에 다운 로드 하는 명령어 입니다.\ndocker pull httpd:Version 으로 지정 하여 사용할수 있습니다.\n test@ubuntu:~$ docker pull tomcat:latest\rlatest: Pulling from library/tomcat\r05d1a5232b46: Pull complete\r5cee356eda6b: Pull complete\r89d3385f0fd3: Pull complete\r65dd87f6620b: Pull complete\r78a183a01190: Pull complete\r1a4499c85f97: Pull complete\r2c9d39b4bfc1: Pull complete\r1b1cec2222c9: Pull complete\rfc95b85a81f3: Pull complete\r0f3868647539: Pull complete\r9b6a6eddb2d9: Pull complete\r8787183cb077: Pull complete\rDigest: sha256:8d120de5102cc12310de741299e9bf6f39d2d674663f2ce4e6f0f181ccfeebe7\rStatus: Downloaded newer image for tomcat:latest\rtest@ubuntu:~$\r Docker images\nSystem 에 있는 이미지를 검색할때 사용합니다.\n사용시 images -a 옵션으로 모든 이미지를 확인할수 있습니다.\n test@ubuntu:~$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rhttpd latest dabb52744997 6 days ago 178MB\rtomcat latest 41a54fe1f79d 2 weeks ago 463MB\rmariadb latest 199cc294e316 3 weeks ago 363MB\rmysql 5.7 563a026a1511 3 weeks ago 372MB\rtest@ubuntu:~$\r Apache 컨테이너 실행\n-d 옵션을 사용 하여 컨테이너 백그라운드 실행\n-p 외부포트:내부포트 연결\n\u0026ndash;name httpd-test 이름지정\nhttpd images 이름\n test@ubuntu:~$ docker run -d -p 80:80 --name httpd-test httpd\rUnable to find image \u0026#39;httpd:latest\u0026#39; locally\rlatest: Pulling from library/httpd\rf189db1b88b3: Pull complete\rba2d31d4e2e7: Pull complete\r23a65f5e3746: Pull complete\r5e8eccbd4bc6: Pull complete\r4c145eec18d8: Pull complete\rc64fd93430a0: Pull complete\rc9efc31823a2: Pull complete\rDigest: sha256:81bc5f68f994a3c7bffc5d6ecba9e4fde70488c43ee8d57846a45c4995c67a23\rStatus: Downloaded newer image for httpd:latest\r9e02908f90d24120f60e9b2f45887fbc528d34c50644676bdcdbe5de593733c6\rtest@ubuntu:~$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r9e02908f90d2 httpd \u0026#34;httpd-foreground\u0026#34; 4 seconds ago Up 2 seconds 0.0.0.0:80-\u0026gt;80/tcp httpd-test\rtest@ubuntu:~$\r webpage 확인\ncurl 명령어로 localhost 정보를 가지고 옵니다.\n test@ubuntu:~$ curl http://localhost\r\u0026lt;html\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h1\u0026gt;It works!\u0026lt;/h1\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\rtest@ubuntu:~$\r 컨테이너 정지\n컨테이너 정지시 ContainerID 를 사용합니다.\n test@ubuntu:~$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r9e02908f90d2 httpd \u0026#34;httpd-foreground\u0026#34; 22 minutes ago Up 22 minutes 0.0.0.0:80-\u0026gt;80/tcp httpd-test\rtest@ubuntu:~$ docker stop 9e02908f90d2\r9e02908f90d2\rtest@ubuntu:~$\r 컨테이너 재사용\ndocker start ContainerID 로 컨테이너를 실행 할수 있습니다.\nContainerID 의 경우 docker ps -a 로 확인 가능합니다.\n test@ubuntu:~$ docker ps -a\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r9e02908f90d2 httpd \u0026#34;httpd-foreground\u0026#34; 23 minutes ago Exited (0) About a minute ago httpd-test\rtest@ubuntu:~$ docker start 9e02908f90d2\r9e02908f90d2\rtest@ubuntu:~$\r 컨테이너 재사용시 동일한 옵션으로 실행되는것을 확인 할수 있습니다.\n test@ubuntu:~$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r9e02908f90d2 httpd \u0026#34;httpd-foreground\u0026#34; 25 minutes ago Up About a minute 0.0.0.0:80-\u0026gt;80/tcp httpd-test\rtest@ubuntu:~$\r 컨테이너 삭제\n컨테이너 삭제시 rm 으로 삭제 하시면 됩니다.\n test@ubuntu:~$ docker rm 9e02908f90d2\r9e02908f90d2\r Mysql 5.7 컨테이너 실행\n-d 백그라운드 실행\n-p 3306 외부포트:내부포트 연결\n-e 컨테이너 내부에서 사용할 환경변수 설정\n\u0026ndash;name 컨테이너 이름 지정\nmysql:5.7 mysql:Version 지정\n환경변수 값은 Dockerhub Mysql Officeal repo 에서 확인 가능 합니다.\n test@ubuntu:~$ docker run -d -p 3306:3306 -e MYSQL_ALLOW_EMPTY_PASSWORD=true --name mysql mysql:5.7\rUnable to find image \u0026#39;mysql:5.7\u0026#39; locally\r5.7: Pulling from library/mysql\r802b00ed6f79: Pull complete\r30f19a05b898: Pull complete\r3e43303be5e9: Pull complete\r94b281824ae2: Pull complete\r51eb397095b1: Pull complete\r54567da6fdf0: Pull complete\rbc57ddb85cce: Pull complete\rc7c0a9c25d8a: Pull complete\rcce6c47ac3fc: Pull complete\r499b9c7376c8: Pull complete\r6c5e08e005ea: Pull complete\rDigest: sha256:1d8f471c7e2929ee1e2bfbc1d16fc8afccd2e070afed24805487e726ce601a6d\rStatus: Downloaded newer image for mysql:5.7\r71092d0a0aac614107e3cd60653f2d2ebd781cb2c0bdea3c4266e84b094ad9f5\rtest@ubuntu:~$\r Mysql 접속 테스트\n접속 테스트를 하기 위해서는 mysql5.7-client 설치가 필요합니다.\n test@ubuntu:~$ sudo apt-get install -y mysql-client\r 접속테스트\n test@ubuntu:~$ mysql -h127.0.0.1 -uroot\rWelcome to the MySQL monitor. Commands end with ; or \\g.\rYour MySQL connection id is 2\rServer version: 5.7.23 MySQL Community Server (GPL)\rCopyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\rOracle is a registered trademark of Oracle Corporation and/or its\raffiliates. Other names may be trademarks of their respective\rowners.\rType \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement.\rmysql\u0026gt; show databases;\r+--------------------+\r| Database |\r+--------------------+\r| information_schema |\r| mysql |\r| performance_schema |\r| sys |\r+--------------------+\r4 rows in set (0.00 sec)\rmysql\u0026gt;\r Mariadb 컨테이너 image 다운\n test@ubuntu:~$ docker pull mariadb:latest\rlatest: Pulling from library/mariadb\r124c757242f8: Pull complete\r9d866f8bde2a: Pull complete\rfa3f2f277e67: Pull complete\r398d32b153e8: Pull complete\rafde35469481: Pull complete\r31f2ae82b3e3: Pull complete\r3eeaf7e45ea6: Pull complete\r716982328e17: Pull complete\r34ce605c9036: Pull complete\r4502ed9073c0: Pull complete\r2afafbdf5a96: Pull complete\r43d52b11dd31: Pull complete\r30c7b70556f3: Pull complete\r8b1b39f2f89a: Pull complete\r41480b9319d7: Pull complete\rDigest: sha256:b7894bd08e5752acdd41fea654cb89467c99e67b8293975bb5d787b27e66ce1a\rStatus: Downloaded newer image for mariadb:latest\rtest@ubuntu:~$\r Mariadb 컨테이너 실행\n\u0026ndash;name 이름지정 mariadb\n-p 3306 외부:내부 포트 연결\n-e 컨테이너 환경 변수 설정 (mysql root password 지정)\n-d 백그라운드 실행\nmariadb:latest mariadb Version 지정\n test@ubuntu:~$ docker run --name mariadb -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -d mariadb:latest\r5b60cf8def76edcbc03603116e735f695413bf6d0cd22cb43c2e7d714cb2caeb\rtest@ubuntu:~$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r5b60cf8def76 mariadb:latest \u0026#34;docker-entrypoint.s…\u0026#34; 5 seconds ago Up 4 seconds 0.0.0.0:3306-\u0026gt;3306/tcp mariadb\rtest@ubuntu:~$\r Mariadb 컨테이너 접속\npassword 입력시 -e 로 지정한 mariadb password 를 입력 합니다.\n test@ubuntu:~$ mysql -h127.0.0.1 -uroot -p\rEnter password:\rWelcome to the MySQL monitor. Commands end with ; or \\g.\rYour MySQL connection id is 8\rServer version: 5.5.5-10.3.9-MariaDB-1:10.3.9+maria~bionic mariadb.org binary distribution\rCopyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\rOracle is a registered trademark of Oracle Corporation and/or its\raffiliates. Other names may be trademarks of their respective\rowners.\rType \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement.\rmysql\u0026gt; status;\r--------------\rmysql Ver 14.14 Distrib 5.7.23, for Linux (x86_64) using EditLine wrapper\rConnection id: 8\rCurrent database:\rCurrent user: root@172.17.0.1\rSSL: Not in use\rCurrent pager: stdout\rUsing outfile: \u0026#39;\u0026#39;\rUsing delimiter: ;\rServer version: 5.5.5-10.3.9-MariaDB-1:10.3.9+maria~bionic mariadb.org binary distribution\rProtocol version: 10\rConnection: 127.0.0.1 via TCP/IP\rServer characterset: latin1\rDb characterset: latin1\rClient characterset: utf8\rConn. characterset: utf8\rTCP port: 3306\rUptime: 3 min 15 sec\rThreads: 7 Questions: 4 Slow queries: 0 Opens: 17 Flush tables: 1 Open tables: 11 Queries per second avg: 0.020\r--------------\rmysql\u0026gt; ^DBye\rtest@ubuntu:~$\r System rebooting 시 자동실행\n컨테이너 실행시 run 옵션에서 \u0026ndash;restart=always 옵션을 사용하면\n시스템 리부팅시에도 컨테이너가 자동으로 실행 됩니다.\n모든 이미지가 되는것은 아니며 일부 이미지의 경우 \u0026ndash;restart=always 가 실행 안될수 있습니다.\n test@ubuntu:~$ docker run --restart=always -d -p 80:80 --name nginx nginx:latest\rUnable to find image \u0026#39;nginx:latest\u0026#39; locally\rlatest: Pulling from library/nginx\r802b00ed6f79: Pull complete\rc16436dbc224: Pull complete\r683eac851b28: Pull complete\rDigest: sha256:e8ab8d42e0c34c104ac60b43ba60b19af08e19a0e6d50396bdfd4cef0347ba83\rStatus: Downloaded newer image for nginx:latest\r835ad911bdd56973a8fc1e4692460ba49f123e932a2010cc060b987a534f13a1\rtest@ubuntu:~$\r System rebooting 후 컨테이너 확인\n test@ubuntu:~$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r835ad911bdd5 nginx:latest \u0026#34;nginx -g \u0026#39;daemon of…\u0026#34; About a minute ago Up About a minute 0.0.0.0:80-\u0026gt;80/tcp nginx\rtest@ubuntu:~$ sudo init 6\rSystem rebooting 후 확인\rtest@ubuntu:~$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r835ad911bdd5 nginx:latest \u0026#34;nginx -g \u0026#39;daemon of…\u0026#34; 2 minutes ago Up 10 seconds 0.0.0.0:80-\u0026gt;80/tcp nginx\rtest@ubuntu:~$\r Docker update\ndocker update 명령어를 통하여 restart 옵션을 변경 할수 있습니다.\n test@ubuntu:~$ docker update --restart=no nginx\rnginx\r Docker run reference Site\ndocker reference Site 에서 자세한 옵션 정보를 확인 할수 있습니다.\n "
},
{
	"uri": "https://bksanjuk.github.io/linux/file-system/",
	"title": "File System",
	"tags": [],
	"description": "",
	"content": "File System  File System 소개  파일 시스템이란 파일의 실제 데이터와 메타데이터(파일의 위치, 크기, 소유자, 허가권 등, ls -al로 볼 수 있는 파일정보)를 유지/저장하는 체계입니다.\n파일에 이름을 붙이고, 저장이나 검색을 위해 논리적으로 그것들이 어디에 위치시켜야 하는지 등을 나타내는 방법입니다. 도스, 윈도우, OS/2, 매킨토시 및 유닉스 기반의 운영체계들은 모두, 파일들이 어딘가에 계층적인 구조로 위치하는 파일 시스템을 가지고 있습니다.\n파일은 계층구조 내의 바른 위치인 디렉터리 (윈도우95 이후에는 폴더) 또는 서브디렉터리 내에 놓여 집니다. 파일 시스템들은 파일의 이름을 붙이는 규칙을 가지고 있습니다.\n이러한 규칙에는 파일이름의 길이제한, 어떤 글자들이 사용될 수 있는지 등이 포함되며, 몇몇 시스템에서는 파일이름 확장자의 길이조차 제한을 두고 있습니다. 파일 시스템은 또한 디렉터리 구조를 통하여 파일까지 가는 경로를 설정하는 형식을 포함합니다.\n\r Partition 이란 ?   하드 디스크 및 Storage 를 필요 용도에 따라 나눠 놓는것을 말합니다.\n  Partition image    MBR (Master Boot Record)  MBR은 운영체계가 어디에, 어떻게 위치해 있는지를 식별하여 컴퓨터의 주기억장치에 적재될 수 있도록 하기 위한 정보로서 하드디스크나 디스켓의 첫 번째 섹터에 저장되어 있습니다.\nMBR은 또한 \u0026ldquo;파티션 섹터\u0026rdquo; 또는 \u0026ldquo;마스터 파티션 테이블\u0026quot;이라고도 불리는데, 그 이유는 하드디스크가 포맷될 때 나뉘어지는 각 파티션의 위치에 관한 정보를 가지고 있기 때문입니다.\n그외에도, MBR은 메모리에 적재될 운영체계가 저장되어 있는 파티션의 부트 섹터 레코드를 읽을 수 있는 프로그램을 포함하고 있는데, 부트 섹터 레코드에는 다시 운영체계의 나머지 부분들을 메모리에 적재시키는 프로그램을 담고 있습니다.\n\r 주 파티션 (Primary)   /boot 디렉토리 및 / 영역을 주로 사용 합니다. (4개의 Primary 파티션 또는 3개의 Primary 파티션 + 1개의 Extend 영역으로 구성 할수 있습니다.)\n  확장 파티션 (Extended)   Extended 는 실제로 사용되는 파티션이 아닌, 그 하위에 생성될 Logical 영역 사용하기 위한 영역 입니다.\n  논리 파티션 (Logical)   Extend 파티션으로 만든 파티션으로 Logical 파티션을 구성 할수 있습니다.\n  Logical 영역 참고사항  RHEL 5 까지는 Logical 영역이 15개로 제한 되어 있었지만 RHEL 6 부터는 제한이 없어 졌으며\n퍼포먼스 이슈로 인하여 15개 이하로 만드는게 좋습니다.\n\r File system 요약  파일 시스템이란 운영제제가 파일을 시스템의 디스크상에 구성하는 방식을 말합니다.\n운영체제는 시스템의 디스크 파티션상에 파일들을 연속적이고 일정한 규칙을 가지고 저장하는데 파일 시스템은 이러한 규칙들의 방식을 제시하는 역할을 합니다.\n\r  File system 구조\n  슈퍼 블록 (Super Block)\n   슈퍼블록(Super Block)은 파일 시스템에 의존하는 정보를 가지며 파일 시스템의 크기 등과 같은 파일 시스템의 전체 적인 정보를 가지고 있습니다.\n  아이노드 (inode)   아이노드(inode)는 파일의 이름을 제외한 해당 파일의 모든 정보를 가지고 있다. 파일 이름은 inode 번호와 함께 디렉토리 안에 저장됩니다.\n  데이터 블록 (Data Block)   데이터 블록(data block)은 inode에 포함된다. inode가 몇 개의 데이터 블록을 포함하고 있다. 데이터 블록은 파일에서 테이터를 저장하기 위해서 사용됩니다.\n  디렉토리 블록 (Directory Block)   파일 이름과 inode번호를 저장하기 위해서 사용됩니다.\n  간접 블록 (Indirection Block)   간접블록은 추가적인 테이터 블록을 위한 포인터들이 사용할 동작으로 할당되는 공간이다. 실제적으로 inode는 적은 수의 테이터 블록을 가지고 있습니다.\n그러므로 더 많은 데이터 블록이 필요할 경우 이를 지정할 포인터가 필요하게 되는데 그때 포인터들이 사용할 동적인 블록이 간접 블록입니다.\n  홀 (Hole)   홀은 inode나 간접 블록안의 테이터 블록의 주소로 특별한 값을 저장한다.홀은 파일 시스템에 의해서 파일안에 자리하게 됩니다. 하지만 이 홀을 위해 실질적으로 디스크 상에 공간은 할당되지 않습니다, 단지 0바이트가 파일 안에서 특정 공간을 차지하고 있더라고 가정하는 것\n  저널링 파일 시스템 이란 ?  저널링 파일 시스템은 데이터베이스에서 사용하는 저널링 기술을 적용하여 일정부분을 기록에 남겨두어, 백업 및 복구 능력이 뛰어난 파일 시스템을 말하며, 비정상적인 종료로 인해 수행되는 파일 시스템 복구에 드는 시간이 적게 듭니다.\n\r 리눅스 사용가능 파일 시스템 종류  리눅스에서 사용하는 표준 파일시스템은 ext, ext2 순서로 발전해 왔으며, 커널 2.4.x부터 ReiserFS, XFS, JFS, ext3 와 같은 새로운 저널링(Journaling) 파일시스템이 추가 되었습니다.\nRHEL 6 Version 의 경우 ext4 , RHEL 7 Version 의 경우 XFS 가 기본 파일시스템 입니다.\nEXT4 와 XFS 의 경우 자세하게 정리 하였으며 나머지 파일 시스템의 경우 참고 사항만 정리 하였습니다.\n\r JFS/JFS2   IBM의 독자적인 저널링 파일 시스템으로, 자사의 하이 엔드 서버와 OS/2 에서 사용할 목적으로 만든 저널링 파일시스템이며 JFS 는 커뮤니티 버전의 리눅스 에서 사용 가능합니다.\nRHEL 모든 버전의 경우 지원하지 않으며, 권장 하지 않습니다.\n  ReiserFS   Hans Reiser가 이끄는 Namesys 팀이 설계하고 구현 한 범용 저널 컴퓨터 파일 시스템입니다. GPLv2로 라이센스 된 Linux (할당량 지원없이)에서 지원되며, Linux 커널 2.4.1 버전에서 처음 소개 된이 커널은 표준 커널에 포함될 최초의 저널링 파일 시스템이었습니다.\n  EXT   ext는 ext1 으로도 불리며, 리눅스 운영 체제를 목표로 만들어진 첫번째 파일 시스템입니다.\nExtended File System을 줄여 extfs 또는 ext로 씁니다.\next는 MFS(MINIX File System)의 한계를 극복하기 위해 만들었으며, 1992년 4월에 구현되어 Linux 0.96c에 추가되었습니다.\n  EXT2   ext2는 1993년 1월에 알파 버전을 공개한 파일 시스템이며, 정식 이름은 Second Extended File System입니다. ext2 파일 시스템은 ext의 문제를 해결하기 위해 나온 파일 시스템입니다.\next에 있었던 여러 단점(분리 접근, 아이노트 수정 등 지원 안 함)도 개선되었습니다.\n파일 시스템의 최대 크기는 블록 사이즈에 따라 2 TiB ~ 32 TiB이며, 서브 디렉토리 개수 제한은 32768개입니다.\n  EXT3   ext3는 2001년 11월에 Linux 2.4.15에 추가되었습니다. ext3 파일 시스템은 ext2 파일 시스템을 바탕으로 만들었기 때문에, ext2 파일 시스템을 자료 손실 없이 ext3 파일 시스템으로 바꿀 수 있습니다. 저널링은 주 파일 시스템을 수정하기 전에 저널에 수정 사항을 먼저 기록하여, 전원이 갑자기 나가거나 시스템 충돌이 일어났을 때 데이터 손실 가능성을 줄일 수 있습니다. ext3 파일 시스템은 또한 저널링을 할 때 체크섬을 검사하지 않습니다.\n한 디렉토리 당 서브 디렉토리 개수 제한은 31998개입니다.\n  EXT4  ext4는 ext3에 대한 일련의 하위 호환성 확장 으로 탄생했습니다.\next4에의 예비 개발 버전은 버전 2.6.19 포함 된 리눅스 커널을 2008 년 10 월 11 일, ext4를 안정적인 코드로 표시하는 패치는 Linux 2.6.28 소스 코드 저장소에서 병합되었습니다. ext4 파일 시스템을 포함하는 커널 2.6.28은 2008 년 12 월 25 일에 최종적으로 발표되었습니다.\n\rEXT4 주요 특징   대용량 파일 시스템\next4 파일 시스템은 최대 1 EiB 크기의 파일과 최대 16 TiB 크기의 파일을 지원 합니다.     Extents\next2, ext3 block mapping 방식을 extends 방식을 대체 하여 사용합니다. 대용량 파일 성능을 향상 시키고 조각화 현상을 줄여줍니다.     하위 호환성\next2, ext3 파일시스템을 ext4 방식으로 마운트하여 성능이 향상된 상태로 사용할 수 있습니다.\nextends를 사용하는 ext4 파티션은 ext3 방식으로 마운트 할수 없습니다.     저널 체크섬\next3 파일 시스템에 없었던 저널 체크섬 기능이 추가됨으로써, 파일 시스템 손상 가능성이 더 줄어들었습니다.     지연 할당\next4는 데이터가 디스크로 플러시 될 때까지 블록 할당을 지연시킵니다.\n지연된 할당은 한 번에 많은 양의 데이터를 효율적으로 할당하여 성능을 향상시키고 조각화를 줄여줍니다.     무제한의 하위 디렉토리\next4 는 서브 디렉토리를 무제한으로 허용합니다. (ext3 에서는 최대 32,000 서브 디렉토리를 가질수 있습니다.)     저널 체크섬\next4는 신뢰성을 향상시키기 위해 저널의 체크섬 을 사용합니다.\n저널링 중에 디스크 입출력 대기를 안전하게 피할 수 있으므로 성능이 향상됩니다.     신속한 파일 시스템 검사\next4는 디스크 검사를 할 때 사용하지 않는 부분은 건너뜀으로써 시스템 검사를 빨리 할 수 있습니다.     파일스탬프 향상\next4는 나노초 단위로 측정 된 타임 스탬프를 제공하며,날짜 생성 타임 스탬프에 대한 지원이 추가되었습니다.    XFS  XFS 는 SGI ( Silicon Graphics, Inc )가 1993 년에 만든 고성능 64 비트 저널링 파일 시스템이며, 수많은 사이트에서 검증된 파일시스템 입니다.\nXFS는 2001 년 리눅스 커널 에 포팅되었습니다 . 2014 년 6 월부터 XFS는 대부분의 Linux 배포 에서 지원되며 일부 Linux의 기본 파일 시스템으로 사용됩니다.\n\rXFS 주요 특징   32Bit OS에선 16TB까지 지원 합니다. RHEL 7 에서 지원하는 파일시스템 크기는 500T입니다. XFS는 파일 시스템 메타 데이터 저널링을 제공합니다. xfs_grouwfs 를 사용하여 마운트된 상태에서도 파일시스템 확장이 가능합니다. 쿼터 저널링 사용으로 충돌후 할당량 일관성 검사를 회피함으로 빠른 복구가 가능 합니다. 파일시스템 생성 속도가 빠릅니다. 네이티브 백업 및 restore 유틸이 있습니다. ( xfsdump , xfsrestore ) XFS의 직접 I/O는 응용 프로그램과 저장 장치간에 직접 DMA를 수행하여 장치의 전체 I/O 대역폭을 활용하여 높은 처리량, 캐시되지 않은 I/O를 구현합니다. XFS는 파일 시스템이 마운트 될 때 초기화되는 블록 및 inode 사용에 대한 사용자, 그룹 및 프로젝트 디스크 할당량을 할수 있습니다.     Linux filesystem 참고 사항 RHEL file system limitations\n  Certified and [Maximum] (individual) file size\n     Filesystem RHEL 3 RHEL 4 RHEL 5 RHEL 6 RHEL 7     EXT2/3 1TiB (3.0) 2TiB (3.5+) 2TiB 2TiB 2TiB 2TiB   EXT4 n/a n/a 16TiB (5.6+) 16TiB 16TiB   GFS1 2TiB 16TiB [8EiB] 16TiB [8EiB] n/a n/a   GFS2 n/a n/a 100TiB (5.3+) [8EiB] 100TiB [8EiB] 100TiB [8EiB]   XFS n/a n/a 100TiB [8EiB] 100TiB [8EiB] 500TiB [8EiB]     Certified and [Maximum] filesystem size     Filesystem RHEL 3 RHEL 4 RHEL 5 RHEL 6 RHEL 7     EXT2/3 1TiB (3.0) 2TiB(3.5+)[8TiB] 8TiB 8TiB (5.0), 16TiB (5.1+) 16TiB 16TiB   EXT4 n/a n/a 16TiB [1EiB] (5.6+) 16TiB [1EiB] 50TiB [1EiB]   GFS 2TiB 16TiB [8EiB] 16TiB [8EiB] n/a n/a   GFS2 n/a n/a 100(5.3+)TiB [8EiB] 100TiB [8EiB] 100TiB [8EiB]   XFS n/a n/a 100TiB [16EiB] 300TiB [16EiB] 500TiB [16EiB]    "
},
{
	"uri": "https://bksanjuk.github.io/freebsd/hostname/",
	"title": "Hostname",
	"tags": [],
	"description": "",
	"content": "Hostname 설정  hostname 명령어를 통하여 hostname을 변경 할수 있습니다.\n/etc/rc.conf 의 hostname line 를 수정해야 리부팅시 hostname 이 동일하게 적용됩니다.\n root@BSD11:~# hostname test-bsd root@BSD11:~ # vi /etc/rc.conf\rhostname=\u0026#34;test-bsd\u0026#34;\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/install/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": "Install  CentOS 7 설치  설치환경: vm\nCpu 1core / Memory 1G / Hdd 20G\nDVD Image 로 부팅 하면 최초 설치 화면을 볼수 있습니다.\nOS 장애시에도 DVD Image 로 부팅을 하여 rescue mode 로 진입 합니다.\n\r Install CentOS 7 을 선택합니다.    설치언어선택  사용할 언어를 선택 합니다. Desktop 환경에서는 한글을 사용하겠지만\n서버 환경에는 Default 로 선택 되어 있는 English 로 사용하는 것이 좋습니다.\n\r INSTALLATION SUMMARY    LOCALIZATION  DATE\u0026amp;TIME: System 에서 사용할 Timezone 을 설정할수 있습니다.\nKEYBOARD: System 에서 사용할 키보드 선택\nLANGUAGE SUPPORT: System 에서 사용할 언어설정\n\r SOFTWARE  INSTALLATION SOURCE: 설치 미디어 선택 NETWORK 설치 및 CD-ROM 으로 설치 할수 있습니다.\nSOFTWARE SELECTION: OS 설치시 설치할 패키지 선택\n\r SYSTEM  INSTALLATION DESTINATION: OS 설치가 될 HardDisk 의 파티션작업을 할수 있습니다.\nKDUMP: OS 장애시 KDUMP 설정을 통하여 OS DUMP 를 생성할수 있습니다.\nNETWORK \u0026amp; HOSTNAME: IP 설정 및 System Hostname 을 설정할수 있습니다.\nSECURITY POLICY: System 보안 설정을 할수 있습니다.\n\r  설정 DATE \u0026amp; TIME 을 클릭하여 Timezone 을 변경 합니다.\nAsia Seoul 로 변경후 Done 을 클릭합니다.\n  SYSTEM 항목에서 INSTALLATION DESTINATION 을 선택합니다.\n   Installation destination  Other Storage Options 에 Partitioning , Automatically configure partitioning 이 Default 로 선택 되어 있습니다. I will configure partitioning 으로 변경후 Done 을 클릭합니다.\n\r MANUAL PARTITIONING (수동파티션 설정)    파티셔닝 참고  /boot 2G (kernel-update 시 boot 용량이 증가 합니다.)\nswap (Memory 용량의 약 1배 ~ 2배로 설정 합니다.)\n16G이상부터는 반배나 1배로 설정 합니다.\n/ (별도의 파티션을 사용하지 않는다면 최대 용량으로 설정 합니다.)\nTest VM 의 경우 /boot , swap / 구성으로 설치 합니다.\n/home (일반 사용자 디렉토리, 사용용량에 맞게 설정합니다.)\n/var (log 및 db data 의 Default 저장 디렉토리 입니다.\nlog 저장을 많이 하는 System 의 경우 Size 를 크게 설정합니다.)\nKDUMP 이용시 /var/crash 가 설정 되어야 하며 일반적으로 메모리 용량의 약 1.5배입니다.\n에서 Standard Partition 을 선택 합니다.\n 버튼을 눌러 파티션을 추가 할수 있습니다.  \r /boot 파티션 생성    boot 디렉토리  \r/boot 디렉토리 2G Size 로 파티션을 생성합니다.\nAdd mount point 를 클릭합니다.\nMount point: 경로설정\nDesired Capacity: 용량\nAdd mount point 를 클릭하여 boot 파티션을 생성합니다.\n\r swap 파티션 생성    swap 참고  swap 의 경우 별도로 Mount Point 가 없습니다. Mount Point: swap Desired Capacity: 4G 로 설정합니다. Add mount point 를 클릭하여 swap 파티션을 생성합니다.\n\r / 파티션 생성    / 디렉토리  Mount Point: / Desired Capacity: 용량이 설정 되지 않으면 HardDisk 의 최대 용량으로 설정 됩니다. Add mount point 를 클릭하여 / 파티션을 생성 합니다.\n\r UEFI 사용시 참고  UEFI 사용시 /boot/efi 디렉토리를 생성 해야 합니다. 400m 정도로 설정을 합니다.\n\r  파티셔닝 작업이 끝났습니다. Done 을 클릭합니다.   SUMMARY OF CHANGES 변경사항 요약   Accept Changes 를 클릭합니다.    INSTALLATION SUMMARY  처음 설정 하였던 화면으로 돌아 왔습니다. 추가적인 패키지 설치 및 NETWORK 설정 변경등의 작업은 차후에 진행할수 있습니다. Begin Install 을 클릭 하여 설치를 진행합니다.\n\r CONFIGURATION  Begin Installation 을 클릭하면 파티셔닝 작업후 선택한 패키지로 설치가 진행됩니다. USER SETTINGS 에서는 ROOT PASSWORD 설정, USER CREATION 을 진행할수 있습니다. ROOT PASSWORD 를 선택하여 관리자 암호를 설정합니다.\n\r  ROOOT PASSWORD 관리자 암호설정   OS 설치가 완료 되었습니다. Reboot 를 클릭하여 설치를 마무리 합니다.    anaconda-ks file  설치후 anaconda 파일을 통하여 PXE Server 구성후 동일한 패키지로 설치를 진행 할수 있습니다. anaconda-ks file 은 /root 디렉토리에 위치 하고 있습니다. PXE 설치의 경우 차후 문서를 만들 예정 입니다.\n\r anaconda-ks.cfg  [root@centos7 ~]# pwd\r/root\r[root@centos7 ~]# cat anaconda-ks.cfg\r#version=DEVEL\r# System authorization information\rauth --enableshadow --passalgo=sha512\r# Use CDROM installation media\rcdrom\r# Use graphical install\rgraphical\r# Run the Setup Agent on first boot\rfirstboot --enable\rignoredisk --only-use=sda\r# Keyboard layouts\rkeyboard --vckeymap=us --xlayouts=\u0026#39;us\u0026#39;\r# System language\rlang en_US.UTF-8\r# Network information\rnetwork --bootproto=dhcp --device=ens33 --onboot=off --ipv6=auto --no-activate\rnetwork --bootproto=dhcp --device=ens34 --onboot=off --ipv6=auto\rnetwork --hostname=localhost.localdomain\r# Root password\rrootpw --iscrypted $1$AUaB1Lb335VMaYzw$dF0lijf4FCGOgfYPRZxF1Yvc7pQgDGtAi2eVbMUq8LaxYYILJxN4/OHzZdAZaSx/5BZwXGT5UohsK6wYtfGYr/\r# System services\rservices --disabled=\u0026#34;chronyd\u0026#34;\r# System timezone\rtimezone Asia/Seoul --isUtc --nontp\ruser --name=test --password=$6$zDTuta3/36Bo2j./$sb7/EbJQECn3Xe3HiRanTzYv6lZrP0zaMdij2Cx6I/5gz5afmrSCp.WNqEKEa9chD8gX7O1NT7RYvxbbI4O3.. --iscrypted --gecos=\u0026#34;test\u0026#34;\r# System bootloader configuration\rbootloader --append=\u0026#34; crashkernel=auto\u0026#34; --location=mbr --boot-drive=sda\r# Partition clearing information\rclearpart --none --initlabel\r# Disk partitioning information\rpart swap --fstype=\u0026#34;swap\u0026#34; --ondisk=sda --size=2048\rpart /boot --fstype=\u0026#34;xfs\u0026#34; --ondisk=sda --size=2048\rpart / --fstype=\u0026#34;xfs\u0026#34; --ondisk=sda --size=16383\r%packages\r@^minimal\r@compat-libraries\r@core\r@development\rkexec-tools\r%end\r%addon com_redhat_kdump --enable --reserve-mb=\u0026#39;auto\u0026#39;\r%end\r%anaconda\rpwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty\rpwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok\rpwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty\r%end\r[root@centos7 ~]#\r"
},
{
	"uri": "https://bksanjuk.github.io/ubuntu/system-upgrade/",
	"title": "System Upgrade",
	"tags": [],
	"description": "",
	"content": "System Upgrade  System Package upgrade\n시스템의 모든 패키지를 업그레이드 합니다.\n16.04 LTS -\u0026gt; 18.04 LTS upgrade\n  kernel-upgrade 시 upgrade 된 커널을 적용하기 위해서는 시스템 리부팅이 필요합니다.  test@ubuntu:~$ sudo apt-get upgrade -y\rtest@ubuntu:~$ sudo init 6\r 모든 패키지 업데이트  test@ubuntu:~$ sudo apt update \u0026amp;\u0026amp; sudo apt dist-upgrade \u0026amp;\u0026amp; sudo apt autoremove\rupdate-manager-core 패키지 설치\rtest@ubuntu:~$ sudo apt-get install update-manager-core\rPrompt=lts 확인\rtest@ubuntu:~$ cat /etc/update-manager/release-upgrades |grep -i prompt\rPrompt=lts\r 18.04 Upgrade  test@ubuntu:~$ sudo do-release-upgrade -d\rReading cache\rChecking package manager\rContinue running under SSH?\rThis session appears to be running under ssh. It is not recommended\rto perform a upgrade over ssh currently because in case of failure it\ris harder to recover.\rIf you continue, an additional ssh daemon will be started at port\r\u0026#39;1022\u0026#39;.\rDo you want to continue?\rContinue [yN] y\rStarting additional sshd\rTo make recovery in case of failure easier, an additional sshd will\rbe started on port \u0026#39;1022\u0026#39;. If anything goes wrong with the running\rssh you can still connect to the additional one.\rIf you run a firewall, you may need to temporarily open this port. As\rthis is potentially dangerous it\u0026#39;s not done automatically. You can\ropen the port with e.g.:\r\u0026#39;iptables -I INPUT -p tcp --dport 1022 -j ACCEPT\u0026#39;\rTo continue please press [ENTER]\r Keep the local version currently installed 를 선택 합니다.\n  System upgrade is complete.\rRestart required\rTo finish the upgrade, a restart is required.\rIf you select \u0026#39;y\u0026#39; the system will be restarted.\rContinue [yN] y\r System rebooting 후 확인  test@ubuntu:~$ cat /etc/lsb-release DISTRIB_ID=Ubuntu\rDISTRIB_RELEASE=18.04\rDISTRIB_CODENAME=bionic\rDISTRIB_DESCRIPTION=\u0026#34;Ubuntu 18.04.1 LTS\u0026#34; test@ubuntu:~$ "
},
{
	"uri": "https://bksanjuk.github.io/docker/docker-command/",
	"title": "Docker Command",
	"tags": [],
	"description": "",
	"content": "Docker Comamand Docker 명령어 사용법을 정리 합니다.\n기본으로 사용하는 명령어 위주로 사용하시고 필요할 경우 찾아 보시는것이 좋습니다.\n\rdocker Command 참고\n$ docker Command Option 형식으로 사용합니다.\nDocker 명령어 Site \n\r docker help 명령어 확인\n test@ubuntu:~$ docker help\rUsage: docker [OPTIONS] COMMAND\rA self-sufficient runtime for containers\rOptions:\r--config string Location of client config files (default \u0026#34;/home/test/.docker\u0026#34;)\r-D, --debug Enable debug mode\r-H, --host list Daemon socket(s) to connect to\r-l, --log-level string Set the logging level (\u0026#34;debug\u0026#34;|\u0026#34;info\u0026#34;|\u0026#34;warn\u0026#34;|\u0026#34;error\u0026#34;|\u0026#34;fatal\u0026#34;) (default \u0026#34;info\u0026#34;)\r--tls Use TLS; implied by --tlsverify\r--tlscacert string Trust certs signed only by this CA (default \u0026#34;/home/test/.docker/ca.pem\u0026#34;)\r--tlscert string Path to TLS certificate file (default \u0026#34;/home/test/.docker/cert.pem\u0026#34;)\r--tlskey string Path to TLS key file (default \u0026#34;/home/test/.docker/key.pem\u0026#34;)\r--tlsverify Use TLS and verify the remote\r-v, --version Print version information and quit\rManagement Commands:\rconfig Manage Docker configs\rcontainer Manage containers\rimage Manage images\rnetwork Manage networks\rnode Manage Swarm nodes\rplugin Manage plugins\rsecret Manage Docker secrets\rservice Manage services\rstack Manage Docker stacks\rswarm Manage Swarm\rsystem Manage Docker\rtrust Manage trust on Docker images\rvolume Manage volumes\rCommands:\rattach Attach local standard input, output, and error streams to a running container\rbuild Build an image from a Dockerfile\rcommit Create a new image from a container\u0026#39;s changes\rcp Copy files/folders between a container and the local filesystem\rcreate Create a new container\rdiff Inspect changes to files or directories on a container\u0026#39;s filesystem\revents Get real time events from the server\rexec Run a command in a running container\rexport Export a container\u0026#39;s filesystem as a tar archive\rhistory Show the history of an image\rimages List images\rimport Import the contents from a tarball to create a filesystem image\rinfo Display system-wide information\rinspect Return low-level information on Docker objects\rkill Kill one or more running containers\rload Load an image from a tar archive or STDIN\rlogin Log in to a Docker registry\rlogout Log out from a Docker registry\rlogs Fetch the logs of a container\rpause Pause all processes within one or more containers\rport List port mappings or a specific mapping for the container\rps List containers\rpull Pull an image or a repository from a registry\rpush Push an image or a repository to a registry\rrename Rename a container\rrestart Restart one or more containers\rrm Remove one or more containers\rrmi Remove one or more images\rrun Run a command in a new container\rsave Save one or more images to a tar archive (streamed to STDOUT by default)\rsearch Search the Docker Hub for images\rstart Start one or more stopped containers\rstats Display a live stream of container(s) resource usage statistics\rstop Stop one or more running containers\rtag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\rtop Display the running processes of a container\runpause Unpause all processes within one or more containers\rupdate Update configuration of one or more containers\rversion Show the Docker version information\rwait Block until one or more containers stop, then print their exit codes\rRun \u0026#39;docker COMMAND --help\u0026#39; for more information on a command.\rtest@ubuntu:~$\r docker attach  docker attach 실행중인 컨테이너에 로컬 표준 입력, 출력 및 오류 스트림 첨부\n\r 일반적으로 컨테이너에 접속 하기 위한 명령은 docker exec -it $컨테이너id /bin/bash 를 사용 합니다.\n  docker attach example\n컨테이너를 실행 하고 docker attach 를 이용하여 컨테이너에 접속 합니다.\n컨테이너에서 빠져 나올때는 Ctrl + p q 로 빠져 나옵니다.\n컨테이너에서 빠져 나올때 Ctrl + d 로 빠져 나올 경우 컨테이너는 정지 합니다.\ndocker ps 로 컨테이너 구동상태를 확인 합니다.\n $ docker run --name test -d -it debian\rUnable to find image \u0026#39;debian:latest\u0026#39; locally\rlatest: Pulling from library/debian\r05d1a5232b46: Pull complete\rDigest: sha256:07fe888a6090482fc6e930c1282d1edf67998a39a09a0b339242fbfa2b602fff\rStatus: Downloaded newer image for debian:latest\r8e14f3f3d4ffaad6bede08bfd076a3d07309ce646915cfe339f715261c94da90\rtest@ubuntu:~/Workspace/Docker-test/test01$ docker attach test\rroot@8e14f3f3d4ff:/#\rroot@8e14f3f3d4ff:/#\rroot@8e14f3f3d4ff:/#\rroot@8e14f3f3d4ff:/# read escape sequence\r$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r8e14f3f3d4ff debian \u0026#34;bash\u0026#34; About a minute ago Up About a minute test\r$\r docker attach 로 컨테이너에 접속 하기 위해서는 docker run -d -it 옵션으로 컨테이너를 실행 해야 합니다.\n-d 컨테이너를 생성하여 백그라운드에서 실행\n-t 컨테이너 표준입력 열기\n-t tty 사용\n  docker build  docker build docker build 는 Dockerfile 을 이용하여 image 생성시 사용합니다.\n\r docker build example\nDockerfile 을 이용하여 image 를 생성 합니다.\ndocker ps 명령어로 만들어진 이미지를 확인 합니다.\n test@ubuntu:~/Workspace/test01$ vi Dockerfile\rFROM ubuntu:16.04\rMAINTAINER test \u0026lt;test@anonymouse.com\u0026gt;\rRUN apt-get update\rRUN apt-get install -y nginx\rRUN echo \u0026#34;\\ndaemon off;\u0026#34; \u0026gt;\u0026gt; /etc/nginx/nginx.conf\rRUN chown -R www-data:www-data /var/lib/nginx\rVOLUME /data\rWORKDIR /etc/nginx\rCMD [\u0026#34;nginx\u0026#34;]\rEXPOSE 80\rEXPOSE 443\rtest@ubuntu:~/Workspace/test01$ docker build --tag nginx . test@ubuntu:~/Workspace/test01$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rnginx latest 10608766ca7a 6 seconds ago 212MB\rtest@ubuntu:~/Workspace/test01$\r docker commit\n docker commit\n컨테이너 변경사항을 적용한 새로운 이미지를 만드는 작업 입니다.\n\r docker commit example\n기존 ssh-server 컨테이너에 접속을 하여 git 패키지를 설치 합니다.\ndocker commit 명령어로 git 이 포함된 image를 생성 합니다.\n test@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\reff6ba796e43 ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 5 seconds ago Up Less than a second 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\r189479f8c9aa ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 5 seconds ago Up 3 seconds 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rtest@ubuntu:~/Workspace/ftp-server$ docker exec -it ssh-server /bin/bash\rroot@189479f8c9aa:/# apt-get install -y git\rroot@189479f8c9aa:/# exit test@ubuntu:~/Workspace/ftp-server$ docker commit ssh-server ssh-server:git\rsha256:694b90275abfc328f3f5a5c370b280f341dfec46ca5ddab2c7ad38c0b0f27c75\rtest@ubuntu:~/Workspace/ftp-server$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rssh-server git 694b90275abf 9 seconds ago 286MB \u0026lt;--- TAG 확인시 docker commit 을 한 git ssh-server 이미지를 확인할수 있습니다. nginx latest 10608766ca7a 21 hours ago 212MB\rftp/pure-ftpd 14.04 05b750504fe5 2 days ago 401MB\rssh-server latest 212d3f646e97 2 days ago 211MB\rubuntu 16.04 b9e15a5d1e1a 4 weeks ago 115MB\rubuntu 14.04 c32fae490809 4 weeks ago 188MB\rubuntu latest cd6d8154f1e1 4 weeks ago 84.1MB\rdebian latest f2aae6ff5d89 4 weeks ago 101MB\rtest@ubuntu:~/Workspace/ftp-server$  docker cp\n docker cp\n컨테이너의 파일을 카피할때 사용합니다.\n\r docker cp example\npure-ftpd 사용자 생성후 pureftpd.password 파일을 로컬 pure-ftpd 설정디렉토리로 카피 합니다.\n docker ps 명령어로 ftpd 의 컨테이너 ID 를 확인 합니다. test@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\reff6ba796e43 ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 15 minutes ago Up 15 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\r189479f8c9aa ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 15 minutes ago Up 15 minutes 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rtest@ubuntu:~/Workspace/ftp-server$ docker exec -it eff6ba796e43 /bin/bash\rroot@eff6ba796e43:/# pure-pw useradd test1 -u ftpd-data -g ftpd-data -d /home/ftp\rPassword:\rEnter it again:\rroot@eff6ba796e43:/# pure-pw mkdb\rroot@eff6ba796e43:/# exit\rtest@ubuntu:~/Workspace/ftp-server$ cd pure-ftpd/\rtest@ubuntu:~/Workspace/ftp-server/pure-ftpd$ ls\rDockerfile pureftpd.passwd\rtest@ubuntu:~/Workspace/ftp-server/pure-ftpd$ docker cp eff6ba796e43:/etc/pure-ftpd/pureftpd.passwd .\rtest@ubuntu:~/Workspace/ftp-server/pure-ftpd$ cat pureftpd.passwd\rtest:$1$P4DB31/0$iIPf8.YJ6XP6k1zsmQtJq1:1000:1000::/home/ftp/./::::::::::::\rtest1:$1$na2YwOw0$vXXwmKm1Vo014M5oRpGyu/:1000:1000::/home/ftp/./::::::::::::\rtest@ubuntu:~/Workspace/ftp-server/pure-ftpd$\r docker create\n docker create\ndocker create 는 컨테이너 생성시 사용합니다.\ndocker run 의 경우 컨테이너 생성후 실행을 하지만 docker create 는 컨테이너 생성만 합니다.\n\r docker create example\n컨테이너를 생성후 docker ps 명령어로 컨테이너 실행 상태를 확인 합니다.\n test@ubuntu:~/Workspace$ docker create -it --name web-service httpd /bin/bash\rUnable to find image \u0026#39;httpd:latest\u0026#39; locally\rlatest: Pulling from library/httpd\rf189db1b88b3: Pull complete\rba2d31d4e2e7: Pull complete\r23a65f5e3746: Pull complete\r5e8eccbd4bc6: Pull complete\r4c145eec18d8: Pull complete\rc64fd93430a0: Pull complete\rc9efc31823a2: Pull complete\rDigest: sha256:81bc5f68f994a3c7bffc5d6ecba9e4fde70488c43ee8d57846a45c4995c67a23\rStatus: Downloaded newer image for httpd:latest\r130e40719b40f5d08a21a8bf5361fe2ec69d52a338e2e7b68e10c9f96395c727\rtest@ubuntu:~/Workspace$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rtest@ubuntu:~/Workspace$\r docker diff\n docker diff\ndocker diff 명령어는 컨테이너에서 변경된 파일을 확인할때 사용합니다.\n\r   심볼 설명     A 추가된 파일   D 삭제된 파일   C 변경된 파일    test@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\re573cd7dca0b ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 16 seconds ago Up 9 seconds 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\r45cd7a7269fd ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 16 seconds ago Up 14 seconds 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rtest@ubuntu:~/Workspace/ftp-server$ docker diff e573cd7dca0b\rC /run\rA /run/pure-ftpd.pid\rtest@ubuntu:~/Workspace/ftp-server$ docker diff 45cd7a7269fd\rC /home\rC /home/test\rA /home/test/ftp\rC /run\rA /run/sshd.pid\rtest@ubuntu:~/Workspace/ftp-server$\r docker events\n docker events docker events 는 리얼타임으로 이벤트 확인시 사용합니다.\n\r docker events example\nssh 터미널 2대에서 컨테이너 실행 / 컨테이너 이벤트를 확인 합니다.\n터미널 1에서 docker events 명령어를 실행 합니다.\n test@ubuntu:~$ docker events\r2018-10-06T16:09:42.490532152+09:00 network create 0830cf7d056864010175fcb5dd6a7311ce4b2e28bb1f7758ea9365a0926100c4 (name=ftpserver_default, type=bridge)\r2018-10-06T16:09:42.586646157+09:00 image tag sha256:212d3f646e97afe608dde49220e62e08c9d743062863b66e1c63103822eb26df (name=ssh-server:latest)\r2018-10-06T16:09:42.691771402+09:00 image tag sha256:9cae9b363b5a8cb0dc5b58ab43fd9cb6357a0011ad4cf2902f20a2f918b30520 (name=ftp/pure-ftpd:14.04)\r2018-10-06T16:09:42.861839801+09:00 container create 404ad93a5840cb3e379275cb64b4297d8238013771bd1f1532cb93ae78328392 (com.docker.compose.config-hash=e922fb1d53e3afd3b1e24ba8ed07b4d78f445e06d6037004800d89d7edd7d850, com.docker.compose.container-number=1, com.docker.compose.oneoff=False, com.docker.compose.project=ftpserver, com.docker.compose.service=ssh-server, com.docker.compose.version=1.19.0, image=ssh-server, name=ssh-server)\r 터미널 2에서 docker-compose 를 실행 합니다.\n test@ubuntu:~/Workspace/ftp-server$ docker-compose up -d --build\r docker exec\n docker exec\ndocker exec 명령어는 실행중인 컨테이너에 접속할때 사용합니다.\n\r docker exec example\ndocker ps 명령어로 컨테이너ID 를 확인 합니다.\ndocker exec 명령어로 실행중인 컨테이너에 접속 합니다.\n test@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r6e97f63d80fa ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 3 minutes ago Up 3 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\r404ad93a5840 ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 3 minutes ago Up 3 minutes 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rtest@ubuntu:~/Workspace/ftp-server$ docker exec -it 6e97f63d80fa /bin/bash\rroot@6e97f63d80fa:/#\r docker export\n docker export docker export 는 컨테이너 파일시스템을 tar 압축으로 만듭니다.\n\r docker 백업의 경우 차후 설명 하도록 하겠습니다.\n test@ubuntu:~/Workspace/ftp-server$ docker export ssh-server \u0026gt; ./ssh-server.tar\rtest@ubuntu:~/Workspace/ftp-server$ ls\rdocker-compose.yml pure-ftpd ssh-server ssh-server.tar\rtest@ubuntu:~/Workspace/ftp-server$\r docker import\n docker import docker import 는 export 한 tar 파일로 image를 생성 합니다.\n\r docker import example\ndocker export 로 생성한 ssh-server.tar 파일에서 ssh-server image 를 생성합니다.  test@ubuntu:~/Workspace/ftp-server$ cat ssh-server.tar | docker import - ssh-server\rsha256:e18ecfd3f50a110175be67d5426acf1177ed79c25991d76da3fc04b00ee59e27\rtest@ubuntu:~/Workspace/ftp-server$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rssh-server latest e18ecfd3f50a 6 seconds ago 181MB\rtest@ubuntu:~/Workspace/ftp-server$\r docker history\n docker history\ndocker history 는 컨테이너의 history 확인시 사용합니다.\n\r docker history example\n test@ubuntu:~/Workspace/ftp-server$ docker history ssh-server\rIMAGE CREATED CREATED BY SIZE COMMENT\r212d3f646e97 2 days ago /bin/sh -c #(nop) CMD [\u0026#34;/usr/sbin/sshd\u0026#34; \u0026#34;-D… 0B\rd8289a15c096 2 days ago /bin/sh -c #(nop) EXPOSE 22 0B\r94680df1ab14 2 days ago /bin/sh -c echo \u0026#34;export VISIBLE=now\u0026#34; \u0026gt;\u0026gt; /etc… 594B\rc0315bd26cd4 2 days ago /bin/sh -c #(nop) ENV NOTVISIBLE=in users p… 0B\rcd9ea05ee59b 2 days ago /bin/sh -c apt-get update \u0026amp;\u0026amp; apt-get install… 95.8MB\rc1d4c20408a7 2 days ago /bin/sh -c #(nop) MAINTAINER Sven Dowideit … 0B\rb9e15a5d1e1a 4 weeks ago /bin/sh -c #(nop) CMD [\u0026#34;/bin/bash\u0026#34;] 0B\r\u0026lt;missing\u0026gt; 4 weeks ago /bin/sh -c mkdir -p /run/systemd \u0026amp;\u0026amp; echo \u0026#39;do… 7B\r\u0026lt;missing\u0026gt; 4 weeks ago /bin/sh -c sed -i \u0026#39;s/^#\\s*\\(deb.*universe\\)$… 2.76kB\r\u0026lt;missing\u0026gt; 4 weeks ago /bin/sh -c rm -rf /var/lib/apt/lists/* 0B\r\u0026lt;missing\u0026gt; 4 weeks ago /bin/sh -c set -xe \u0026amp;\u0026amp; echo \u0026#39;#!/bin/sh\u0026#39; \u0026gt; /… 745B\r\u0026lt;missing\u0026gt; 4 weeks ago /bin/sh -c #(nop) ADD file:a83ab1826f43e88bc… 115MB\rtest@ubuntu:~/Workspace/ftp-server$\r docker images\n docker images\ndocker images 명령어는 System 에 가지고 있는 docker images 파일을 출력합니다.\n\r docker images example\n test@ubuntu:~/Workspace/ftp-server$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rftp/pure-ftpd 14.04 9cae9b363b5a 25 minutes ago 401MB\rssh-server git 694b90275abf About an hour ago 286MB\rnginx latest 10608766ca7a 21 hours ago 212MB\r\u0026lt;none\u0026gt; \u0026lt;none\u0026gt; 05b750504fe5 2 days ago 401MB\rssh-server latest 212d3f646e97 2 days ago 211MB\rhttpd latest dabb52744997 10 days ago 178MB\rubuntu 16.04 b9e15a5d1e1a 4 weeks ago 115MB\rubuntu 14.04 c32fae490809 4 weeks ago 188MB\rubuntu latest cd6d8154f1e1 4 weeks ago 84.1MB\rdebian latest f2aae6ff5d89 4 weeks ago 101MB\rtest@ubuntu:~/Workspace/ftp-server$\r docker info\n docker info\ndocker info 는 docker 정보를 출력합니다.\n\r docker info example\n test@ubuntu:~/Workspace/ftp-server$ docker info\rContainers: 0\rRunning: 0\rPaused: 0\rStopped: 0\rImages: 1\rServer Version: 18.06.1-ce\rStorage Driver: overlay2\rBacking Filesystem: extfs\rSupports d_type: true\rNative Overlay Diff: true\rLogging Driver: json-file\rCgroup Driver: cgroupfs\rPlugins:\rVolume: local\rNetwork: bridge host macvlan null overlay\rLog: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\rSwarm: inactive\rRuntimes: runc\rDefault Runtime: runc\rInit Binary: docker-init\rcontainerd version: 468a545b9edcd5932818eb9de8e72413e616e86e\rrunc version: 69663f0bd4b60df09991c08812a60108003fa340\rinit version: fec3683\rSecurity Options:\rapparmor\rseccomp\rProfile: default\rKernel Version: 4.15.0-34-generic\rOperating System: Ubuntu 18.04.1 LTS\rOSType: linux\rArchitecture: x86_64\rCPUs: 2\rTotal Memory: 3.83GiB\rName: ubuntu\rID: JRYG:BHQ3:H35K:4BQA:4IO7:2HG4:SZ2X:34NQ:2D7P:AHBC:TIDI:BNQQ\rDocker Root Dir: /var/lib/docker\rDebug Mode (client): false\rDebug Mode (server): false\rRegistry: https://index.docker.io/v1/\rLabels:\rExperimental: false\rInsecure Registries:\r127.0.0.0/8\rLive Restore Enabled: false\rWARNING: No swap limit support\rtest@ubuntu:~/Workspace/ftp-server$\r docker inspect\n docker inspect\ndocker inspect 는 docker image 정보 확인시 사용합니다.\n\r docker inspect example\n test@ubuntu:~/Workspace/ftp-server$ docker inspect ssh-server\r[\r{\r\u0026#34;Id\u0026#34;: \u0026#34;sha256:e18ecfd3f50a110175be67d5426acf1177ed79c25991d76da3fc04b00ee59e27\u0026#34;,\r\u0026#34;RepoTags\u0026#34;: [\r\u0026#34;ssh-server:latest\u0026#34;\r],\r\u0026#34;RepoDigests\u0026#34;: [],\r\u0026#34;Parent\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;Comment\u0026#34;: \u0026#34;Imported from -\u0026#34;,\r\u0026#34;Created\u0026#34;: \u0026#34;2018-10-06T07:49:25.398220135Z\u0026#34;,\r\u0026#34;Container\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;ContainerConfig\u0026#34;: {\r\u0026#34;Hostname\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;Domainname\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;User\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;AttachStdin\u0026#34;: false,\r\u0026#34;AttachStdout\u0026#34;: false,\r\u0026#34;AttachStderr\u0026#34;: false,\r\u0026#34;Tty\u0026#34;: false,\r\u0026#34;OpenStdin\u0026#34;: false,\r\u0026#34;StdinOnce\u0026#34;: false,\r\u0026#34;Env\u0026#34;: null,\r\u0026#34;Cmd\u0026#34;: null,\r\u0026#34;Image\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;Volumes\u0026#34;: null,\r\u0026#34;WorkingDir\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;Entrypoint\u0026#34;: null,\r\u0026#34;OnBuild\u0026#34;: null,\r\u0026#34;Labels\u0026#34;: null\r},\r\u0026#34;DockerVersion\u0026#34;: \u0026#34;18.06.1-ce\u0026#34;,\r\u0026#34;Author\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;Config\u0026#34;: {\r\u0026#34;Hostname\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;Domainname\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;User\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;AttachStdin\u0026#34;: false,\r\u0026#34;AttachStdout\u0026#34;: false,\r\u0026#34;AttachStderr\u0026#34;: false,\r\u0026#34;Tty\u0026#34;: false,\r\u0026#34;OpenStdin\u0026#34;: false,\r\u0026#34;StdinOnce\u0026#34;: false,\r\u0026#34;Env\u0026#34;: null,\r\u0026#34;Cmd\u0026#34;: null,\r\u0026#34;Image\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;Volumes\u0026#34;: null,\r\u0026#34;WorkingDir\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;Entrypoint\u0026#34;: null,\r\u0026#34;OnBuild\u0026#34;: null,\r\u0026#34;Labels\u0026#34;: null\r},\r\u0026#34;Architecture\u0026#34;: \u0026#34;amd64\u0026#34;,\r\u0026#34;Os\u0026#34;: \u0026#34;linux\u0026#34;,\r\u0026#34;Size\u0026#34;: 180972435,\r\u0026#34;VirtualSize\u0026#34;: 180972435,\r\u0026#34;GraphDriver\u0026#34;: {\r\u0026#34;Data\u0026#34;: {\r\u0026#34;MergedDir\u0026#34;: \u0026#34;/var/lib/docker/overlay2/304718b9632fc8c6d7dc30ac15c3e0338ae6085522e38c1e77dc7ee78902bda7/merged\u0026#34;,\r\u0026#34;UpperDir\u0026#34;: \u0026#34;/var/lib/docker/overlay2/304718b9632fc8c6d7dc30ac15c3e0338ae6085522e38c1e77dc7ee78902bda7/diff\u0026#34;,\r\u0026#34;WorkDir\u0026#34;: \u0026#34;/var/lib/docker/overlay2/304718b9632fc8c6d7dc30ac15c3e0338ae6085522e38c1e77dc7ee78902bda7/work\u0026#34;\r},\r\u0026#34;Name\u0026#34;: \u0026#34;overlay2\u0026#34;\r},\r\u0026#34;RootFS\u0026#34;: {\r\u0026#34;Type\u0026#34;: \u0026#34;layers\u0026#34;,\r\u0026#34;Layers\u0026#34;: [\r\u0026#34;sha256:98dd9e2ccb30156580d099fd296c8ee19fb34fcb5ae192b82bd5d4b42c8e74a7\u0026#34;\r]\r},\r\u0026#34;Metadata\u0026#34;: {\r\u0026#34;LastTagTime\u0026#34;: \u0026#34;2018-10-06T16:49:25.417762839+09:00\u0026#34;\r}\r}\r]\rtest@ubuntu:~/Workspace/ftp-server$\r docker kill\n docker kill\ndocker kill 명령어는 컨테이너에 kill 시그널을 보낼때 사용합니다.\n\r docker kill example\ndocker kill 명령어로 컨테이너에 kill 시그널을 보낼수 있습니다.\ndocker kill $컨테이너 $컨테이너 형식으로 사용합니다.\n test@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r74c9222eed72 ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 5 seconds ago Up 2 seconds 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\rbeb0f4dd649d ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 5 seconds ago Up 4 seconds 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rtest@ubuntu:~/Workspace/ftp-server$ docker kill ssh-server\rssh-server\rtest@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r74c9222eed72 ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 10 seconds ago Up 7 seconds 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\rtest@ubuntu:~/Workspace/ftp-server$\r docker save\n docker save\ndocker save 는 컨테이너를 tar 파일로 만들때 사용합니다.\ndocker save 로 만든 파일은 docker load 로 image 를 만들수 있습니다.\n\rdocker image 를 확인 합니다. test@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r78afd709f97f ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 50 seconds ago Up 46 seconds 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\rad1316efdad9 ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 50 seconds ago Up 48 seconds 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rtest@ubuntu:~/Workspace/ftp-server$\rdocker save 명령어로 iamges 파일을 tar 파일로 압축 합니다. test@ubuntu:~/Workspace/ftp-server$ docker save -o ssh-server.tar ssh-server\rtest@ubuntu:~/Workspace/ftp-server$ docker save -o ftpd.tar ftp/pure-ftpd:14.04\rtest@ubuntu:~/Workspace/ftp-server$ ls\rdocker-compose.yml ftpd.tar pure-ftpd ssh-server ssh-server.tar\rtest@ubuntu:~/Workspace/ftp-server$\r docker load\n docker load 는 tar 파일에서 image 로 load 할때 사용합니다.\ndocker Version 에 따라 상이 하지만 load 는 일반적으로 Docker save 로 image 를 만들때 사용합니다.\ndocker export 로 만든 tar 파일의 경우 docker load 로 image 가 안만들어질수 있습니다.\n\r docker load example\n모든 컨테이너 이미지를 삭제 합니다.\ndocker save 로 tar 파일로 만든 이미지를 load 합니다.\ndocker-compose up -d 로 컨테이너를 구동하고 docker ps 로 컨테이너 작동상태를 확인 합니다.\n docker load example\ntest 내역중 docker rmi -f 명령어는 모든 image를 삭제하는 명령어 입니다.\n사용시 주의가 필요합니다.\n\rtest@ubuntu:~/Workspace/ftp-server$ docker rmi -f `docker images`\rtest@ubuntu:~/Workspace/ftp-server$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rtest@ubuntu:~/Workspace/ftp-server$\rtest@ubuntu:~/Workspace/ftp-server$ docker load -i ssh-server.tar\r8823818c4748: Loading layer [==================================================\u0026gt;] 119MB/119MB\r19d043c86cbc: Loading layer [==================================================\u0026gt;] 15.87kB/15.87kB\r883eafdbe580: Loading layer [==================================================\u0026gt;] 14.85kB/14.85kB\r4775b2f378bb: Loading layer [==================================================\u0026gt;] 5.632kB/5.632kB\r75b79e19929c: Loading layer [==================================================\u0026gt;] 3.072kB/3.072kB\r0e2fd56bd9bc: Loading layer [==================================================\u0026gt;] 100.3MB/100.3MB\r4b6dd9f5e3bd: Loading layer [==================================================\u0026gt;] 3.072kB/3.072kB\rLoaded image: ssh-server:latest\rtest@ubuntu:~/Workspace/ftp-server$ docker load -i ftpd.tar\raa4e7d478f39: Loading layer [==================================================\u0026gt;] 196.9MB/196.9MB\r6d734414ae85: Loading layer [==================================================\u0026gt;] 209.9kB/209.9kB\r52221a15d8f8: Loading layer [==================================================\u0026gt;] 7.168kB/7.168kB\r616fe7ac49b1: Loading layer [==================================================\u0026gt;] 5.632kB/5.632kB\r1ff19b5310ed: Loading layer [==================================================\u0026gt;] 3.072kB/3.072kB\r88f620d0c1bf: Loading layer [==================================================\u0026gt;] 196.9MB/196.9MB\r72bcad72424d: Loading layer [==================================================\u0026gt;] 13.94MB/13.94MB\r2bc539ce1341: Loading layer [==================================================\u0026gt;] 5.565MB/5.565MB\r7afabf3a346a: Loading layer [==================================================\u0026gt;] 10.75kB/10.75kB\r6eb26301326c: Loading layer [==================================================\u0026gt;] 4.224MB/4.224MB\r621d3211a1a4: Loading layer [==================================================\u0026gt;] 580.6kB/580.6kB\rc9c6c8bd9cf4: Loading layer [==================================================\u0026gt;] 368.1kB/368.1kB\rfe902615d94d: Loading layer [==================================================\u0026gt;] 3.072kB/3.072kB\r442305c8d227: Loading layer [==================================================\u0026gt;] 5.12kB/5.12kB\rd78b80eb41d2: Loading layer [==================================================\u0026gt;] 3.072kB/3.072kB\rLoaded image: ftp/pure-ftpd:14.04\rtest@ubuntu:~/Workspace/ftp-server$\rtest@ubuntu:~/Workspace/ftp-server$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rftp/pure-ftpd 14.04 e1194eb48168 8 minutes ago 401MB\rssh-server latest 991f4ca29796 13 minutes ago 211MB\rtest@ubuntu:~/Workspace/ftp-server$ docker-compose up -d\rCreating ftpd ... done\rCreating ftpd ...\rtest@ubuntu:~/Workspace/ftp-server$\r docker pause\n docker pause\ndocker pause 명령어는 컨테이너 내의 모든 프로세스를 일시 정지 합니다.\n\r docker pause example\ndocker pause 명령어로 ssh-server 를 일시 정지 상태로 만듭니다.\ndocker ps 명령어로 ssh-server STATUS 를 확인 합니다.\n test@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r8505aabf31e1 ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 4 minutes ago Up 4 minutes 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 4 minutes ago Up 4 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\rtest@ubuntu:~/Workspace/ftp-server$ docker pause ssh-server\rssh-server\rtest@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r8505aabf31e1 ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 4 minutes ago Up 4 minutes (Paused) 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 4 minutes ago Up 4 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\rtest@ubuntu:~/Workspace/ftp-server$\r docker unpause\n docker unpause\ndocker unpause 명령어는 컨테이너의 일시 정지 상태에서 되돌아 올때 사용합니다.\n\r docker unpause example\n test@ubuntu:~/Workspace/ftp-server$ docker unpause ssh-server\rssh-server\rtest@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r8505aabf31e1 ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 11 minutes ago Up 11 minutes 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 11 minutes ago Up 11 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\rtest@ubuntu:~/Workspace/ftp-server$\r docker port\n docker port\ndocker port 명령어는 특정 컨테이너 port 연결정보를 확인할때 사용합니다.\n\r docker port example\n test@ubuntu:~/Workspace/ftp-server$ docker port ssh-server\r22/tcp -\u0026gt; 0.0.0.0:12341\rtest@ubuntu:~/Workspace/ftp-server$\r docker ps\n docker ps\ndocker ps 명령어는 작동중인 컨테이너 확인시 사용합니다.\ndocker ps -a 옵션으로 정지중인 컨테이너 정보를 확인 할수 있습니다.\n\r docker ps example\ndocker ps 명령어로 작동중인 컨테이너를 확인 합니다.\ndocker ps -a 옵션을 사용하여 정지중인 컨테이너를 확인 합니다.\n test@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 15 minutes ago Up 14 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\rtest@ubuntu:~/Workspace/ftp-server$ docker ps -a\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r8505aabf31e1 ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 15 minutes ago Exited (0) 4 seconds ago ssh-server\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 15 minutes ago Up 15 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\rtest@ubuntu:~/Workspace/ftp-server$\r docker search\n docker search\ndocker search 명령어는 docker 이미지 저장소에서 images 검색시 사용합니다.\n\r docker search example\ndocker search 명령어를 이용하여 Apache 이미지를 검색합니다.\n test@ubuntu:~/Workspace$ docker search httpd\rNAME DESCRIPTION STARS OFFICIAL AUTOMATED\rhttpd The Apache HTTP Server Project 2039 [OK]\rhypriot/rpi-busybox-httpd Raspberry Pi compatible Docker Image with a … 44\rcentos/httpd 21 [OK]\rcentos/httpd-24-centos7 Platform for running Apache httpd 2.4 or bui… 16\rarmhf/httpd The Apache HTTP Server Project 8\rmacadmins/netboot-httpd use in combination with bruienne/bsdpy 6 [OK]\rtplatform/aws-linux-httpd24-php70 aws-linux-httpd24-php70 2 [OK]\rsalim1983hoop/httpd24 Dockerfile running apache config 2 [OK]\rtplatform/aws-linux-httpd24-php71-fpm aws-linux-httpd24-php71-fpm 1 [OK]\rtplatform/aws-linux-httpd24-php71 aws-linux-httpd24-php71 1 [OK]\repflidevelop/os-wp-httpd WP httpd 1 [OK]\rlead4good/httpd-fpm httpd server which connects via fcgi proxy h… 1 [OK]\rtrollin/httpd 0\rmanasip/httpd 0\ritsziget/httpd24 Extended HTTPD Docker image based on the off… 0 [OK]\rdockerpinata/httpd 0\rtplatform/aws-linux-2-httpd24-php72 aws-linux-2-httpd24-php72 0 [OK]\rinterlutions/httpd httpd docker image with debian-based config … 0 [OK]\rmanageiq/httpd_configmap_generator Httpd Configmap Generator 0 [OK]\rpublici/httpd httpd:latest 0 [OK]\rmprahl/s2i-angular-httpd24 An S2I image for building and running Angula… 0 [OK]\rbuzzardev/httpd Based on the official httpd image 0 [OK]\ramd64/httpd The Apache HTTP Server Project 0\rmanageiq/httpd Container with httpd, built on CentOS for Ma… 0 [OK]\rcilium/demo-httpd 0\rtest@ubuntu:~/Workspace$\r docker pull\n docker pull\ndocker pull 명령어는 docker image 저장소에서 image 를 Down 할때 사용합니다.\n\r docker pull example\nApache 마지막 버젼 이미지를 다운로드 합니다.\n test@ubuntu:~/Workspace$ docker pull httpd:latest\rlatest: Pulling from library/httpd\rf189db1b88b3: Pull complete\rba2d31d4e2e7: Pull complete\r23a65f5e3746: Pull complete\r5e8eccbd4bc6: Pull complete\r4c145eec18d8: Pull complete\rc64fd93430a0: Pull complete\rc9efc31823a2: Pull complete\rDigest: sha256:81bc5f68f994a3c7bffc5d6ecba9e4fde70488c43ee8d57846a45c4995c67a23\rStatus: Downloaded newer image for httpd:latest\rtest@ubuntu:~/Workspace$\r docker rename\n docker rename\ndocker rename 은 컨테이너 이름 변경시 사용합니다.\n\r docker rename example\ndocker ps 로 작동중인 컨테이너를 확인 합니다.\ndocker rename 명령어로 기존 ftpd 컨테이너의 이름에서 pure-ftpd 로 변경합니다.\n test@ubuntu:~/Workspace$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 24 minutes ago Up 24 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\rtest@ubuntu:~/Workspace$ docker rename ftpd pure-fptd\rtest@ubuntu:~/Workspace$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 25 minutes ago Up 25 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp pure-fptd\rtest@ubuntu:~/Workspace$\r docker start\n docker start\ndocker start 명령어는 컨테이너 실행시 사용됩니다.\n\r docker start example\n test@ubuntu:~/Workspace$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 28 minutes ago Up 28 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp pure-fptd\rtest@ubuntu:~/Workspace$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rftp/pure-ftpd 14.04 e1194eb48168 36 minutes ago 401MB\rssh-server latest 991f4ca29796 41 minutes ago 211MB\rhttpd latest dabb52744997 10 days ago 178MB\rtest@ubuntu:~/Workspace$ docker start ssh-server\rssh-server\rtest@ubuntu:~/Workspace$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r8505aabf31e1 ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 28 minutes ago Up 2 seconds 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 28 minutes ago Up 28 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp pure-fptd\rtest@ubuntu:~/Workspace$\r docker stats\n docker stats\ndocker status 명령어는 컨테이너 자원 사용량을 모니터링 할때 사용합니다.\n\r docker stats example\n test@ubuntu:~/Workspace$ docker stats ssh-server\rCONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS\r8505aabf31e1 ssh-server 0.00% 1.852MiB / 3.83GiB 0.05% 796B / 0B 0B / 0B 1\r docker stop\n docker stop\ndocker stop 명령어는 컨테이너를 정지 할때 사용합니다.\n\r docker stop example\n test@ubuntu:~/Workspace$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r8505aabf31e1 ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 32 minutes ago Up 4 minutes 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 32 minutes ago Up 32 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp pure-fptd\rtest@ubuntu:~/Workspace$ docker stop ssh-server\rssh-server\rtest@ubuntu:~/Workspace$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 32 minutes ago Up 32 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp pure-fptd\rtest@ubuntu:~/Workspace$\r docker restart\n docker restart\ndocker restart 명령어는 컨테이너 재시작시 사용합니다.\n\r docker restart example\n test@ubuntu:~/Workspace$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 32 minutes ago Up 32 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp pure-fptd\rtest@ubuntu:~/Workspace$ docker restart ssh-server\rssh-server\rtest@ubuntu:~/Workspace$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r8505aabf31e1 ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 33 minutes ago Up 1 second 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 33 minutes ago Up 33 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp pure-fptd\rtest@ubuntu:~/Workspace$\r docker rm\n docker rm\ndocker rm 명령어는 컨테이너를 삭제 할때 사용합니다.\n\r docker rm example\ndocker rm 명령어로 컨테이너를 삭제 합니다.\n test@ubuntu:~/Workspace$ docker ps -a\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r8505aabf31e1 ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 3 hours ago Exited (0) 6 seconds ago ssh-server\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 3 hours ago Up 3 hours 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp pure-fptd\rtest@ubuntu:~/Workspace$ docker rm ssh-server\rssh-server\rtest@ubuntu:~/Workspace$ docker ps -a\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rf6ead849c5db ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 3 hours ago Up 3 hours 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp pure-fptd\rtest@ubuntu:~/Workspace$\r docker rmi\n docker rmi\ndocker rmi 명령어는 도커 이미지를 삭제 합니다.\n\r docker rmi example\ndocker rmi 명령어를 이용하여 ssh-server image를 삭제 합니다.\ndocker rmi 명령어 사용시 imageID 를 사용하여 삭제합니다.\n test@ubuntu:~/Workspace$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rftp/pure-ftpd 14.04 e1194eb48168 3 hours ago 401MB\rssh-server latest 991f4ca29796 3 hours ago 211MB\rhttpd latest dabb52744997 10 days ago 178MB\rtest@ubuntu:~/Workspace$ docker rmi 991f4ca29796\rUntagged: ssh-server:latest\rDeleted: sha256:991f4ca29796aa76fe238ebdf1eb00274f067522ee7a1821f04eb51f50f2d6e3\rDeleted: sha256:a6753658624e2a0ac74366be1ee3538d04cc7322e28142e688967b0262c8e96c\rDeleted: sha256:40d8eba6ec133c7a8c7f6383efdf27fcf64c60e15cb3f4d51cb7a7ffa37c5f34\rDeleted: sha256:479fa3c649ef40ba88c3ff090b963dca3189ad1b77d9d734f8cd4d9079ea3990\rDeleted: sha256:bd78a203e965358e5e95b20c5fa4b3e3599d1cbc58d00522324e233e7cbf8554\rDeleted: sha256:f5aad241af819c313bd6f5fbfeaae096f0fc977c0806fc9b1464d2260adacd22\rDeleted: sha256:7c82a79e7c32df5cd4d9f9ec8da86396c06e6dcfa99d5e991c2e98b8e804e8d0\rDeleted: sha256:8823818c474862932702f8a920abea43b2560ddceb910d145be9ba0eb149a643\rtest@ubuntu:~/Workspace$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rftp/pure-ftpd 14.04 e1194eb48168 3 hours ago 401MB\rhttpd latest dabb52744997 10 days ago 178MB\rtest@ubuntu:~/Workspace$\r docker run\n docker run\ndocker run 명령어는 컨테이너 실행시 사용합니다.\ndocker run 명령어는 image 파일을 pull / start 까지 하여 컨테이너를 구동상태로 만듭니다.\n\r docker run example\ndocker run 으로 Apache 를 구동 합니다.\n\u0026ndash;name 옵션을 사용하여 컨테이너 이름을 web-service 로 생성 합니다.\n test@ubuntu:~/Workspace$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rtest@ubuntu:~/Workspace$ docker run --name web-service -d -p 80:80 httpd\rUnable to find image \u0026#39;httpd:latest\u0026#39; locally\rlatest: Pulling from library/httpd\rf189db1b88b3: Pull complete\rba2d31d4e2e7: Pull complete\r23a65f5e3746: Pull complete\r5e8eccbd4bc6: Pull complete\r4c145eec18d8: Pull complete\rc64fd93430a0: Pull complete\rc9efc31823a2: Pull complete\rDigest: sha256:81bc5f68f994a3c7bffc5d6ecba9e4fde70488c43ee8d57846a45c4995c67a23\rStatus: Downloaded newer image for httpd:latest\rcb3598dfd4df44c61ee0191a017030a30b7f462ab1cc7de3b7e9d1b82230f2aa\rtest@ubuntu:~/Workspace$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rcb3598dfd4df httpd \u0026#34;httpd-foreground\u0026#34; 4 seconds ago Up 2 seconds 0.0.0.0:80-\u0026gt;80/tcp web-service\rtest@ubuntu:~/Workspace$\r docker tag\n docker tag\ndocker tag 명령어는 source image 가 참조하는 target images 태그를 만듭니다.\n\r docker tag example\ndocker images 명령어로 이미지를 검색 합니다.\ndocker tag 를 이용하여 기존 httpd 이미지에 web-test 태그를 만듭니다.\n이미지를 확인 합니다.\n est@ubuntu:~/Workspace$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rhttpd latest dabb52744997 10 days ago 178MB\rtest@ubuntu:~/Workspace$ docker tag dabb52744997 web-test\rtest@ubuntu:~/Workspace$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rhttpd latest dabb52744997 10 days ago 178MB\rweb-test latest dabb52744997 10 days ago 178MB\rtest@ubuntu:~/Workspace$\r docker top\n docker top\ndocker top 명령어는 컨테이너 에서 실행중인 프로세스를 표시합니다.\n\r docker top example docker top 명령어로 web-service 에서 사용하는 프로세스를 확인 합니다.\n test@ubuntu:~$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rcb3598dfd4df httpd \u0026#34;httpd-foreground\u0026#34; 6 minutes ago Up 6 minutes 0.0.0.0:80-\u0026gt;80/tcp web-service\rtest@ubuntu:~$ docker top web-service\rUID PID PPID C STIME TTY TIME CMD\rroot 39246 39225 0 20:04 ? 00:00:00 httpd -DFOREGROUND\rdaemon 39305 39246 0 20:04 ? 00:00:00 httpd -DFOREGROUND\rdaemon 39306 39246 0 20:04 ? 00:00:00 httpd -DFOREGROUND\rdaemon 39307 39246 0 20:04 ? 00:00:00 httpd -DFOREGROUND\rtest@ubuntu:~$\r docker update\n docker update\ndocker update 명령어는 하나이상의 컨테이너 구성을 업데이트 합니다.\n\r docker update example\ndocker update 명령어를 사용하여 컨테이너가 System 리부팅시에도 자동으로 시작될수 있도록 설정 합니다.\n\u0026ndash;restart=always 옵션을 사용합니다.\n\u0026ndash;restart=no 옵션은 always 의 반대 옵션입니다.\n test@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rcb3598dfd4df httpd \u0026#34;httpd-foreground\u0026#34; 12 minutes ago Up 12 minutes 0.0.0.0:80-\u0026gt;80/tcp web-service\rtest@ubuntu:~/Workspace/ftp-server$ docker update --restart=always web-service\rweb-service\rtest@ubuntu:~/Workspace/ftp-server$\r docker version\n docker version\ndocker version 명령어는 docker version 정보를 출력합니다.\n\r docker version example\ndocker version 을 확인 합니다.\n test@ubuntu:~/Workspace$ docker version\rClient:\rVersion: 18.06.1-ce\rAPI version: 1.38\rGo version: go1.10.3\rGit commit: e68fc7a\rBuilt: Tue Aug 21 17:24:51 2018\rOS/Arch: linux/amd64\rExperimental: false\rServer:\rEngine:\rVersion: 18.06.1-ce\rAPI version: 1.38 (minimum version 1.12)\rGo version: go1.10.3\rGit commit: e68fc7a\rBuilt: Tue Aug 21 17:23:15 2018\rOS/Arch: linux/amd64\rExperimental: false\rtest@ubuntu:~/Workspace$\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/hostname/",
	"title": "Hostname",
	"tags": [],
	"description": "",
	"content": "Hostname  hostnamectl 명령어를 통하여 hostnmae 을 변경할수 있습니다.\n/etc/hostname 정상적으로 변경 되었는지 확인 합니다.  [root@localhost ~]# hostnamectl set-hostname centos7\r[root@localhost ~]# cat /etc/hostname\rcentos7\r 대문자 사용시  /etc/hostname 수정후 시스템을 재시작 합니다.\n\r[root@localhost ~]# vi /etc/hostname\rCENTOS7\r[root@localhost ~]# init 6\r"
},
{
	"uri": "https://bksanjuk.github.io/ubuntu/hostname/",
	"title": "Hostname",
	"tags": [],
	"description": "",
	"content": "Hostname  /etc/hostname 의 경우 시스템 실행시 hostname 을 고정하기 위하여 사용합니다.\nhostnamectl 명령어로 hostname 을 설정 할수 있습니다.\n  /etc/hostname 설정  test@ubuntu:~$ sudo vi /etc/hostname\rtest@ubuntu:~$ sudo hostnamectl set-hostname ubuntu-test\r"
},
{
	"uri": "https://bksanjuk.github.io/freebsd/network/",
	"title": "Network",
	"tags": [],
	"description": "",
	"content": "Network 설정  dhcp 사용시\n ifconfig_em0=\u0026#34;DHCP\u0026#34;\r Static 설정\nem0 의 경우 Nic Device 이름 입니다.\n ifconfig_em0=\u0026#34;inet 192.168.0.10 netmask 255.255.255.0\u0026#34;\rdefaultrouter=\u0026#34;192.168.0.2\u0026#34;\r network 재시작\n root@BSD11:~ # service netif restart\rStopping Network: lo0 em0.\rlo0: flags=8048\u0026lt;LOOPBACK,RUNNING,MULTICAST\u0026gt; metric 0 mtu 16384\roptions=600003\u0026lt;RXCSUM,TXCSUM,RXCSUM_IPV6,TXCSUM_IPV6\u0026gt;\rnd6 options=21\u0026lt;PERFORMNUD,AUTO_LINKLOCAL\u0026gt;\rgroups: lo\rem0: flags=8802\u0026lt;BROADCAST,SIMPLEX,MULTICAST\u0026gt; metric 0 mtu 1500\roptions=9b\u0026lt;RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM\u0026gt;\rether 00:0c:29:9b:2a:24\rhwaddr 00:0c:29:9b:2a:24\rnd6 options=29\u0026lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL\u0026gt;\rmedia: Ethernet autoselect (1000baseT \u0026lt;full-duplex\u0026gt;)\rstatus: active\rStarting Network: lo0 em0.\rlo0: flags=8049\u0026lt;UP,LOOPBACK,RUNNING,MULTICAST\u0026gt; metric 0 mtu 16384\roptions=600003\u0026lt;RXCSUM,TXCSUM,RXCSUM_IPV6,TXCSUM_IPV6\u0026gt;\rinet6 ::1 prefixlen 128\rinet6 fe80::1%lo0 prefixlen 64 scopeid 0x2\rinet 127.0.0.1 netmask 0xff000000\rnd6 options=21\u0026lt;PERFORMNUD,AUTO_LINKLOCAL\u0026gt;\rgroups: lo\rem0: flags=8843\u0026lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST\u0026gt; metric 0 mtu 1500\roptions=9b\u0026lt;RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM\u0026gt;\rether 00:0c:29:9b:2a:24\rhwaddr 00:0c:29:9b:2a:24\rinet 192.168.0.10 netmask 0xffffff00 broadcast 192.168.0.255\rnd6 options=29\u0026lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL\u0026gt;\rmedia: Ethernet autoselect (1000baseT \u0026lt;full-duplex\u0026gt;)\rstatus: active\rroot@BSD11:~ #\r"
},
{
	"uri": "https://bksanjuk.github.io/redhat-enterprise-linux/",
	"title": "RedHat Enterprise Linux",
	"tags": [],
	"description": "",
	"content": "Kernel Version Info  REHL Kernel Version  kernel version 참고\nRedHat Site 에서 kernel version 정보를 확인 할수 있습니다.\nRedHat Enterprise Linux Life-cycle\n\r RedHat Enterprise Linux 8 kernel version     Release General Availability date Kernel Version     RHEL 8.0 2019-05-07 4.18.0-80   RHEL 8.1 2019-11-05 4.18.0-147     RedHat Enterprise Linux 7 kernel version     Release General Availability date Kernel Version     RHEL 7.0 2014-06-09 3.10.0-123   RHEL 7.1 2015-03-05 3.10.0-229   RHEL 7.2 2015-11-19 3.10.0-327   RHEL 7.3 2016-11-03 3.10.0-514   RHEL 7.4 2017-07-31 3.10.0-693   RHEL 7.5 2018-04-10 3.10.0-862   RHEL 7.6 2018-10-30 3.10.0-957   RHEL 7.7 2019-08-06 3.10.0-1062     RedHat Enterprise Linux 6 kernel version     Release General Availability date Kernel Version     RHEL 6.0 2010-11-09 2.6.32-71   RHEL 6.1 2011-05-19 2.6.32-131.0.15   RHEL 6.2 2011-12-06 2.6.32-220   RHEL 6.3 2011-06-20 2.6.32-279   RHEL 6.4 2013-02-21 2.6.32-358   RHEL 6.5 2013-11-21 2.6.32-431   RHEL 6.6 2014-10-14 2.6.32-504   RHEL 6.7 2015-07-22 2.6.32-573   RHEL 6.8 2016-05-10 2.6.32-642   RHEL 6.9 2017-03-21 2.6.32-696   RHEL 6.10 2018-06-19 2.6.32-754     RedHat Enterprise Linux 5 kernel version     Release General Availability date Kernel Version     RHEL 5.0 2007-03-15 2.6.18-8   RHEL 5.1 2007-11-07 2.6.18-53   RHEL 5.2 2008-05-21 2.6.18-92   RHEL 5.3 2009-01-20 2.6.18-128   RHEL 5.4 2009-09-02 2.6.18-164   RHEL 5.5 2010-03-30 2.6.18-194   RHEL 5.6 2011-01-13 2.6.18-238   RHEL 5.7 2011-07-21 2.6.18-274   RHEL 5.8 2012-02-20 2.6.18-308   RHEL 5.9 2013-01-07 2.6.18-348   RHEL 5.10 2013-01-07 2.6.18-371   RHEL 5.11 2014-09-16 2.6.18-398     RedHat Enterprise Linux 4 kernel version     Release General Availability date Kernel Version     RHEL 4.0 2005-02-15 2.6.9-5   RHEL 4.1 2005-06-08 2.6.9-11   RHEL 4.2 2005-10-05 2.6.9-22   RHEL 4.3 2006-03-12 2.6.9-34   RHEL 4.4 2006-08-10 2.6.9-42   RHEL 4.5 2007-11-15 2.6.9-55   RHEL 4.6 2007-11-15 2.6.9-67   RHEL 4.7 2008-07-29 2.6.9-78   RHEL 4.8 2009-05-19 2.6.9-89   RHEL 4.9 2011-02-16 2.6.9-100    "
},
{
	"uri": "https://bksanjuk.github.io/linux/systemd/",
	"title": "Systemd",
	"tags": [],
	"description": "",
	"content": "Systemd  What is Systemd  Systemd는 Linux 운영 체제용 시스템 및 서비스 관리자입니다.\nSysV init 스크립트와 역 호환되도록 설계되었으며 부팅시 시스템 서비스의 병렬 시작, 데몬의 활성화 및 dependency 기반 서비스 제어 와 같은 여러 기능을 제공합니다.\n\r Run Level 변경  CentOS 7 이전 버젼의 경우 /etc/inittab 을 변경하여 Run Level 을 변경 하였지만 Systemd 이용시 Command 로 Run Level 을 변경 할수 있습니다.\n\r   Run Level Target     Run Level 0 poweroff.target   Run Level 1 rescue.target   Run Level 3 multi-user.target   Run Level 5 graphical.target   Run Level 6 reboot.target   Emergency emergency.target     Run Level 확인  [root@centos7 ~]# systemctl get-default\rmulti-user.target\r System 동작중 Run Level 변경\nRun Level 만 변경 하며 리부팅시 설정된 Run Level 로 돌아 옵니다.  [root@centos7 ~]# systemctl isolate graphical.target\r Run Level 변경  [root@centos7 ~]# systemctl set-default graphical.target\ror [root@centos7 ~]# systemctl set-default multi-user.target\r주요 systemd Command\n Daemon 활성화  [root@centos7 ~]# systemctl enable httpd\r Daemon 실행  [root@centos7 ~]# systemctl start httpd\r Daemon 재시작  [root@centos7 ~]# systemctl restart httpd\r Daemon 상태 확인  [root@centos7 ~]# systemctl status httpd\r Daemon 정지  [root@centos7 ~]# systemctl stop httpd\r Daemon 비 활성화  [root@centos7 ~]# systemctl disable httpd\r Daemon 의존성 확인  [root@centos7 ~]# systemctl list-dependencies\r Daemon 활성화 상태 확인  [root@centos7 ~]# systemctl is-enabled httpd\rdisabled\r\rDaemon mask 의 경우 활성화 비활성화 가 아닌 mask 처리를 해놓아서 unmask 하기 전까지 사용할수 없게 만듭니다.\n\r Daemon mask  [root@centos7 ~]# systemctl is-enabled httpd\rmasked\r[root@centos7 ~]# systemctl start httpd\rFailed to start httpd.service: Unit is masked.\r[root@centos7 ~]# systemctl unmask httpd\rRemoved symlink /etc/systemd/system/httpd.service.\r[root@centos7 ~]# systemctl start httpd\r Daemon 구성 확인  [root@centos7 ~]# systemctl show httpd\rType=notify\rRestart=no\rNotifyAccess=main\rRestartUSec=100ms\rTimeoutStartUSec=1min 30s\rTimeoutStopUSec=1min 30s\rWatchdogUSec=0\rWatchdogTimestampMonotonic=0\rStartLimitInterval=10000000\rStartLimitBurst=5\rStartLimitAction=none\rFailureAction=none\rPermissionsStartOnly=no\rRootDirectoryStartOnly=no\rRemainAfterExit=no\rGuessMainPID=yes\rMainPID=0\rControlPID=0\rFileDescriptorStoreMax=0\rStatusErrno=0\rResult=success\rExecMainStartTimestampMonotonic=0\rExecMainExitTimestampMonotonic=0\rlines 1-23...skipping...\r``` 중략\r Daemon 서비스 구성 확인  [root@centos7 ~]# systemctl cat httpd\r# /usr/lib/systemd/system/httpd.service\r[Unit]\rDescription=The Apache HTTP Server\rAfter=network.target remote-fs.target nss-lookup.target\rDocumentation=man:httpd(8)\rDocumentation=man:apachectl(8)\r[Service]\rType=notify\rEnvironmentFile=/etc/sysconfig/httpd\rExecStart=/usr/sbin/httpd $OPTIONS -DFOREGROUND\rExecReload=/usr/sbin/httpd $OPTIONS -k graceful\rExecStop=/bin/kill -WINCH ${MAINPID}\r# We want systemd to give httpd some time to finish gracefully, but still want\r# it to kill httpd after TimeoutStopSec if something went wrong during the\r# graceful stop. Normally, Systemd sends SIGTERM signal right after the\r# ExecStop, which would kill httpd. We are sending useless SIGCONT here to give\r# httpd time to finish.\rKillSignal=SIGCONT\rPrivateTmp=true\r[Install]\rWantedBy=multi-user.target\r\rSystemd 설정 변경시 systemctl daemon-reload 명령어를 이용하여 변경된 설정을 적용 할수 있습니다.\n\r Systemd Reload  [root@centos7 ~]# systemctl daemon-reload\r 모든 Daemon 상황 확인  [root@centos7 ~]# systemctl list-unit-files\r rescue mode  systemctl rescue 모드 실행시 아래와 같이 바로 rescue mode 로 진입 하며 콘솔에서 확인시 maintenance mode 로 빠지는것을 확인 할수 있습니다.\n\r[root@centos7 ~]# systemctl rescue\rPolicyKit daemon disconnected from the bus.\rWe are no longer a registered authentication agent.\rBroadcast message from root@centos7 on pts/0 (Wed 2018-11-14 01:49:50 KST):\rThe system is going down to rescue mode NOW!\r rescue mode 종료  [root@centos7 ~]# systemctl reboot\r"
},
{
	"uri": "https://bksanjuk.github.io/docker/dockerfile/",
	"title": "Dockerfile",
	"tags": [],
	"description": "",
	"content": "Dockerfile Dockerfile 을 만들어 컨테이너 이미지를 커스터마이징 할수 있습니다.\n예를 들어 Web개발 환경 구성 이라던지, Version 에 맞는 어플리케이션 환경을 만들때 사용합니다.\n또한 Docker-compose 와 같이 사용되기도 합니다.\nDockerfile Reference Site\n\r Dockerfile 에서 사용되는 명령어\n대소문자 상관 없이 사용할수 있지만 보통 대문자로 통일해서 사용합니다.\n    명령어 설명 명령어 설명     FROM 베이스 이미지 ADD 파일 및 디렉토리 추가   MAINTAINER 메인테이너 정보 COPY 파일 복사   RUN 스크립트 실행 또는 커맨드 실행 VOLUME 볼륨 연결   CMD 데몬 실행 ENTRYPOINT 데몬실행   LABEL 라벨 설정 USER 사용자 설정   EXPOSE 포트 연결 WORKDIR 작업 디렉토리 지정   ENV 환경변수       Dockerfile 작성\nnginx Dockerfile 을 작성합니다.\n test@ubuntu:~$ vi Dockerfile\rFROM ubuntu:16.04\rMAINTAINER user01 \u0026lt;test@anonymouse.com\u0026gt;\rRUN apt-get update\rRUN apt-get install -y nginx\rRUN echo \u0026#34;\\ndaemon off;\u0026#34; \u0026gt;\u0026gt; /etc/nginx/nginx.conf\rRUN chown -R www-data:www-data /var/lib/nginx\rVOLUME /data\rWORKDIR /etc/nginx\rCMD [\u0026#34;nginx\u0026#34;]\rEXPOSE 80\rEXPOSE 443\r 사용된 Dockerfile 명령어 정리\n    명령어 설명     FROM 베이스 이미지   MAINTAINER 메인테이너 정보   RUN 스크립트 실행 또는 커맨드 실행   VOLUME 볼륨 연결   EXPOSE 포트연결     docker build\ndocker build 명령어를 사용하여 이미지를 생성 합니다.\n test@ubuntu:~$ docker build --tag nginx-test .\rSending build context to Docker daemon 2.048kB\rStep 1/11 : FROM ubuntu:16.04\r16.04: Pulling from library/ubuntu\r3b37166ec614: Pull complete\r504facff238f: Pull complete\rebbcacd28e10: Pull complete\rc7fb3351ecad: Pull complete\r2e3debadcbf7: Pull complete\rDigest: sha256:45ddfa61744947b0b8f7f20b8de70cbcdd441a6a0532f791fd4c09f5e491a8eb\rStatus: Downloaded newer image for ubuntu:16.04\r---\u0026gt; b9e15a5d1e1a\rStep 2/11 : MAINTAINER user01 \u0026lt;test@anonymouse.com\u0026gt;\r---\u0026gt; Running in c64bfeb21305\rRemoving intermediate container c64bfeb21305\r---\u0026gt; 64b81e5d35fa\rStep 3/11 : RUN apt-get update\r---\u0026gt; Running in 20f06613ccd4\rGet:1 http://security.ubuntu.com/ubuntu xenial-security InRelease [107 kB]\rGet:2 http://archive.ubuntu.com/ubuntu xenial InRelease [247 kB]\r~중략  docker 실행\nDockerfile 을 이용하여 build 한 이미지를 실행합니다.\n\u0026ndash;name 으로 컨테이너 이름을 nginx-test 로 지정 합니다.\n-d 백그라운드 옵션을 사용 합니다.\n-p 외부:내부 포트를 연결 합니다.\n-v /root/nginx/data 디렉토리와 컨테이너 /data 디렉토리를 연결합니다.\ndocker build 로 생성한 nginx-test 이미지를 이용 합니다.\n test@ubuntu:~$ docker run --name web-service -d -p 80:80 -v /root/nginx/data:/data nginx-test\rfbb79f241122a8b2d8b461d2d4bffec1bf4a1f16a695d274aca1a6921d8d5ea2\rtest@ubuntu:~/Workspace/web-service$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rfbb79f241122 nginx-test \u0026#34;nginx\u0026#34; 2 seconds ago Up 2 seconds 0.0.0.0:80-\u0026gt;80/tcp, 443/tcp web-service\rtest@ubuntu:~$\r web page 확인\n test@ubuntu:~$ curl http://localhost\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;Welcome to nginx!\u0026lt;/title\u0026gt;\r\u0026lt;style\u0026gt;\rbody {\rwidth: 35em;\rmargin: 0 auto;\rfont-family: Tahoma, Verdana, Arial, sans-serif;\r}\r\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;Welcome to nginx!\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;If you see this page, the nginx web server is successfully installed and\rworking. Further configuration is required.\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;For online documentation and support please refer to\r\u0026lt;a href=\u0026#34;http://nginx.org/\u0026#34;\u0026gt;nginx.org\u0026lt;/a\u0026gt;.\u0026lt;br/\u0026gt;\rCommercial support is available at\r\u0026lt;a href=\u0026#34;http://nginx.com/\u0026#34;\u0026gt;nginx.com\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;\u0026lt;em\u0026gt;Thank you for using nginx.\u0026lt;/em\u0026gt;\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rtest@ubuntu:~$\r"
},
{
	"uri": "https://bksanjuk.github.io/linux/iptables/",
	"title": "IPTABLES",
	"tags": [],
	"description": "",
	"content": "iptables "
},
{
	"uri": "https://bksanjuk.github.io/centos/locale/",
	"title": "Locale",
	"tags": [],
	"description": "",
	"content": "Locale  locale 을 확인합니다.  [root@localhost ~]# locale\rLANG=en_US.UTF-8\rLC_CTYPE=\u0026#34;en_US.UTF-8\u0026#34;\rLC_NUMERIC=\u0026#34;en_US.UTF-8\u0026#34;\rLC_TIME=\u0026#34;en_US.UTF-8\u0026#34;\rLC_COLLATE=\u0026#34;en_US.UTF-8\u0026#34;\rLC_MONETARY=\u0026#34;en_US.UTF-8\u0026#34;\rLC_MESSAGES=\u0026#34;en_US.UTF-8\u0026#34;\rLC_PAPER=\u0026#34;en_US.UTF-8\u0026#34;\rLC_NAME=\u0026#34;en_US.UTF-8\u0026#34;\rLC_ADDRESS=\u0026#34;en_US.UTF-8\u0026#34;\rLC_TELEPHONE=\u0026#34;en_US.UTF-8\u0026#34;\rLC_MEASUREMENT=\u0026#34;en_US.UTF-8\u0026#34;\rLC_IDENTIFICATION=\u0026#34;en_US.UTF-8\u0026#34;\rLC_ALL=\r[root@localhost ~]#\r localectl 명령어를 이용하여 ko_KR.utf8 로 변경합니다.\n/etc/locale.conf 에 정상적으로 적용되었는지 확인 합니다.  [root@centos7 ~]# localectl set-locale LANG=ko_KR.utf8\r[root@centos7 ~]# cat /etc/locale.conf\rLANG=ko_KR.utf8\r[root@centos7 ~]#\r"
},
{
	"uri": "https://bksanjuk.github.io/ubuntu/locale/",
	"title": "Locale",
	"tags": [],
	"description": "",
	"content": "Locale  한글 language-pack 설치  test@ubuntu:~$ sudo apt-get install language-pack-ko\rlocale 수정\rtest@ubuntu:~$ sudo vi /etc/default/locale\rLANG=\u0026#34;ko_KR.UTF-8\u0026#34;\r SSH 재접속후 확인  test@ubuntu:~$ locale\rLANG=ko_KR.UTF-8\rLANGUAGE=en_US:en\rLC_CTYPE=\u0026#34;ko_KR.UTF-8\u0026#34;\rLC_NUMERIC=\u0026#34;ko_KR.UTF-8\u0026#34;\rLC_TIME=\u0026#34;ko_KR.UTF-8\u0026#34;\rLC_COLLATE=\u0026#34;ko_KR.UTF-8\u0026#34;\rLC_MONETARY=\u0026#34;ko_KR.UTF-8\u0026#34;\rLC_MESSAGES=\u0026#34;ko_KR.UTF-8\u0026#34;\rLC_PAPER=\u0026#34;ko_KR.UTF-8\u0026#34;\rLC_NAME=\u0026#34;ko_KR.UTF-8\u0026#34;\rLC_ADDRESS=\u0026#34;ko_KR.UTF-8\u0026#34;\rLC_TELEPHONE=\u0026#34;ko_KR.UTF-8\u0026#34;\rLC_MEASUREMENT=\u0026#34;ko_KR.UTF-8\u0026#34;\rLC_IDENTIFICATION=\u0026#34;ko_KR.UTF-8\u0026#34;\rLC_ALL=\rtest@ubuntu:~$\r"
},
{
	"uri": "https://bksanjuk.github.io/freebsd/ports/",
	"title": "Ports",
	"tags": [],
	"description": "",
	"content": "\rPKG 관리\nports 시스템을 이용하여 설치할 경우 portsnap 명령어를 이용하여\nports 디렉토리를 업데이트 할수 있습니다.\n일반적으로 의존성이 많이 걸리는 Web Server pkg 의 경우 ports 설치를 많이 하며\n의존성 없이 단순한 패키지를 설치 한다면 pkg 명령어를 이용하여 설치를 진행 합니다.\nports 설치의 경우 속도가 느리며 pkg 명령어의 경우 yum 과 같은 바이너리 설치 방식이라 설치가 빠릅니다.\n\r 최초 실행시  root@BSD11:~ # portsnap fetch\rroot@BSD11:~ # portsnap extract\rroot@BSD11:~ # portsnap fetch update\r 차후 실행시  root@BSD11:~ # portsnap fetch\rroot@BSD11:~ # portsnap update\rroot@BSD11:~ # portsnap fetch update\rPorts install 시 주요 옵션\n\r Ports 검색  root@BSD11:~ # whereis pkg$name\r Ports 디렉토리 검색 방법  root@BSD11:~ # cd /usr/ports/ \u0026amp;\u0026amp; make search name=lsof  Ports 설치시 기본값으로 설치  root@BSD11:~ # make -DBATCH install  의존성 패키지 옵션들을 미리 설정하여 패키지 설치  root@BSD11:~ # make config-recursive install  설정값 삭제  root@BSD11:~ # make rmconfig  의존성 패키지의 모든 설정값 삭제  root@BSD11:~ # make rmconfig-recursive pkg 명령어를 통한 패키지관리\n\r 패키지 검색  root@BSD11:~ # pkg search lsof\rlsof-4.92.b,8 Lists information about open files (similar to fstat(1))\rp5-Unix-Lsof-0.0.5_2 Unix::Lsof -- a wrapper to the Unix lsof utility\rroot@BSD11:~ #\r 패키지 설치  root@BSD11:~ # pkg install lsof\r 패키지 삭제  root@BSD11:~ # pkg remove lsof\r 설치된 패키지 확인  root@BSD11:~ # pkg info\r"
},
{
	"uri": "https://bksanjuk.github.io/ubuntu/",
	"title": "Ubuntu",
	"tags": [],
	"description": "",
	"content": "What is Ubuntu  Ubuntu 는 데비안의 데비안을 기반으로한 Linux OS (Operating System) 입니다.\nUbuntu는 Regular Release 와 LTS (Long Term Support Release) 두가지 Release 가 있습니다.\nRegular Release 는 1년주기로 Release 되며, 보안 업데이트를 9개월 동안 지원 합니다.\nLTS (Long Term Support) Release 는 2년마다 최신판이 발표되며, 보안 업데이트는 5년까지 제공됩니다.\n "
},
{
	"uri": "https://bksanjuk.github.io/docker/dockerfile-use-ssh-server/",
	"title": "Dockerfile Use SSH Server",
	"tags": [],
	"description": "",
	"content": "Dockerfile use ssh-server ssh-server 의 경우 sshfs 볼륨 연결시 유용하게 사용될수 있습니다.\nftp 서버 운영시 외부의 공유 디렉토리 연결시 사용합니다.\n\r Dockerfile 생성\nssh-server 디렉토리 생성후 Dockerfile 을 생성 합니다.\n test@ubuntu:~/Workspace/ssh-server$ vi Dockerfile\rFROM ubuntu:16.04\rMAINTAINER Sven Dowideit \u0026lt;SvenDowideit@docker.com\u0026gt;\r#RUN apt-get update \u0026amp;\u0026amp; apt-get install -y openssh-server\rRUN apt-get update \u0026amp;\u0026amp; apt-get install -y openssh-server \\\r\u0026amp;\u0026amp; mkdir /var/run/sshd \\\r\u0026amp;\u0026amp; useradd -ms /bin/bash test \\\r\u0026amp;\u0026amp; sed -ie \u0026#39;s/test:!/test:\\$6\\$pIPlIFrg\\$WZRTmOoouwD6L\\/IDgz8fw97agQjdeXticOJyayjUYwmiuNKkJE92rBtr0XDXhVE4rSi9PkWv8rtnA0rCuR6ts\\//g\u0026#39; /etc/shadow \\\r\u0026amp;\u0026amp; sed -i \u0026#39;s/PermitRootLogin prohibit-password/PermitRootLogin yes/\u0026#39; /etc/ssh/sshd_config \\\r\u0026amp;\u0026amp; sed \u0026#39;s@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g\u0026#39; -i /etc/pam.d/sshd\r#COPY data/* /.ROOT/\rENV NOTVISIBLE \u0026#34;in users profile\u0026#34;\rRUN echo \u0026#34;export VISIBLE=now\u0026#34; \u0026gt;\u0026gt; /etc/profile\rEXPOSE 22\rCMD [\u0026#34;/usr/sbin/sshd\u0026#34;, \u0026#34;-D\u0026#34;]\r userid 는 test 이며 password 는 test1234입니다.\nports 22 번 포트를 expose 하여 차후 실행시 포트를 지정 하면 됩니다.\n  Dockerfile build\n test@ubuntu:~/Workspace/ssh-server$ docker build --tag ssh-server .\r images 확인\n test@ubuntu:~/Workspace/ssh-server$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rssh-server latest 3085e59c6e99 3 minutes ago 211MB\rubuntu 16.04 b9e15a5d1e1a 3 weeks ago 115MB\rtest@ubuntu:~/Workspace/ssh-server$\r 컨테이너 실행\nssh-server 연결용 디렉토릴르 생성 합니다.\ndocker build 로 생성한 컨테이너를 실행 합니다.\n/home/test/ftp 디렉토리의 경우 sshfs 연결 목적으로 사용합니다.\n test@ubuntu:~/Workspace/ssh-server$ mkdir ~/ftp\rtest@ubuntu:~/Workspace/ssh-server$ docker run --name ssh-server -d -p 12341:22 -v /home/test/ftp:/home/test/ftp ssh-server\re8927799de7e841a151a006019fc62dc0d5daa85688ed569372fd651032f5dac\rtest@ubuntu:~/Workspace/ssh-server$\r 컨테이너 실행 확인\n test@ubuntu:~/Workspace/ssh-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\re8927799de7e ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 50 seconds ago Up 50 seconds 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rtest@ubuntu:~/Workspace/ssh-server$\r 컨테이너 접속 확인 접속포트는 12341 입니다\ntest user로 접속 하고 패스워드는 test1234 입니다.\n test@ubuntu:~$ ssh -p 12341 test@192.168.0.10\rThe authenticity of host \u0026#39;[192.168.0.10]:12341 ([192.168.0.10]:12341)\u0026#39; can\u0026#39;t be established.\rECDSA key fingerprint is SHA256:c1Z28xljDnrQnEHOFHYyxwZyoehNTWqdAef9wpwmRDc.\rAre you sure you want to continue connecting (yes/no)? yes\rWarning: Permanently added \u0026#39;[192.168.0.10]:12341\u0026#39; (ECDSA) to the list of known hosts.\rtest@192.168.0.10\u0026#39;s password:\rWelcome to Ubuntu 16.04.5 LTS (GNU/Linux 4.15.0-34-generic x86_64)\r* Documentation: https://help.ubuntu.com\r* Management: https://landscape.canonical.com\r* Support: https://ubuntu.com/advantage\rThe programs included with the Ubuntu system are free software;\rthe exact distribution terms for each program are described in the\rindividual files in /usr/share/doc/*/copyright.\rUbuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by\rapplicable law.\rtest@e8927799de7e:~$\r 추가적인 부분은 Dockerfile 을 수정 하여 커스터마이징 하여 사용하시면 됩니다.\n "
},
{
	"uri": "https://bksanjuk.github.io/freebsd/",
	"title": "Freebsd",
	"tags": [],
	"description": "",
	"content": "What is FreeBSD  FreeBSD는 기능, 속도 및 안정성에 중점을 둔 다양한 플랫폼용 운영 체제입니다.\n버클리 대학 (University of California, Berkeley)에서 개발 된 UNIX® 버전 인 BSD에서 파생되었습니다.\n "
},
{
	"uri": "https://bksanjuk.github.io/ubuntu/repository/",
	"title": "Repository",
	"tags": [],
	"description": "",
	"content": "저장소 변경  daum 또는 jaist 저장소 로 변경 하여 사용하실수 있습니다.\n test@ubuntu:~$ sudi vi /etc/apt/sources.list\r:%s/kr.archive.ubuntu.com/ftp.daum.net/g\ror :%s/us.archive.ubuntu.com/ftp.jaist.ac.jp/g\r저장소 확인\rtest@ubuntu:~$ sudo apt-get update\r"
},
{
	"uri": "https://bksanjuk.github.io/linux/selinux/",
	"title": "SELINUX",
	"tags": [],
	"description": "",
	"content": "SELINUX "
},
{
	"uri": "https://bksanjuk.github.io/centos/time-zone/",
	"title": "Time Zone",
	"tags": [],
	"description": "",
	"content": "Time zone  time zone 확인  [root@centos7 ~]# timedatectl\rLocal time: 토 2018-09-29 09:34:53 KST\rUniversal time: 토 2018-09-29 00:34:53 UTC\rRTC time: 토 2018-09-29 00:34:53\rTime zone: Asia/Seoul (KST, +0900)\rNTP enabled: n/a\rNTP synchronized: no\rRTC in local TZ: no\rDST active: n/a\r[root@centos7 ~]#\r America/Toronto Time zone 으로 변경  [root@centos7 ~]# timedatectl list-timezones |grep -i toronto\rAmerica/Toronto\r[root@centos7 ~]# timedatectl set-timezone America/Toronto\r적용한 time zone 확인\r[root@centos7 ~]# timedatectl\rLocal time: 금 2018-09-28 20:38:12 EDT\rUniversal time: 토 2018-09-29 00:38:12 UTC\rRTC time: 토 2018-09-29 00:38:12\rTime zone: America/Toronto (EDT, -0400)\rNTP enabled: n/a\rNTP synchronized: no\rRTC in local TZ: no\rDST active: yes\rLast DST change: DST began at\r일 2018-03-11 01:59:59 EST\r일 2018-03-11 03:00:00 EDT\rNext DST change: DST ends (the clock jumps one hour backwards) at\r일 2018-11-04 01:59:59 EDT\r일 2018-11-04 01:00:00 EST\r[root@centos7 ~]#\r"
},
{
	"uri": "https://bksanjuk.github.io/freebsd/user-management/",
	"title": "User Management",
	"tags": [],
	"description": "",
	"content": "User 관리  User 관리 명령어     명령어 설명 비고      adduser 사용자 추가를 위한 명령어    rmuser 사용자 제거를 위한 명령어    chpass 사용자 데이터베이스 정보를 변경하기 위한 명령어    passwd 사용자 암호 변경을 위한 명령어    pw 사용자 계정추가시 사용하는 명령어      adduser 명령어\n사용자 추가시 사용합니다.\nadduser 명령어를 이용하여 user 생성시 모든 설정을 할수 있습니다.\n root@BSD11:~ # adduser Username: test_user Full name: test Uid (Leave empty for default): Login group [test_user]: Login group is test_user. Invite test_user into other groups? []: Login class [default]: Shell (sh csh tcsh nologin) [sh]: Home directory [/home/test_user]: Home directory permissions (Leave empty for default): Use password-based authentication? [yes]: Use an empty password? (yes/no) [no]: Use a random password? (yes/no) [no]: Enter password: Enter password again: Lock out the account after creation? [no]: Username : test_user Password : ***** Full Name : test Uid : 1002 Class : Groups : test_user Home : /home/test_user Home Mode : Shell : /bin/sh Locked : no OK? (yes/no): yes adduser: INFO: Successfully added (test_user) to the user database. Add another user? (yes/no): no Goodbye!  rmuser 명령어\n사용자 삭제시 사용합니다.\n root@BSD11:~ # rmuser test_user\rMatching password entry:\rtest_user:$6$WPASTTtStxedNphn$6w/5DRC7qffdq1FHtyJOK.RQB5D0Qwwi8BSJYlwZ1eMFkEz/Ao7B/vSoNbuY5.IsQZsOV6oy8v2c.6n7tjw8Z/:1002:1002::0:0:test:/home/test_user:/bin/sh\rIs this the entry you wish to remove? yes\rRemove user\u0026#39;s home directory (/home/test_user)? yes\rRemoving user (test_user): mailspool home passwd.\r chpass 명령어\n사용자 데이터베이스 정보변경시 사용합니다.\n사용자의 홈디렉토리 shell 변경시 사용합니다.\n root@BSD11:~ # chpass\r#Changing user information for root.\rLogin: root\rPassword: $6$Q1bGeweEzkm6tyUZ$uInwQ2Jir8CSz7MIOzbubRFLQtGti24.Qg9raUb..Ha6PZ4VqK\r6gf.OhaBMrcNVd3S1VfH4FHyIQn6XjPtNY/0\rUid [#]: 0\rGid [# or name]: 0\rChange [month day year]:\rExpire [month day year]:\rClass:\rHome directory: /root\rShell: /bin/csh\rFull Name: Charlie \u0026amp;\rOffice Location:\rOffice Phone:\rHome Phone:\rOther information:\r passwd 명령어 user passwd 를 변경 합니다.\npw 명령어로 user 를 생성시 passwd 를 생성할수 있습니다.\n root@BSD11:~ # passwd test_user\rChanging local password for test_user\rNew Password:\rRetype New Password:\rroot@BSD11:~ #\r pw 명령어\nuser 생성 및 삭제시 사용하고 구룹설정을 할수 있습니다.\ntest 유저를 생성하고 wheel 구룹에 추가 합니다.\n-m 옵션은 홈디렉토리를 생성하는 옵션 입니다.\npw user add test 시 홈디렉토리가 생성되지 않습니다.\n root@BSD11:~ # pw user add test -g wheel -m\rpw user add test root@BSD11:~ # pw user add test1\rroot@BSD11:~ # ls -al /home\rlrwxr-xr-x 1 root wheel 8 Sep 15 05:35 /home -\u0026gt; usr/home\rroot@BSD11:~ # ls -al /home/\rtotal 18\rdrwxr-xr-x 3 root wheel 3 Sep 23 03:32 .\rdrwxr-xr-x 16 root wheel 16 Sep 15 05:34 ..\rdrwxr-xr-x 2 test wheel 11 Sep 23 03:33 test\rroot@BSD11:~ #\rtest 유저를 삭제 합니다. root@BSD11:~ # pw user del test\rtest 유저를 wheel group 에 추가 합니다. root@BSD11:~ # pw user mod test -g wheel\rtest 유저의 홈디렉토리를 /home/test 로 설정 합니다. root@BSD11:~ # pw user mod test -m test\r"
},
{
	"uri": "https://bksanjuk.github.io/freebsd/disk-management/",
	"title": "Disk Management",
	"tags": [],
	"description": "",
	"content": "Disk 관리 UFS 기준으로 작성 하였습니다.\nZFS 의 경우 차후 별도로 작성하도록 하겠습니다.\n\r/dev/ 디렉토리를 확인하여 신규로 추가된 하드디스크를 확인 합니다. root@BSD11:~ # ls -al /dev/da*\rcrw-r----- 1 root operator 0x4e Sep 23 06:20 /dev/da0\rcrw-r----- 1 root operator 0x54 Sep 23 06:20 /dev/da0s1\rcrw-r----- 1 root operator 0x56 Sep 23 06:20 /dev/da0s1a\rcrw-r----- 1 root operator 0x57 Sep 23 06:20 /dev/da0s1b\rcrw-r----- 1 root operator 0x49 Sep 23 06:24 /dev/da1\rroot@BSD11:~ # 추가된 디스크 사이즈 확인\rroot@BSD11:~ # diskinfo -v da1\rda1\r512 # sectorsize\r10737418240 # mediasize in bytes (10G)\r20971520 # mediasize in sectors\r0 # stripesize\r0 # stripeoffset\r1305 # Cylinders according to firmware.\r255 # Heads according to firmware.\r63 # Sectors according to firmware.\r# Disk ident.\rNot_Zoned # Zone Mode\rroot@BSD11:~ #\r기존디스크 확인\rroot@BSD11:~ # gpart show\r=\u0026gt; 63 41942977 da0 MBR (20G)\r63 1 - free - (512B)\r64 41942975 1 freebsd [active] (20G)\r41943039 1 - free - (512B)\r=\u0026gt; 0 41942975 da0s1 BSD (20G)\r0 39845888 1 freebsd-ufs (19G)\r39845888 2097086 2 freebsd-swap (1.0G)\r41942974 1 - free - (512B)\rroot@BSD11:~ #\r da1 Device gpt 파티션 설정\n 신규로 추가된 da1 Device 를 gpt 파티션 테이블로 설정 합니다. root@BSD11:~ # gpart create -s GPT da1\rda1 created\rroot@BSD11:~ # gpart show da1\r=\u0026gt; 40 20971440 da1 GPT (10G)\r40 20971440 - free - (10G)\rroot@BSD11:~ #\r 용량지정 없이 모든 용량을 지정할경우\n root@BSD11:~ # gpart add -t freebsd-ufs da1\rda1p1 added\rroot@BSD11:~ # gpart show da1\r=\u0026gt; 40 20971440 da1 GPT (10G)\r40 20971440 1 freebsd-ufs (10G)\rroot@BSD11:~ #\r** 별도의 용량을 지정할 경우 ** root@BSD11:~ # gpart add -t freebsd-ufs -s 5G da1\r File System 포멧\n newfs 명령어로 파일시스템을 포멧 합니다. oot@BSD11:~ # newfs -U /dev/da1p1\r/dev/da1p1: 10240.0MB (20971440 sectors) block size 32768, fragment size 4096\rusing 17 cylinder groups of 626.09MB, 20035 blks, 80256 inodes.\rwith soft updates\rsuper-block backups (for fsck_ffs -b #) at:\r192, 1282432, 2564672, 3846912, 5129152, 6411392, 7693632, 8975872, 10258112, 11540352, 12822592, 14104832, 15387072, 16669312, 17951552, 19233792, 20516032\rroot@BSD11:~ #\r 마운트 포인트 생성 및 /etc/fstab 등록\n root@BSD11:~ # mkdir /data\rroot@BSD11:~ # vi /etc/fstab\r/dev/da1p1 /data ufs rw 0 0\r마운트 확인\rroot@BSD11:~ # df -h\rFilesystem Size Used Avail Capacity Mounted on\r/dev/da0s1a 18G 2.7G 14G 16% /\rdevfs 1.0K 1.0K 0B 100% /dev\r/dev/da1p1 9.7G 8.0K 8.9G 0% /data\rroot@BSD11:~ #\r Disk 제거방법\n root@BSD11:~ # umount /data\rroot@BSD11:~ # vi /etc/fstab\r/dev/da1p1 /data ufs rw 0 0 // 라인제거\rDisk 확인\rroot@BSD11:~ # gpart show\r=\u0026gt; 63 41942977 da0 MBR (20G)\r63 1 - free - (512B)\r64 41942975 1 freebsd [active] (20G)\r41943039 1 - free - (512B)\r=\u0026gt; 0 41942975 da0s1 BSD (20G)\r0 39845888 1 freebsd-ufs (19G)\r39845888 2097086 2 freebsd-swap (1.0G)\r41942974 1 - free - (512B)\r=\u0026gt; 40 20971440 da1 GPT (10G)\r40 20971440 1 freebsd-ufs (10G)\rroot@BSD11:~ #\rda1 GPT (10G) 디스크를 삭제 합니다. root@BSD11:~ # gpart delete -i1 da1\rda1p1 deleted\rroot@BSD11:~ # gpart destroy -F da1\rda1 destroyed\rroot@BSD11:~ #\r"
},
{
	"uri": "https://bksanjuk.github.io/docker/",
	"title": "Docker",
	"tags": [],
	"description": "",
	"content": "What is Docker Docker는 컨테이너를 사용하여 응용 프로그램을 보다 쉽고 빠르게 배포하고 실행할수 있도록 설계된 도구 입니다.\n가상화된 시스템을 동일하게 구성하기 위해서는 vm 복제 또는 Backup / Recovery 과정이 필요 합니다.\nDocker 의 이용할 경우 code 만으로 시스템을 구성 하고 동일한 개발환경을 손쉽게 작성 / 배포 할수 있습니다.\n좀더 많은 정보는 Docker Site 에서 확인 가능 합니다.\n\r Docker 의경우 두가지 에디션이 있습니다.\nCE 버젼의 경우 커뮤니티 버젼 이며 EE 버젼의 경우 별도의 License 가 필요합니다.\nDocker CE 버젼 : 커뮤니티 에디션 Docker CE\nDocker EE 버젼 : 엔터프라이즈 에디션 Docker EE\n "
},
{
	"uri": "https://bksanjuk.github.io/docker/docker-compose/",
	"title": "Docker Compose",
	"tags": [],
	"description": "",
	"content": "What is dcoker-compose docker 의 경우 컨테이너 하나로 application 등의 컨테이너를 올리기에는 적합하나 여러대의\n컨테이너 구성시 어려움이 있습니다. Docker-compose 를 이용하면 여러대의 컨테이너를 하나로 관리 할수 있습니다.\n\rDocker-compose install  curl 명령어를 통하여 docker-compose 설치를 진행 합니다.\n설치가 끝난후 사용을 위하여 chmod 로 실행권한을 추가 합니다.\nDocker-compose Version\nInstall 참고 Docker site\n test@ubuntu-docs:~$ sudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose\rtest@ubuntu-docs:~$ sudo chmod +x /usr/local/bin/docker-compose\rHow to use Docker-compose  Docker-compose Web-service\ndocker-compose 를 이용하여 web-service 컨테이너를 구성 합니다.\nNginx 1.10.2 + pip71 + Mysql 5.7 컨테이너가 구성 되었습니다.\n  Web-service 디렉토리 구조\n test@ubuntu:~/Workspace/web-service$ tree\r.\r├── docker-compose.yml\r├── nginx\r│ └── conf\r│ └── default.conf\r└── php\r├── Dockerfile\r└── conf\r└── php.ini\r4 directories, 4 files\rtest@ubuntu:~/Workspace/web-service$\r docker-compose.yml 파일 작성\n test@ubuntu:~/Workspace/web-service$ vi docker-compose.yml\rversion: \u0026#39;2\u0026#39;\rservices:\rmysql:\rimage: mysql:5.7\rports:\r- 3306:3306\rvolumes:\r- ./mysql:/var/lib/mysql\rrestart: always\renvironment:\rMYSQL_ROOT_PASSWORD: root\rMYSQL_USER: docker\rMYSQL_PASSWORD: docker\rMYSQL_DATABASE: docker\rnginx:\rimage: nginx:1.10.2\rports:\r- 80:80\rrestart: always\rvolumes:\r- ./nginx/conf:/etc/nginx/conf.d\r- ~/Projects:/code\rlinks:\r- php\rdepends_on:\r- php\rphp:\rbuild: php\rexpose:\r- 9000\rrestart: always\rvolumes:\r- ./php/conf/php.ini:/usr/local/etc/php/conf.d/custom.ini\r- ~/Projects:/code\rlinks:\r- mysql\rtest@ubuntu:~/Workspace/web-service$\r docker-compose version 은 2 Version 을 이용합니다.\nversion정보\nservices 항목의 경우 컨테이너를 지정 할수 있습니다.\nmysql , nginx , php 컨테이너로 구성이 되어 있습니다.\n  mysql 필드 설명\n mysql:\rimage: mysql:5.7\rports:\r- 3306:3306\rvolumes:\r- ./mysql:/var/lib/mysql\rrestart: always\renvironment:\rMYSQL_ROOT_PASSWORD: root\rMYSQL_USER: docker\rMYSQL_PASSWORD: docker\rMYSQL_DATABASE: docker\r   명령어 설명     image mysql 5.7 버젼을 사용합니다.   ports 3306 외부포트와 내부포트를 연결 합니다.   volumes Database 저장 위치 설정을 위하여 Volume 을 연결 합니다.   restart 리부팅시에도 자동으로 실행합니다.   environment MYSQL_ROOT_PASSWORD mysql 관리자 password 를 설정합니다.   environment MYSQL_USER user 를 생성합니다.   environment MYSQL_PASSWORD user password 를 설정합니다.   environment MYSQL_DATABASE user 데이터베이스를 생성합니다.     nginx 필드 설명\n nginx:\rimage: nginx:1.10.2\rports:\r- 80:80\rrestart: always\rvolumes:\r- ./nginx/conf:/etc/nginx/conf.d\r- ~/Projects:/code\rlinks:\r- php\rdepends_on:\r- php\r   명령어 설명     image nginx 1.10.2 버젼을 사용합니다.   ports web-page 포트 80 포트를 외부 내부를 연결 합니다.   restart 리부팅시에도 자동으로 실행합니다.   volumes nginx 설정디렉토리 conf.d 디렉토리를 연결하고 Webpage 디렉토리를 연결합니다.   links php 컨테이너와 연결합니다.   depends_on php 서비스간 종속성유지를 위하여 사용합니다.     php 필드 설명\n php:\rbuild: php\rexpose:\r- 9000\rrestart: always\rvolumes:\r- ./php/conf/php.ini:/usr/local/etc/php/conf.d/custom.ini\r- ~/Projects:/code\rlinks:\r- mysql\r   명령어 설명     build Dockerfile 을 이용하여 build 합니다.   expose 외부 ports 접속이 아닌 내부 컨테이너 접속을 위하여 사용합니다.   restart 리부팅시에도 자동으로 실행합니다.   volumes custom.ini 설정 파일 및 php code 디렉토리를 연결 합니다.   links mysql 컨테이너와 연결합니다.    Docker-compose version 3 참고 사항\nlinks 옵션의 경우 docer-compose version 3 에서는 더이상 사용하지 않을것으로 보입니다.\n자세한 내용은 Docker site 에서 확인 가능 합니다.\n\r Link to containers in another service. Either specify both the service name and a link alias (SERVICE:ALIAS), or just the service name.\n The \u0026ndash;link flag is a legacy feature of Docker. It may eventually be removed. Unless you absolutely need to continue using it, we recommend that you use user-defined networks to facilitate communication between two containers instead of using \u0026ndash;link. One feature that user-defined networks do not support that you can do with \u0026ndash;link is sharing environmental variables between containers. However, you can use other mechanisms such as volumes to share environment variables between containers in a more controlled way.\n\r nginx default.conf 파일 생성\n test@ubuntu:~/Workspace/web-service$ vi nginx/conf/default.conf\rserver {\rlisten 80 default_server;\rserver_name localhost _;\rindex index.php index.html index.htm;\rroot /code;\rlocation / {\rtry_files $uri $uri/ /index.php?$query_string;\rautoindex on;\r}\rlocation ~ \\.php$ {\rtry_files $uri /index.php =404;\rfastcgi_split_path_info ^(.+\\.php)(/.+)$;\rfastcgi_pass php:9000;\rfastcgi_index index.php;\rfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\rinclude fastcgi_params;\r}\r}\r* php/Dockerfile 생성 test@ubuntu:~/Workspace/web-service$ vi php/Dockerfile\rFROM php:7.1-fpm\rRUN apt-get update\r# Some basic extensions\rRUN docker-php-ext-install -j$(nproc) json mbstring opcache pdo pdo_mysql mysqli\r# Curl\rRUN apt-get install -y libcurl4-openssl-dev\rRUN docker-php-ext-install -j$(nproc) curl\r# GD\rRUN apt-get install -y libpng-dev libjpeg-dev\rRUN docker-php-ext-install -j$(nproc) gd\r# Intl\rRUN apt-get install -y libicu-dev\rRUN docker-php-ext-install -j$(nproc) intl\r* php.ini 파일 생성 ```no-highlight\rtest@ubuntu:~/Workspace/web-service$ vi php/conf/php.ini\rdisplay_errors = On\rdisplay_startup_errors = On\rdefault_charset = \u0026#34;UTF-8\u0026#34;\rhtml_errors = On\rdate.timezone = Asia/Seoul\r docker-compose 실행\ndocker-compose.yml 파일이 있는 위치에서 실행을 해야 합니다.\n test@ubuntu:~/Workspace/web-service$ docker-compose up -d --build\r 컨테이너 동작 확인\n test@ubuntu:~/Workspace/web-service$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rbd2fb3813e0c nginx:1.10.2 \u0026#34;nginx -g \u0026#39;daemon of…\u0026#34; 9 minutes ago Up 9 minutes 0.0.0.0:80-\u0026gt;80/tcp, 443/tcp webservice_nginx_1\ra3769c7d61b8 webservice_php \u0026#34;docker-php-entrypoi…\u0026#34; 9 minutes ago Up 9 minutes 9000/tcp webservice_php_1\r42e79bd2f599 mysql:5.7 \u0026#34;docker-entrypoint.s…\u0026#34; 9 minutes ago Up 9 minutes 0.0.0.0:3306-\u0026gt;3306/tcp, 33060/tcp webservice_mysql_1\rtest@ubuntu:~/Workspace/web-service$\r phpinfo 페이지 생성\n일반적으로 docker-compose 구성시 디렉토리별 서비스를 생성하여 컨테이너를 관리 합니다.\n특별한경우가 없다면 ~/workspace/service-name 별로 컨테이너를 생성하여 관리 합니다.\n test@ubuntu:~/Workspace/web-service$ sudo vi ~/Projects/info.php\r\u0026lt;?php phpinfo(); ?\u0026gt;\r web page 확인\n Dockerfile use ssh-server ssh-server 의 경우 sshfs 볼륨 연결시 유용하게 사용될수 있습니다.\nftp 서버 운영시 외부의 공유 디렉토리 연결시 사용합니다.\n\r Dockerfile 생성\nssh-server 디렉토리 생성후 Dockerfile 을 생성 합니다.\n test@ubuntu:~/Workspace/ssh-server$ vi Dockerfile\rFROM ubuntu:16.04\rMAINTAINER Sven Dowideit \u0026lt;SvenDowideit@docker.com\u0026gt;\r#RUN apt-get update \u0026amp;\u0026amp; apt-get install -y openssh-server\rRUN apt-get update \u0026amp;\u0026amp; apt-get install -y openssh-server \\\r\u0026amp;\u0026amp; mkdir /var/run/sshd \\\r\u0026amp;\u0026amp; useradd -ms /bin/bash test \\\r\u0026amp;\u0026amp; sed -ie \u0026#39;s/test:!/test:\\$6\\$pIPlIFrg\\$WZRTmOoouwD6L\\/IDgz8fw97agQjdeXticOJyayjUYwmiuNKkJE92rBtr0XDXhVE4rSi9PkWv8rtnA0rCuR6ts\\//g\u0026#39; /etc/shadow \\\r\u0026amp;\u0026amp; sed -i \u0026#39;s/PermitRootLogin prohibit-password/PermitRootLogin yes/\u0026#39; /etc/ssh/sshd_config \\\r\u0026amp;\u0026amp; sed \u0026#39;s@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g\u0026#39; -i /etc/pam.d/sshd\r#COPY data/* /.ROOT/\rENV NOTVISIBLE \u0026#34;in users profile\u0026#34;\rRUN echo \u0026#34;export VISIBLE=now\u0026#34; \u0026gt;\u0026gt; /etc/profile\rEXPOSE 22\rCMD [\u0026#34;/usr/sbin/sshd\u0026#34;, \u0026#34;-D\u0026#34;]\r userid 는 test 이며 password 는 test1234입니다.\nports 22 번 포트를 expose 하여 차후 실행시 포트를 지정 하면 됩니다.\n  Dockerfile build\n test@ubuntu:~/Workspace/ssh-server$ docker build --tag ssh-server .\r images 확인\n test@ubuntu:~/Workspace/ssh-server$ docker images\rREPOSITORY TAG IMAGE ID CREATED SIZE\rssh-server latest 3085e59c6e99 3 minutes ago 211MB\rubuntu 16.04 b9e15a5d1e1a 3 weeks ago 115MB\rtest@ubuntu:~/Workspace/ssh-server$\r 컨테이너 실행\nssh-server 연결용 디렉토릴르 생성 합니다.\ndocker build 로 생성한 컨테이너를 실행 합니다.\n/home/test/ftp 디렉토리의 경우 sshfs 연결 목적으로 사용합니다.\n test@ubuntu:~/Workspace/ssh-server$ mkdir ~/ftp\rtest@ubuntu:~/Workspace/ssh-server$ docker run --name ssh-server -d -p 12341:22 -v /home/test/ftp:/home/test/ftp ssh-server\re8927799de7e841a151a006019fc62dc0d5daa85688ed569372fd651032f5dac\rtest@ubuntu:~/Workspace/ssh-server$\r 컨테이너 실행 확인\n test@ubuntu:~/Workspace/ssh-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\re8927799de7e ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 50 seconds ago Up 50 seconds 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rtest@ubuntu:~/Workspace/ssh-server$\r 컨테이너 접속 확인 접속포트는 12341 입니다\ntest user로 접속 하고 패스워드는 test1234 입니다.\n test@ubuntu:~$ ssh -p 12341 test@192.168.0.10\rThe authenticity of host \u0026#39;[192.168.0.10]:12341 ([192.168.0.10]:12341)\u0026#39; can\u0026#39;t be established.\rECDSA key fingerprint is SHA256:c1Z28xljDnrQnEHOFHYyxwZyoehNTWqdAef9wpwmRDc.\rAre you sure you want to continue connecting (yes/no)? yes\rWarning: Permanently added \u0026#39;[192.168.0.10]:12341\u0026#39; (ECDSA) to the list of known hosts.\rtest@192.168.0.10\u0026#39;s password:\rWelcome to Ubuntu 16.04.5 LTS (GNU/Linux 4.15.0-34-generic x86_64)\r* Documentation: https://help.ubuntu.com\r* Management: https://landscape.canonical.com\r* Support: https://ubuntu.com/advantage\rThe programs included with the Ubuntu system are free software;\rthe exact distribution terms for each program are described in the\rindividual files in /usr/share/doc/*/copyright.\rUbuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by\rapplicable law.\rtest@e8927799de7e:~$\r 추가적인 부분은 Dockerfile 을 수정 하여 커스터마이징 하여 사용하시면 됩니다.\n Docker-compose use pure-ftpd ssh-server Docker-compose 를 이용하여 pure-ftpd , sshfs 용 ssh-server 를 설정 합니다.\n\r참고사항\npure-ftpd 컨테이너의 경우 Test시 문제가 있어 ubuntu Version 을 14.04 를 사용합니다.\n\rvmware 사용시 NAT 환경이 아닌 Bridge 모드로 해야 합니다.\nNAT 환경 이용시 ftp에 접속을 못할수 있습니다.\n\r ftp-server 디렉토리 구조\n test@ubuntu:~/Workspace/ftp-server$ tree\r.\r├── docker-compose.yml\r├── pure-ftpd\r│ ├── Dockerfile\r│ └── pureftpd.passwd\r└── ssh-server\r└── Dockerfile\r2 directories, 4 files\rtest@ubuntu:~/Workspace/ftp-server$\r ftp-date 디렉토리를 생성 합니다.\n test@ubuntu:~/Workspace/ftp-server$ sudo mkdir /ftp-data\r docker-compose.yml 파일생성\n test@ubuntu:~/Workspace/ftp-server$ vi docker-compose.yml\rversion: \u0026#39;3\u0026#39;\rservices:\rpure-ftpd:\rbuild:\rcontext: pure-ftpd\rimage: ftp/pure-ftpd:14.04\rcontainer_name: ftpd\rports:\r- \u0026#34;21:21\u0026#34;\r- \u0026#34;20000-20099:20000-20099\u0026#34;\rvolumes:\r- \u0026#34;/ftp-data:/home/ftp\u0026#34;\rrestart: always\rssh-server:\rbuild:\rcontext: ssh-server\rimage: ssh-server\rcontainer_name: ssh-server\rports:\r- \u0026#34;12341:22\u0026#34;\rvolumes:\r- \u0026#34;/ftp-data:/home/test/ftp:ro\u0026#34;\rrestart: always\r ftp 연결 포트의 경우 20000~20099 번까지 포트를 맵핑 합니다.\nsshfs 사용 포트의 경우 12341 을 사용 합니다.\n  ssh-server Dockerfile 생성\ntest 유저를 생성하고 test1234 로 패스워드를 지정합니다.\n test@ubuntu:~/Workspace/ftp-server$ vi ssh-server/Dockerfile\rFROM ubuntu:16.04\rMAINTAINER Sven Dowideit \u0026lt;SvenDowideit@docker.com\u0026gt;\r#RUN apt-get update \u0026amp;\u0026amp; apt-get install -y openssh-server\rRUN apt-get update \u0026amp;\u0026amp; apt-get install -y openssh-server \\\r\u0026amp;\u0026amp; mkdir /var/run/sshd \\\r\u0026amp;\u0026amp; useradd -ms /bin/bash test \\\r\u0026amp;\u0026amp; sed -ie \u0026#39;s/test:!/test:\\$6\\$pIPlIFrg\\$WZRTmOoouwD6L\\/IDgz8fw97agQjdeXticOJyayjUYwmiuNKkJE92rBtr0XDXhVE4rSi9PkWv8rtnA0rCuR6ts\\//g\u0026#39; /etc/shadow \\\r\u0026amp;\u0026amp; sed -i \u0026#39;s/PermitRootLogin prohibit-password/PermitRootLogin yes/\u0026#39; /etc/ssh/sshd_config \\\r\u0026amp;\u0026amp; sed \u0026#39;s@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g\u0026#39; -i /etc/pam.d/sshd\r#COPY data/* /.ROOT/\rENV NOTVISIBLE \u0026#34;in users profile\u0026#34;\rRUN echo \u0026#34;export VISIBLE=now\u0026#34; \u0026gt;\u0026gt; /etc/profile\rEXPOSE 22\rCMD [\u0026#34;/usr/sbin/sshd\u0026#34;, \u0026#34;-D\u0026#34;]\r pure-ftpd Dockerfile 생성\n test@ubuntu:~/Workspace/ftp-server$ vi pure-ftpd/Dockerfile\rFROM ubuntu:14.04\rMAINTAINER test@test\rRUN apt-get update \u0026amp;\u0026amp; \\\rapt-get install pure-ftpd openssl libpam-dev libcap2-dev libldap2-dev libmysqlclient-dev libmysqlclient15-dev libpq-dev libssl-dev po-debconf dpkg-dev debhelper -y\rRUN mkdir /tmp/pure-ftpd/ \u0026amp;\u0026amp; \\\rcd /tmp/pure-ftpd/ \u0026amp;\u0026amp; \\\rapt-get source pure-ftpd \u0026amp;\u0026amp; \\\rcd pure-ftpd-* \u0026amp;\u0026amp; \\\rsed -i \u0026#39;/^optflags=/ s/$/ --without-capabilities/g\u0026#39; ./debian/rules \u0026amp;\u0026amp; \\\rdpkg-buildpackage -b -uc\rRUN dpkg -i /tmp/pure-ftpd/pure-ftpd-common*.deb\rRUN apt-get -y install openbsd-inetd\rRUN dpkg -i /tmp/pure-ftpd/pure-ftpd_*.deb\rRUN apt-mark hold pure-ftpd pure-ftpd-common\rRUN cd /etc/pure-ftpd \u0026amp;\u0026amp; \\\radduser ftpd-data \u0026amp;\u0026amp; \\\rmkdir /home/ftp \u0026amp;\u0026amp; \\\rchown ftpd-data:ftpd-data -R /home/ftp \u0026amp;\u0026amp; \\\recho yes \u0026gt; ./conf/ChrootEveryone \u0026amp;\u0026amp; \\\recho yes \u0026gt; ./conf/DontResolve \u0026amp;\u0026amp; \\\recho yes \u0026gt; ./conf/NoChmod \u0026amp;\u0026amp; \\\recho yes \u0026gt; ./conf/ProhibitDotFilesWrite \u0026amp;\u0026amp; \\\recho yes \u0026gt; ./conf/CustomerProof \u0026amp;\u0026amp; \\\recho \u0026#39;20000 20099\u0026#39; \u0026gt; ./conf/PassivePortRange \u0026amp;\u0026amp; \\\recho \u0026#39;,21\u0026#39; \u0026gt; ./conf/Bind \u0026amp;\u0026amp; \\\recho \u0026#39;2\u0026#39; \u0026gt; ./conf/TLS \u0026amp;\u0026amp; \\\ropenssl req -x509 -nodes -days 1825 -newkey rsa:2048 -keyout /etc/ssl/private/pure-ftpd.pem -out /etc/ssl/private/pure-ftpd.pem -subj \u0026#34;/C=KR/ST=SouthKorea/L=Seoul/O=test.com/OU=IT Department/CN=ftp.test.com\u0026#34;\rADD pureftpd.passwd /etc/pure-ftpd/\rRUN pure-pw mkdb\rRUN ln -sf /dev/stdout /var/log/pure-ftpd/transfer.log\rCMD /usr/sbin/pure-ftpd -l puredb:/etc/pure-ftpd/pureftpd.pdb -x -u 30 -H -S ,21 -O clf:/var/log/pure-ftpd/transfer.log -Z -A -p 20000:20099 -E -R -8 UTF-8 -Y 2\rEXPOSE 21/tcp 20000-20099/tcp\r pureftpd.passwd 파일생성\nftp user 생성시 pureftpd.passwd 파일을 수정하시면 됩니다.\nUser test / Password test1234 생성\n test@ubuntu:~/Workspace/ftp-server$ vi pure-ftpd/pureftpd.passwd\rtest:$1$P4DB31/0$iIPf8.YJ6XP6k1zsmQtJq1:1000:1000::/home/ftp/./::::::::::::\r 컨테이너 실행\npure-ftpd 컨테이너와 ssh-server 컨테이너를 실행 합니다.\n test@ubuntu:~/Workspace/ftp-server$ docker-compose up -d --build\rtest@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r02161765e92c ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 21 seconds ago Up 17 seconds 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\rf3e224722db6 ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 21 seconds ago Up 20 seconds 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\rtest@ubuntu:~/Workspace/ftp-server$\r FTP Client 에서 접속\n스크린샷에서는 192.x.x.x 로 되어 있지만 NAT 환경에서는 정상적으로 접속이 안됩니다.\nftp 접속시 인증서가 나오며 이후 세션에서 항상 신뢰를 체크 합니다.\n  FTP upload Tesst\nupload Test 를 진행합니다.\n  FTP User 생성\nftp 유저를 생성하기 위해서는 컨테이너로 접속후 생성 해야 합니다.\n test@ubuntu:~/Workspace/ftp-server$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r8497bf8410c5 ssh-server \u0026#34;/usr/sbin/sshd -D\u0026#34; 7 minutes ago Up 7 minutes 0.0.0.0:12341-\u0026gt;22/tcp ssh-server\r039250964c0f ftp/pure-ftpd:14.04 \u0026#34;/bin/sh -c \u0026#39;/usr/sb…\u0026#34; 7 minutes ago Up 7 minutes 0.0.0.0:21-\u0026gt;21/tcp, 0.0.0.0:20000-20099-\u0026gt;20000-20099/tcp ftpd\rtest@ubuntu:~/Workspace/ftp-server$ docker exec -it 039250964c0f /bin/bash\rroot@039250964c0f:/# pure-pw useradd test1 -u ftpd-data -g ftpd-data -d /home/ftp\rPassword:\rEnter it again:\rroot@039250964c0f:/# pure-pw mkdb\rroot@039250964c0f:/# cat /etc/pure-ftpd/pureftpd.passwd\rtest:$1$P4DB31/0$iIPf8.YJ6XP6k1zsmQtJq1:1000:1000::/home/ftp/./::::::::::::\rtest1:$1$RlCsZSv0$CrDL8oyE5eJG0/uUKhAyi/:1000:1000::/home/ftp/./::::::::::::\rroot@039250964c0f:/#\r pureftpd.passwd 파일 수정\n컨테이너 내부로 접속하여 유저를 생성하여도 컨테이너 재시작시 해당 설정이 없어 지며,\npure-ftpd 디렉토리의 passwd 파일을 수정해 줘야 합니다.\n test@ubuntu:~/Workspace/ftp-server$ cat pure-ftpd/pureftpd.passwd\rtest:$1$P4DB31/0$iIPf8.YJ6XP6k1zsmQtJq1:1000:1000::/home/ftp/./::::::::::::\rtest@ubuntu:~/Workspace/ftp-server$\rDocker-compose use Web-service How to use Docker-compose 내용의 경우 일반적으로 사용하는 내용에 대하여 설명한 내용입니다.\n실제로 Web-service 운영한다면 docker-compose.yml 파일 디렉토리 아래 web page 디렉토리가 있는것이 관리상\n편합니다. database 의 경우 동일 합니다.\n\r 설정내용 설명은 How to use Dcoker-compose 를 참고 해 주세요.\n설정 디렉토리 /home/test/Workspace/Web-service Workspcae/Web-service 디렉토리를 생성 합니다.\n  Web-service 디렉토리 구조\n test@ubuntu:~/Workspace/Web-service$ tree\r.\r├── docker-compose.yml\r├── mariadb\r├── nginx\r│ └── conf\r│ └── default.conf\r├── php\r│ ├── Dockerfile\r│ └── conf\r│ └── php.ini\r└── www\r6 directories, 4 files\rtest@ubuntu:~/Workspace/Web-service$\r docker-compose.yml 파일\n test@ubuntu:~/Workspace/Web-service$ vi docker-compose.yml\rversion: \u0026#39;2\u0026#39;\rservices:\rmariadb:\rimage: mariadb:10.1\rports:\r- 3306:3306\rvolumes:\r- ./mariadb:/var/lib/mysql\rrestart: always\renvironment:\rMYSQL_ROOT_PASSWORD: root\rMYSQL_USER: docker\rMYSQL_PASSWORD: docker\rMYSQL_DATABASE: docker\rnginx:\rimage: nginx:latest\rports:\r- 80:80\rrestart: always\rvolumes:\r- ./nginx/conf:/etc/nginx/conf.d\r- ./www:/code\rlinks:\r- php\rdepends_on:\r- php\rphp:\rbuild: php\rexpose:\r- 9000\rrestart: always\rvolumes:\r- ./php/conf/php.ini:/usr/local/etc/php/conf.d/custom.ini\r- ./www:/code\rlinks:\r- mariadb\rtest@ubuntu:~/Workspace/Web-service$\r Nginx default.conf 파일\n test@ubuntu:~/Workspace/Web-service$ cat nginx/conf/default.conf\rserver {\rlisten 80 default_server;\rserver_name localhost _;\rindex index.php index.html index.htm;\rroot /code;\rlocation / {\rtry_files $uri $uri/ /index.php?$query_string;\rautoindex on;\r}\rlocation ~ \\.php$ {\rtry_files $uri /index.php =404;\rfastcgi_split_path_info ^(.+\\.php)(/.+)$;\rfastcgi_pass php:9000;\rfastcgi_index index.php;\rfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\rinclude fastcgi_params;\r}\r}\rtest@ubuntu:~/Workspace/Web-service$\r php/Dockerfile 파일\n test@ubuntu:~/Workspace/Web-service$ vi php/Dockerfile\rFROM php:7.1-fpm\rRUN apt-get update\r# Some basic extensions\rRUN docker-php-ext-install -j$(nproc) json mbstring opcache pdo pdo_mysql mysqli\r# Curl\rRUN apt-get install -y libcurl4-openssl-dev\rRUN docker-php-ext-install -j$(nproc) curl\r# GD\rRUN apt-get install -y libpng-dev libjpeg-dev\rRUN docker-php-ext-install -j$(nproc) gd\r# Intl\rRUN apt-get install -y libicu-dev\rRUN docker-php-ext-install -j$(nproc) intl\rtest@ubuntu:~/Workspace/Web-service$\r php/conf/php.ini 파일\n test@ubuntu:~/Workspace/Web-service$ vi php/conf/php.ini\rdisplay_errors = On\rdisplay_startup_errors = On\rdefault_charset = \u0026#34;UTF-8\u0026#34;\rhtml_errors = On\rdate.timezone = Asia/Seoul\rtest@ubuntu:~/Workspace/Web-service$\r docker-compose 실행\n test@ubuntu:~/Workspace/Web-service$ docker-compose up -d --build\r 컨테이너 상태 확인\n test@ubuntu:~/Workspace/Web-service$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r47c7a871f381 nginx:latest \u0026#34;nginx -g \u0026#39;daemon of…\u0026#34; 18 seconds ago Up 15 seconds 0.0.0.0:80-\u0026gt;80/tcp webservice_nginx_1\r39cb0e8c6212 webservice_php \u0026#34;docker-php-entrypoi…\u0026#34; 19 seconds ago Up 17 seconds 9000/tcp webservice_php_1\rdcbfcbc4cb03 mariadb:10.1 \u0026#34;docker-entrypoint.s…\u0026#34; 20 seconds ago Up 18 seconds 0.0.0.0:3306-\u0026gt;3306/tcp webservice_mariadb_1\rtest@ubuntu:~/Workspace/Web-service$\r phpinfo 확인\n test@ubuntu:~/Workspace/Web-service$ vi www/test.php\r\u0026lt;?php phpinfo(); ?\u0026gt;\r web page 확인\n Wordpress 사용시 참고\nDB 사용시 외부에서 사용하지 않는다면 expose 만 하여 사용합니다.\nWordpress 사용시 컨테이너 이름으로 host를 지정하여 사용하시면 됩니다.\n\rtest@ubuntu:~/Workspace/Web-service$ cat docker-compose.yml\rversion: \u0026#39;2\u0026#39;\rservices:\rmariadb:\rimage: mariadb:10.1\rexpose:\r- 3306\r~ 중략\r 컨테이너 이름 확인\n test@ubuntu:~/Workspace/Web-service$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r9cdfc297133f nginx:latest \u0026#34;nginx -g \u0026#39;daemon of…\u0026#34; 5 minutes ago Up 5 minutes 0.0.0.0:80-\u0026gt;80/tcp webservice_nginx_1\r774f8cfc9466 webservice_php \u0026#34;docker-php-entrypoi…\u0026#34; 5 minutes ago Up 5 minutes 9000/tcp webservice_php_1\ra4327cb937ac mariadb:10.1 \u0026#34;docker-entrypoint.s…\u0026#34; 5 minutes ago Up 5 minutes 3306/tcp webservice_mariadb_1\rtest@ubuntu:~/Workspace/Web-service$\r Wordpress 입력 참고\n데이터베이스 호스트 : webservice_mariadb_1 (DB 컨테이너 이름을 입력합니다.)\n  mariadb 명령어 참고\ndocker-compose 에서 mariadb expose 설정을 하였을시에는 직접 컨테이너로 접속하여 db 를 생성해야 합니다.\nenvironment 에서 사용할 유저/데이터 베이스를 미리 생성하여도 됩니다.\n test@ubuntu:~/Workspace/Web-service$ mysql -h127.0.0.1 -uroot -p\rEnter password:\rWelcome to the MySQL monitor. Commands end with ; or \\g.\rYour MySQL connection id is 24\rServer version: 5.5.5-10.1.36-MariaDB-1~bionic mariadb.org binary distribution\rCopyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.\rOracle is a registered trademark of Oracle Corporation and/or its\raffiliates. Other names may be trademarks of their respective\rowners.\rType \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement.\rmysql\u0026gt; use mysql;\rReading table information for completion of table and column names\rYou can turn off this feature to get a quicker startup with -A\rDatabase changed\rmysql\u0026gt; create database wp;\rQuery OK, 1 row affected (0.00 sec)\rmysql\u0026gt; GRANT ALL ON wp.* TO \u0026#39;wp\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;password\u0026#39;;\rQuery OK, 0 rows affected (0.00 sec)\rmysql\u0026gt; flush privileges;\rQuery OK, 0 rows affected (0.00 sec)\rmysql\u0026gt; quit;\rBye\rdatabase 삭제 mysql\u0026gt; drop database wp;\r유저 확인 mysql\u0026gt; SELECT User, Host FROM mysql.user WHERE User=\u0026#39;wp\u0026#39; AND Host=\u0026#39;%\u0026#39;;\r+------+------+\r| User | Host |\r+------+------+\r| wp | % |\r+------+------+\r1 row in set (0.00 sec)\r유저 삭제 mysql\u0026gt; DROP USER \u0026#39;wp\u0026#39;@\u0026#39;%\u0026#39;;\rQuery OK, 0 rows affected (0.00 sec)\rmysql\u0026gt; SELECT User, Host FROM mysql.user WHERE User=\u0026#39;wp\u0026#39; AND Host=\u0026#39;%\u0026#39;;\rEmpty set (0.00 sec)\rmysql\u0026gt;\rDocker-compose use nginx-proxy nginx-proxy\nDocker 로 여러대의 Web-Service 운영시 nginx-proxy 를 이용하여\nMulti Web-Service 를 구성할수 있습니다.\n\r nginx-proxy multi-wordpress site\n구성정보\ndraw.io\n  nginx-proxy docker-compose.yml 파일생성\n test@ubuntu:~/Workspace/nginx-proxy$ vi docker-compose.yml\r## notice ## $ docker network create nginx-proxy\rversion: \u0026#34;3\u0026#34;\rservices:\rnginx-proxy:\rimage: jwilder/nginx-proxy\rcontainer_name: nginx-proxy\rports:\r- \u0026#34;80:80\u0026#34;\rvolumes:\r- /var/run/docker.sock:/tmp/docker.sock:ro\rrestart: always\rnetworks:\rdefault:\rexternal:\rname: nginx-proxy\r docker network 생성\n test@ubuntu:~/Workspace/nginx-proxy$ docker network create nginx-proxy\r3cbc08acdd956c3e86378114c1958949ffa01515ffbb27ad124240692d3f3f46\rtest@ubuntu:~/Workspace/nginx-proxy$ docker network ls\rNETWORK ID NAME DRIVER SCOPE\r5d0bb683d2e4 bridge bridge local\r50afc3109ff3 ftpserver_default bridge local\rf479dbb309b5 host host local\r3cbc08acdd95 nginx-proxy bridge local\rea229616bede none null local\r5ba40d49b37c webservice_default bridge local\rtest@ubuntu:~/Workspace/nginx-proxy$\r nginx-proxy 컨테이너 실행\n test@ubuntu:~/Workspace/nginx-proxy$ docker-compose up -d --build\r blog1.test.com 컨테이너 생성\nblog1.test.com 컨테이너 에서 사용할 디렉토리 및 docker-compose.yml 파일을 생성합니다.\nVIRTUAL_HOST 부분에서 사용할 도메인을 설정 합니다.\n test@ubuntu:~/Workspace$ mkdir -p blog1/web-data\rtest@ubuntu:~/Workspace$ mkdir -p blog1/db-data\rtest@ubuntu:~/Workspace/blog1$ vi docker-compose.yml\rversion: \u0026#34;3\u0026#34;\rservices:\rdb:\rimage: mariadb\rvolumes:\r- ./db-data:/var/lib/mysql\rrestart: always\renvironment:\rMYSQL_ROOT_PASSWORD: test1234\rMYSQL_DATABASE: wordpress\rMYSQL_USER: wordpress\rMYSQL_PASSWORD: test1234\rcontainer_name: wp_blog_db\rwordpress:\rimage: wordpress:latest\rexpose:\r- 80\rrestart: always\rvolumes:\r- ./web-data:/var/www/html\renvironment:\rVIRTUAL_HOST: blog1.test.com\rWORDPRESS_DB_HOST: db:3306\rWORDPRESS_DB_USER: wordpress\rWORDPRESS_DB_PASSWORD: test1234\rcontainer_name: wp_blog\rnetworks:\rdefault:\rexternal:\rname: nginx-proxy\r blog1.test.com 컨테이너 실행\n test@ubuntu:~/Workspace/blog1$ docker-compose up -d --build\r web page 확인\nblog1.test.com 으로 접속 합니다.\n  blog2.test.com 컨테이너 생성\nblog2.test.com 컨테이너 에서 사용할 디렉토리 및 docker-compose.yml 파일을 생성합니다.\n test@ubuntu:~/Workspace$ mkdir -p blog2/db-data\rtest@ubuntu:~/Workspace$ mkdir -p blog2/web-data\rtest@ubuntu:~/Workspace$ cd blog2/\rtest@ubuntu:~/Workspace/blog2$ vi docker-compose.yml\rversion: \u0026#34;3\u0026#34;\rservices:\rdb2:\rimage: mariadb\rvolumes:\r- ./db-data:/var/lib/mysql\rrestart: always\renvironment:\rMYSQL_ROOT_PASSWORD: test1234\rMYSQL_DATABASE: wordpress\rMYSQL_USER: wordpress\rMYSQL_PASSWORD: test1234\rcontainer_name: wp_blog_db2\rwordpress2:\rimage: wordpress:latest\rexpose:\r- 80\rrestart: always\rvolumes:\r- ./web-data:/var/www/html\renvironment:\rVIRTUAL_HOST: blog2.test.com\rWORDPRESS_DB_HOST: db2:3306\rWORDPRESS_DB_USER: wordpress\rWORDPRESS_DB_PASSWORD: test1234\rcontainer_name: wp_blog2\rnetworks:\rdefault:\rexternal:\rname: nginx-proxy\r blog2.test.com 컨테이너 실행\n test@ubuntu:~/Workspace/blog2$ docker-compose up -d --build\r web page 확인\n Docker-compose use nginx-proxy add nginx-web nginx-web Service\nnginx-web Service 를 추가 하는 방법을 기술 합니다.\nmariadb 컨테이너 생성시 설정파일을 추가 하여 컨테이너를 구동하도록 설정 하였습니다.\n\r nginx-web Service 에서 사용할 디렉토리를 생성 합니다.\n test@ubuntu:~/Workspace$ mkdir web1\rtest@ubuntu:~/Workspace$ cd web1/\rtest@ubuntu:~/Workspace/web1$ mkdir www-data\rtest@ubuntu:~/Workspace/web1$ mkdir -p mariadb/db-data\rtest@ubuntu:~/Workspace/web1$ mkdir -p nginx/conf\rtest@ubuntu:~/Workspace/web1$ mkdir -p php/conf\r docker-compose.yml 파일을 생성합니다.\n test@ubuntu:~/Workspace/web1$ vi docker-compose.yml\rversion: \u0026#39;2\u0026#39;\rservices:\rmysql:\rimage: mariadb:10.3.1\rvolumes:\r- ./mariadb/db-data/:/var/lib/mysql\r- ./mariadb/my.cnf:/etc/mysql/mariadb.conf.d/custom.cnf\rrestart: always\renvironment:\rMYSQL_ROOT_PASSWORD: root\rMYSQL_USER: docker\rMYSQL_PASSWORD: docker\rMYSQL_DATABASE: docker\rcontainer_name: mariadb-www\rnginx-www:\rimage: nginx:latest\rrestart: always\rvolumes:\r- ./nginx/conf:/etc/nginx/conf.d\r- ./www-data:/www\renvironment:\r- VIRTUAL_HOST=www.test.com\rcontainer_name: nginx-www\rphp:\rbuild: php\rexpose:\r- 9000\rrestart: always\rvolumes:\r- ./php/conf/php.ini:/usr/local/etc/php/conf.d/custom.ini\r- ./www-data:/www\rcontainer_name: php-www\rnetworks:\rdefault:\rexternal:\rname: nginx-proxy\r nginx/conf/default.conf 파일 생성\n test@ubuntu:~/Workspace/web1$ vi nginx/conf/default.conf\rserver {\rlisten 80 default_server;\rserver_name localhost _;\rindex index.php index.html index.htm;\rroot /www;\rlocation / {\rtry_files $uri $uri/ /index.php?$query_string;\rautoindex on;\r}\rlocation ~ \\.php$ {\rtry_files $uri /index.php =404;\rfastcgi_split_path_info ^(.+\\.php)(/.+)$;\rfastcgi_pass php:9000;\rfastcgi_index index.php;\rfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\rinclude fastcgi_params;\r}\r}\r php/Dockerfile 파일 생성\n test@ubuntu:~/Workspace/web1$ vi php/Dockerfile\rFROM php:7.1-fpm\rRUN apt-get update\r# Some basic extensions\rRUN docker-php-ext-install -j$(nproc) json mbstring opcache pdo pdo_mysql mysqli\r# Curl\rRUN apt-get install -y libcurl4-openssl-dev\rRUN docker-php-ext-install -j$(nproc) curl\r# GD\rRUN apt-get install -y libpng-dev libjpeg-dev\rRUN docker-php-ext-install -j$(nproc) gd\r# Intl\rRUN apt-get install -y libicu-dev\rRUN docker-php-ext-install -j$(nproc) intl\r php/conf/php.ini 파일 생성\n test@ubuntu:~/Workspace/web1$ vi php/conf/php.ini\rdisplay_errors = On\rdisplay_startup_errors = On\rdefault_charset = \u0026#34;UTF-8\u0026#34;\rhtml_errors = On\rdate.timezone = Asia/Seoul\r mariadb/my.cnf 파일 생성\n test@ubuntu:~/Workspace/web1$ vi mariadb/my.cnf\r# MariaDB database server configuration file.\r#\r# You can copy this file to one of:\r# - \u0026#34;/etc/mysql/my.cnf\u0026#34; to set global options,\r# - \u0026#34;~/.my.cnf\u0026#34; to set user-specific options.\r#\r# One can use all long options that the program supports.\r# Run program with --help to get a list of available options and with\r# --print-defaults to see which it would actually understand and use.\r#\r# For explanations see\r# http://dev.mysql.com/doc/mysql/en/server-system-variables.html\r# This will be passed to all mysql clients\r# It has been reported that passwords should be enclosed with ticks/quotes\r# escpecially if they contain \u0026#34;#\u0026#34; chars...\r# Remember to edit /etc/mysql/debian.cnf when changing the socket location.\r[client]\rport = 3306\rsocket = /var/run/mysqld/mysqld.sock\rdefault-character-set = utf8mb4\r# Here is entries for some specific programs\r# The following values assume you have at least 32M ram\r# This was formally known as [safe_mysqld]. Both versions are currently parsed.\r[mysqld_safe]\rsocket = /var/run/mysqld/mysqld.sock\rnice = 0\r[mysqld]\r#\r# * Basic Settings\r#\r#user = mysql\rpid-file = /var/run/mysqld/mysqld.pid\rsocket = /var/run/mysqld/mysqld.sock\rport = 3306\rbasedir = /usr\rdatadir = /var/lib/mysql\rtmpdir = /tmp\rlc_messages_dir = /usr/share/mysql\rlc_messages = en_US\rskip-external-locking\r#\r# Instead of skip-networking the default is now to listen only on\r# localhost which is more compatible and is not less secure.\r#bind-address = 127.0.0.1\r#\r# * Fine Tuning\r#\rmax_connections = 100\rconnect_timeout = 5\rwait_timeout = 600\rmax_allowed_packet = 16M\rthread_cache_size = 128\rsort_buffer_size = 4M\rbulk_insert_buffer_size = 16M\rtmp_table_size = 32M\rmax_heap_table_size = 32M\r#\r# * MyISAM\r#\r# This replaces the startup script and checks MyISAM tables if needed\r# the first time they are touched. On error, make copy and try a repair.\rmyisam_recover_options = BACKUP\rkey_buffer_size = 128M\r#open-files-limit = 2000\rtable_open_cache = 400\rmyisam_sort_buffer_size = 512M\rconcurrent_insert = 2\rread_buffer_size = 2M\rread_rnd_buffer_size = 1M\r#\r# * Query Cache Configuration\r#\r# Cache only tiny result sets, so we can fit more in the query cache.\rquery_cache_limit = 128K\rquery_cache_size = 64M\r# for more write intensive setups, set to DEMAND or OFF\r#query_cache_type = DEMAND\r#\r# * Logging and Replication\r#\r# Both location gets rotated by the cronjob.\r# Be aware that this log type is a performance killer.\r# As of 5.1 you can enable the log at runtime!\r#general_log_file = /var/log/mysql/mysql.log\r#general_log = 1\r#\r# Error logging goes to syslog due to /etc/mysql/conf.d/mysqld_safe_syslog.cnf.\r#\r# we do want to know about network errors and such\r#log_warnings = 2\r#\r# Enable the slow query log to see queries with especially long duration\r#slow_query_log[={0|1}]\rslow_query_log_file = /var/log/mysql/mariadb-slow.log\rlong_query_time = 10\r#log_slow_rate_limit = 1000\r#log_slow_verbosity = query_plan\r#log-queries-not-using-indexes\r#log_slow_admin_statements\r#\r# The following can be used as easy to replay backup logs or for replication.\r# note: if you are setting up a replication slave, see README.Debian about\r# other settings you may need to change.\r#server-id = 1\r#report_host = master1\r#auto_increment_increment = 2\r#auto_increment_offset = 1\r#log_bin = /var/log/mysql/mariadb-bin\r#log_bin_index = /var/log/mysql/mariadb-bin.index\r# not fab for performance, but safer\r#sync_binlog = 1\rexpire_logs_days = 10\rmax_binlog_size = 100M\r# slaves\r#relay_log = /var/log/mysql/relay-bin\r#relay_log_index = /var/log/mysql/relay-bin.index\r#relay_log_info_file = /var/log/mysql/relay-bin.info\r#log_slave_updates\r#read_only\r#\r# If applications support it, this stricter sql_mode prevents some\r# mistakes like inserting invalid dates etc.\r#sql_mode = NO_ENGINE_SUBSTITUTION,TRADITIONAL\r#\r# * InnoDB\r#\r# InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.\r# Read the manual for more InnoDB related options. There are many!\rdefault_storage_engine = InnoDB\r# you can\u0026#39;t just change log file size, requires special procedure\r#innodb_log_file_size = 50M\rinnodb_buffer_pool_size = 256M\rinnodb_log_buffer_size = 8M\rinnodb_file_per_table = 1\rinnodb_open_files = 400\rinnodb_io_capacity = 400\rinnodb_flush_method = O_DIRECT\r#\r# * Security Features\r#\r# Read the manual, too, if you want chroot!\r# chroot = /var/lib/mysql/\r#\r# For generating SSL certificates I recommend the OpenSSL GUI \u0026#34;tinyca\u0026#34;.\r#\r# ssl-ca=/etc/mysql/cacert.pem\r# ssl-cert=/etc/mysql/server-cert.pem\r# ssl-key=/etc/mysql/server-key.pem\rcharacter-set-server = utf8mb4\rcollation-server = utf8mb4_unicode_ci\r#\r# * Galera-related settings\r#\r[galera]\r# Mandatory settings\r#wsrep_on=ON\r#wsrep_provider=\r#wsrep_cluster_address=\r#binlog_format=row\r#default_storage_engine=InnoDB\r#innodb_autoinc_lock_mode=2\r#\r# Allow server to accept connections on all interfaces.\r#\r#bind-address=0.0.0.0\r#\r# Optional setting\r#wsrep_slave_threads=1\r#innodb_flush_log_at_trx_commit=0\r[mysqldump]\rquick\rquote-names\rmax_allowed_packet = 16M\r[mysql]\r#no-auto-rehash # faster start of mysql but no tab completion\r[isamchk]\rkey_buffer = 16M\r#\r# * IMPORTANT: Additional settings that can override those from this file!\r# The files must end with \u0026#39;.cnf\u0026#39;, otherwise they\u0026#39;ll be ignored.\r#\r!includedir /etc/mysql/conf.d/\r docker-compose 실행\n test@ubuntu:~/Workspace/web1$ docker-compose up -d --build\r phpinfo 테스트\n test@ubuntu:~/Workspace/web1$ vi www-data/test.php\r\u0026lt;?php phpinfo(); ?\u0026gt;\r web page 확인\n  그누보드 설치 테스트\nHost 정보 입력시 컨테이너 이름 으로 설정해야 합니다.\nHost mariadb-www\n  관리자 로그인후 확인\n "
},
{
	"uri": "https://bksanjuk.github.io/centos/network/",
	"title": "Network",
	"tags": [],
	"description": "",
	"content": "Network  nemeserver 설정  [root@centos7 ~]# vi /etc/resolv.conf\r# Generated by NetworkManager\rnameserver 8.8.8.8\r Network 설정 디렉토리는 다음과 같습니다.\n/etc/sysconfig/network-scripts  CentOS / RHEL 의 경우 6 Version 이후 부터는 Bios name 을 사용하기 때문에 eth 등이 아닌 ens / em 등으로 나올수 있습니다.\n\r DHCP 를 사용할 경우  [root@centos7 ~]# cd /etc/sysconfig/network-scripts/\r[root@centos7 network-scripts]# vi ifcfg-ens33\rTYPE=Ethernet\rBOOTPROTO=dhcp\rNAME=ens33\rUUID=adb348b2-1e95-4ebb-ad63-dcbc4e7a7e19\rDEVICE=ens33\rONBOOT=yes\r Static 을 사용할경우  TYPE=Ethernet\rBOOTPROTO=static\rNAME=ens33\rUUID=adb348b2-1e95-4ebb-ad63-dcbc4e7a7e19\rDEVICE=ens33\rONBOOT=yes\rIPADDR=192.168.0.10\rNETMASK=255.255.255.0\rGATEWAY=192.168.0.2\r Bonding 구성  Network Nic 2중화를 위한 구성이며 2개의 Nic 로 구성합니다.\n아래 구성의 경우 ifcfg-ens33 + ifcfg-ens34 bond0 구성 방법에 대한 소개 입니다.\nifcfg-ensX file 을 bond0 파일로 Copy 합니다.\n\r[root@centos7 ~]# cd /etc/sysconfig/network-scripts/\r[root@centos7 network-scripts]# cp ifcfg-ens33 ifcfg-bond0\rBOOTPROTO=static\rDEVICE=bond0\rONBOOT=yes\rIPADDR=192.168.0.10\rNETMASK=255.255.255.0\rGATEWAY=192.168.0.2\rUSERCTL=no\rBONDING_OPTS=\u0026#34;mode=1 miimon=100\u0026#34;\r\rbond0 파일의 경우 IP주소 및 Netmask 값 gateway 값을 가지고 있습니다.\nSystem 에서는 Nic Device 의 경우 Gateway 가 하나만 설정 되어야 합니다.\nRouting 테이블 추가의 경우 다른 페이지에서 소개하겠습니다.\n\r ifcfg-ens33 파일 수정  [root@centos7 network-scripts]# vi ifcfg-ens33\rTYPE=Ethernet\rBOOTPROTO=none\rDEVICE=ens33\rONBOOT=yes\rUSERCTL=no\rMASTER=bond0\rSLAVE=yes\r ifcfg-ens34 파일 수정  [root@centos7 network-scripts]# vi ifcfg-ens34\rBOOTPROTO=none\rDEVICE=ens34\rONBOOT=yes\rUSERCTL=no\rMASTER=bond0\rSLAVE=yes\r network daemon 을 재시작 합니다.  [root@centos7 ~]# systemctl restart network\r bonding 구성정보 확인  [root@centos7 ~]# systemctl restart network\r[root@centos7 ~]# cat /proc/net/bonding/bond0\rEthernet Channel Bonding Driver: v3.7.1 (April 27, 2011)\rBonding Mode: fault-tolerance (active-backup)\rPrimary Slave: None\rCurrently Active Slave: ens33\rMII Status: up\rMII Polling Interval (ms): 100\rUp Delay (ms): 0\rDown Delay (ms): 0\rSlave Interface: ens33\rMII Status: up\rSpeed: 1000 Mbps\rDuplex: full\rLink Failure Count: 0\rPermanent HW addr: 00:0c:29:c4:d1:c9\rSlave queue ID: 0\rSlave Interface: ens34\rMII Status: up\rSpeed: 1000 Mbps\rDuplex: full\rLink Failure Count: 0\rPermanent HW addr: 00:0c:29:c4:d1:d3\r\rbonding 구성정보 확인시 ens33 , ens34 로 bond0 이 구성된 것을 확인할수 있습니다.\nActive 된 Nic 의 경우 Currently Active Slave 에서 확인 할수 있습니다.\n\r"
},
{
	"uri": "https://bksanjuk.github.io/ubuntu/network/",
	"title": "Network",
	"tags": [],
	"description": "",
	"content": "Network  Static 설정\n(고정ip 를 사용하기 위한 설정)\n test@ubuntu:~$ sudo vi /etc/network/interfaces\r# The primary network interface\rauto ens33\riface ens33 inet static\raddress 192.168.0.10\rnetmask 255.255.255.0\rgateway 192.168.0.2\rdns-nameservers 192.168.0.2\r DHCP 설정\n(유동ip y를 사용하기 위한 설정)\n # The primary network interface\rauto ens33\riface ens33 inet dhcp\r Network Service Restart\n변경된 network 설정을 적용하기위해서는 networking Daemon 의 재시작이 필요합니다.\n test@ubuntu:~$ sudo systemctl restart networking\r"
},
{
	"uri": "https://bksanjuk.github.io/freebsd/x-windows/",
	"title": "X Windows",
	"tags": [],
	"description": "",
	"content": "X-window "
},
{
	"uri": "https://bksanjuk.github.io/ubuntu/apt-command/",
	"title": "Apt Command",
	"tags": [],
	"description": "",
	"content": "apt command  Ubuntu 에서는 PKG 관리를 위하여 apt-get , apt-cache 등을 사용 합니다.\n16.04 부터는 apt 명령어가 추가 되어 사용 할수 있습니다.\n특별한 기능을 apt-get 또는 apt-cache 에서 사용하지 않을 경우 apt 를 권장 하고 있습니다.\n개인적인 생각으로는 아직 까지는 익숙한 명령어를 통하여 PKG 를 관리 하시것이 좋을듯 싶습니다.\n apt 명령어 소개\napt 명령어는 새로운 패키지 설치 , 기존 패키지 업그레이드 , 패키지 목록 생인 업데이트\n전체 ubuntu 업데그레이드 를 수행 할수 있습니다.\nUbuntu 의 APT (Advanced Packaging Tool) 입니다.\n\r\u0026gt; apt 명령어 list 를 보기 위해서 --help 로 command list 를 출력 합니다. test@ubuntu:~$ apt --help\rapt 1.6.3ubuntu0.1 (amd64)\rUsage: apt [options] command\rapt is a commandline package manager and provides commands for\rsearching and managing as well as querying information about packages.\rIt provides the same functionality as the specialized APT tools,\rlike apt-get and apt-cache, but enables options more suitable for\rinteractive use by default.\rMost used commands:\rlist - list packages based on package names\rsearch - search in package descriptions\rshow - show package details\rinstall - install packages\rremove - remove packages\rautoremove - Remove automatically all unused packages\rupdate - update list of available packages\rupgrade - upgrade the system by installing/upgrading packages\rfull-upgrade - upgrade the system by removing/installing/upgrading packages\redit-sources - edit the source information file\r\r기존 apt-cache 를 이용하여 search 를 할수 있지만 apt 명령어의 경우 search 로 패키지를 검색 할수 있습니다.\ninstall / remove 등등을 할수 있습니다.\n\r 패키지 설치\n test@ubuntu:~$ sudo apt install wget\r 패키지 삭제\n test@ubuntu:~$ sudo apt remove wget\r 패키지 검색\n test@ubuntu:~$ apt search nginx\r 사용가능한 패키지목록 업데이트\napt-get update 와 동일합니다.\n test@ubuntu:~$ sudo apt update\r System 에 설치된 패키지 upgrade\napt-get upgrade 와 동일합니다.\n test@ubuntu:~$ sudo apt upgrade\r System 에 설치된 패키지 확인\n test@ubuntu:~$ apt list --installed\rapt-get 명령어\n일반적으로 ubuntu 에서 pkg 관리시 가장 많이 사용되는 명령어 입니다.\napt-get 와 같이 사용되는 명령어를 보기 위하여 \u0026ndash;help 를 입력합니다.\n\rtest@ubuntu:~$ sudo apt-get --help\rapt 1.6.3ubuntu0.1 (amd64)\rUsage: apt-get [options] command\rapt-get [options] install|remove pkg1 [pkg2 ...]\rapt-get [options] source pkg1 [pkg2 ...]\rapt-get is a command line interface for retrieval of packages\rand information about them from authenticated sources and\rfor installation, upgrade and removal of packages together\rwith their dependencies.\rMost used commands:\rupdate - Retrieve new lists of packages\rupgrade - Perform an upgrade\rinstall - Install new packages (pkg is libc6 not libc6.deb)\rremove - Remove packages\rpurge - Remove packages and config files\rautoremove - Remove automatically all unused packages\rdist-upgrade - Distribution upgrade, see apt-get(8)\rdselect-upgrade - Follow dselect selections\rbuild-dep - Configure build-dependencies for source packages\rclean - Erase downloaded archive files\rautoclean - Erase old downloaded archive files\rcheck - Verify that there are no broken dependencies\rsource - Download source archives\rdownload - Download the binary package into the current directory\rchangelog - Download and display the changelog for the given package\rSee apt-get(8) for more information about the available commands.\rConfiguration options and syntax is detailed in apt.conf(5).\rInformation about how to configure sources can be found in sources.list(5).\rPackage and version choices can be expressed via apt_preferences(5).\rSecurity details are available in apt-secure(8).\rThis APT has Super Cow Powers.\rtest@ubuntu:~$  사용가능한 패키지목록 업데이트\n test@ubuntu:~$ sudo apt-get update\r System 에 설치된 패키지 upgrade\n test@ubuntu:~$ sudo apt-get upgarde\r 패키지 설치\n test@ubuntu:~$ sudo apt-get install wget\r 패키지 삭제\n test@ubuntu:~$ sudo apt-get remove wget\r pkg 다운로드\n실행된 디렉토리에 패키지를 다운로드 합니다.\n test@ubuntu:~$ sudo apt-get download wget\r pkg 검색\npkg 검색 및 정보 확인의 경우 apt-caceh 명령어를 사용합니다.\n차후 apt 명령어로 통합이 예상 됩니다.\n저장소에서 pkg 를 검색 합니다.\n test@ubuntu:~$ sudo apt-cache search nginx\r pkg 정보확인\npkg 정보를 확인 할때 사용 되며, 주로 Version 정보를 확인합니다.\n test@ubuntu:~$ sudo apt-cache search nginx\r"
},
{
	"uri": "https://bksanjuk.github.io/docker/docker-volumes/",
	"title": "Docker Volumes",
	"tags": [],
	"description": "",
	"content": "Docker Volumes  docker 에서는 3가지 유형으로 데이터를 관리 할수 있습니다.\n    mount 방식 설명 비고     docker volume docker 컨테이너에 의해 생성되고 관리 됩니다.    bind mount 호스트 시스템의 파일 또는 디렉토리가 컨테이너 볼륨과 연결되어 사용됩니다.    tmpfs mount 일시적으로 사용할수 있고 메모리에만 지속되며, 컨테이너가 중지되면 tmpfs 마운트가 제저 됩니다.      tmpfs mount 방식의 경우 data 유지가 불가능 합니다.\n   docker volume 명령어   test@docker-test:~/Workspace/test$ docker volume\rUsage: docker volume COMMAND\rManage volumes\rCommands:\rcreate Create a volume\rinspect Display detailed information on one or more volumes\rls List volumes\rprune Remove all unused local volumes\rrm Remove one or more volumes\rRun \u0026#39;docker volume COMMAND --help\u0026#39; for more information on a command.\rtest@docker-test:~/Workspace/test$\r docker volume create\nvol01 을 만들고 만들어진 볼륨을 확인 합니다.\ndocker volume inspect 명령어로 vol01 의 볼륨 정보를 확인 합니다.\n test@docker-test:~$ docker volume create vol01\rvol01\rtest@docker-test:~$ docker volume ls\rDRIVER VOLUME NAME\rlocal vol01\rtest@docker-test:~$ docker volume inspect vol01\r[\r{\r\u0026#34;CreatedAt\u0026#34;: \u0026#34;2018-10-13T21:43:47+09:00\u0026#34;,\r\u0026#34;Driver\u0026#34;: \u0026#34;local\u0026#34;,\r\u0026#34;Labels\u0026#34;: {},\r\u0026#34;Mountpoint\u0026#34;: \u0026#34;/var/lib/docker/volumes/vol01/_data\u0026#34;,\r\u0026#34;Name\u0026#34;: \u0026#34;vol01\u0026#34;,\r\u0026#34;Options\u0026#34;: {},\r\u0026#34;Scope\u0026#34;: \u0026#34;local\u0026#34;\r}\r]\rtest@docker-test:~$\r docker volume rm 명령어\nvol01 을 삭제 합니다.\n test@docker-test:~/Workspace/test$ docker volume rm vol01\rvol01\rtest@docker-test:~/Workspace/test$ docker volume ls\rDRIVER VOLUME NAME\rtest@docker-test:~/Workspace/test$\r docker volume 을 이용하여 컨테이너를 실행 합니다.\n vol02 volume 을 생성 합니다.\nmount source 를 vol02 로 지정 하여 nginx 컨테이너를 실행 합니다.\n컨테이너 내부에서 touch 를 이용하여 빈 파일을 생성 합니다.\nnginx-test mount 정보는 docker inspect 명령어로 확인 할수 있습니다.\n\rtest@docker-test:~/Workspace/test$ docker volume create vol02\rvol02\rtest@docker-test:~/Workspace/test$ docker run -d --name test-nginx --mount source=vol02,target=/app nginx:latest\rtest@docker-test:~/Workspace/test$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r514ac031e078 nginx:latest \u0026#34;nginx -g \u0026#39;daemon of…\u0026#34; 11 seconds ago Up 10 seconds 80/tcp test-nginx\rtest@docker-test:~/Workspace/test$ docker exec -it 514ac031e078 /bin/bash\rroot@514ac031e078:/# cd /app\rroot@514ac031e078:/app# touch 0\rroot@514ac031e078:/app# exit\rtest@docker-test:~/Workspace/test$ sudo ls -al /var/lib/docker/volumes/vol02/_data\rtotal 8\rdrwxr-xr-x 2 root root 4096 Oct 13 21:52 .\rdrwxr-xr-x 3 root root 4096 Oct 13 21:50 ..\r-rw-r--r-- 1 root root 0 Oct 13 21:52 0\rtest@docker-test:~/Workspace/test$\rnginx-test 컨테이너의 mount 정보를 확인 합니다. test@docker-test:~/Workspace/test$ docker inspect nginx-test\r\u0026#34;Mounts\u0026#34;: [\r{\r\u0026#34;Type\u0026#34;: \u0026#34;volume\u0026#34;,\r\u0026#34;Name\u0026#34;: \u0026#34;vol02\u0026#34;,\r\u0026#34;Source\u0026#34;: \u0026#34;/var/lib/docker/volumes/vol02/_data\u0026#34;,\r\u0026#34;Destination\u0026#34;: \u0026#34;/app\u0026#34;,\r\u0026#34;Driver\u0026#34;: \u0026#34;local\u0026#34;,\r\u0026#34;Mode\u0026#34;: \u0026#34;z\u0026#34;,\r\u0026#34;RW\u0026#34;: true,\r\u0026#34;Propagation\u0026#34;: \u0026#34;\u0026#34;\r}\r],\r Dockerfile 에서 Volume 사용\nDockerfile 에서 Volume 사용시 아래와 같이 설정해 주면 됩니다.\n기존에 생성이 되었던 Volume 사용시에도 동일하게 사용되며, 볼륨이 없으면 자동으로 Volume 을 생성합니다.\n test@docker-test:~/Workspace/nginx$ vi Dockerfile\rFROM ubuntu:16.04\rMAINTAINER user01 \u0026lt;test@anonymouse.com\u0026gt;\rRUN apt-get update\rRUN apt-get install -y nginx\rRUN echo \u0026#34;\\ndaemon off;\u0026#34; \u0026gt;\u0026gt; /etc/nginx/nginx.conf\rRUN chown -R www-data:www-data /var/lib/nginx\rVOLUME web01\rWORKDIR /etc/nginx\rCMD [\u0026#34;nginx\u0026#34;]\rEXPOSE 80\rEXPOSE 443\rtest@docker-test:~/Workspace/nginx$ docker build --tag nginx-test .\rtest@docker-test:~/Workspace/nginx$ docker run --name web-service -d -p 80:80 -v web01:/data nginx-test\rtest@docker-test:~/Workspace/nginx$ docker inspect web-service\r\u0026#34;Mounts\u0026#34;: [\r{\r\u0026#34;Type\u0026#34;: \u0026#34;volume\u0026#34;,\r\u0026#34;Name\u0026#34;: \u0026#34;web01\u0026#34;,\r\u0026#34;Source\u0026#34;: \u0026#34;/var/lib/docker/volumes/web01/_data\u0026#34;,\r\u0026#34;Destination\u0026#34;: \u0026#34;/data\u0026#34;,\r\u0026#34;Driver\u0026#34;: \u0026#34;local\u0026#34;,\r\u0026#34;Mode\u0026#34;: \u0026#34;z\u0026#34;,\r\u0026#34;RW\u0026#34;: true,\r\u0026#34;Propagation\u0026#34;: \u0026#34;\u0026#34;\r},\r{\r\u0026#34;Type\u0026#34;: \u0026#34;volume\u0026#34;,\r\u0026#34;Name\u0026#34;: \u0026#34;b48d08c5d03684301a510f61b16bb060e4d24736827ed4a15f008b95ce81b08f\u0026#34;,\r\u0026#34;Source\u0026#34;: \u0026#34;/var/lib/docker/volumes/b48d08c5d03684301a510f61b16bb060e4d24736827ed4a15f008b95ce81b08f/_data\u0026#34;,\r\u0026#34;Destination\u0026#34;: \u0026#34;web01\u0026#34;,\r\u0026#34;Driver\u0026#34;: \u0026#34;local\u0026#34;,\r\u0026#34;Mode\u0026#34;: \u0026#34;\u0026#34;,\r\u0026#34;RW\u0026#34;: true,\r\u0026#34;Propagation\u0026#34;: \u0026#34;\u0026#34;\r}\r],\r\rvolume 연결시 해당 컨테이너와 볼륨을 연결 하기 위한 volume 이 자동으로 생성 됩니다.\nhash 값으로 으로 생성되어 아래와 같이 확인 할수 있습니다.\n\rtest@docker-test:~/Workspace/nginx$ docker run --name web-service -d -p 80:80 -v /home/test/Workspace/nginx/data:/data nginx-test\rtest@docker-test:~/Workspace/nginx$ docker volume ls\rDRIVER VOLUME NAME\rlocal e8e639ad6a1cde2d17d408fe0ff9b648e5a81f7c72f3f4b452693c6640f052a4\rtest@docker-test:~/Workspace/nginx$\r\rdocker-compose mariadb example\nmariadb 데이터 용으로 사용할 docker volume 을 지정 합니다.\ndocker-compose.yml 파일을 작성 합니다.\n\rdbvol01 이 아닌 test_dbvol01 을 사용 합니다. 미리 사용한 볼륨을 사용하지 않는 경우에는 docker-comopse 에 docker volume 을 지정 하여 사용 할수 있습니다. test@docker-test:~/Workspace/test$ vi docker-compose.yml\rversion: \u0026#39;2\u0026#39;\rservices:\rmariadb:\rimage: mariadb:10.1\rports:\r- 3306:3306\rvolumes:\r- dbvol01:/var/lib/mysql\rrestart: always\renvironment:\rMYSQL_ROOT_PASSWORD: root\rMYSQL_USER: docker\rMYSQL_PASSWORD: docker\rMYSQL_DATABASE: docker\rvolumes:\rdbvol01:\rtest@docker-test:~/Workspace/test$ docker-compose up -d --build\rtest@docker-test:~/Workspace/test$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\rdafab5cedd04 mariadb:10.1 \u0026#34;docker-entrypoint.s…\u0026#34; 45 seconds ago Up 44 seconds 0.0.0.0:3306-\u0026gt;3306/tcp test_mariadb_1\rtest@docker-test:~/Workspace/test$ docker inspect test_mariadb_1\r\u0026#34;Mounts\u0026#34;: [\r{\r\u0026#34;Type\u0026#34;: \u0026#34;volume\u0026#34;,\r\u0026#34;Name\u0026#34;: \u0026#34;test_dbvol01\u0026#34;,\r\u0026#34;Source\u0026#34;: \u0026#34;/var/lib/docker/volumes/test_dbvol01/_data\u0026#34;,\r\u0026#34;Destination\u0026#34;: \u0026#34;/var/lib/mysql\u0026#34;,\r\u0026#34;Driver\u0026#34;: \u0026#34;local\u0026#34;,\r\u0026#34;Mode\u0026#34;: \u0026#34;rw\u0026#34;,\r\u0026#34;RW\u0026#34;: true,\r\u0026#34;Propagation\u0026#34;: \u0026#34;\u0026#34;\r}\r],\r\rdocker-compose 에서 docker volume 사용참고\ndocker-compose 에서는 docker volume 사용시 project name 을 사용합니다.\n미리 설정한 docker volume 을 사용하기 위해서는 external 옵션을 사용 해야 합니다.\n\r docker volume create 로 만든 volume 사용\ndocker volume 을 docker-compose 에서 사용하기 위해서는 external true 를 사용해야 합니다.\nexternal true 옵션을 사용 안하고 volume 을 지정 하게 되면 docker-project name 으로 volume 이 생성 됩니다.\n test@docker-test:~/Workspace/test$ docker volume create dbvol01\rdbvol01\rtest@docker-test:~/Workspace/test$ cat docker-compose.yml\rversion: \u0026#39;2\u0026#39;\rservices:\rmariadb:\rimage: mariadb:10.1\rports:\r- 3306:3306\rvolumes:\r- dbvol01:/var/lib/mysql\rrestart: always\renvironment:\rMYSQL_ROOT_PASSWORD: root\rMYSQL_USER: docker\rMYSQL_PASSWORD: docker\rMYSQL_DATABASE: docker\rvolumes:\rdbvol01:\rexternal: true\rtest@docker-test:~/Workspace/test$ docker-compose up -d --build\rtest@docker-test:~/Workspace/test$ docker inspect test_mariadb_1\r\u0026#34;Mounts\u0026#34;: [\r{\r\u0026#34;Type\u0026#34;: \u0026#34;volume\u0026#34;,\r\u0026#34;Name\u0026#34;: \u0026#34;dbvol01\u0026#34;,\r\u0026#34;Source\u0026#34;: \u0026#34;/var/lib/docker/volumes/dbvol01/_data\u0026#34;,\r\u0026#34;Destination\u0026#34;: \u0026#34;/var/lib/mysql\u0026#34;,\r\u0026#34;Driver\u0026#34;: \u0026#34;local\u0026#34;,\r\u0026#34;Mode\u0026#34;: \u0026#34;rw\u0026#34;,\r\u0026#34;RW\u0026#34;: true,\r\u0026#34;Propagation\u0026#34;: \u0026#34;\u0026#34;\r}\r],\rtest@docker-test:~/Workspace/test$ sudo ls -al /var/lib/docker/volumes/dbvol01/_data\r[sudo] password for test:\rtotal 110656\rdrwxr-xr-x 5 999 docker 4096 Oct 13 23:04 .\rdrwxr-xr-x 3 root root 4096 Oct 13 23:04 ..\r-rw-rw---- 1 999 docker 16384 Oct 13 23:04 aria_log.00000001\r-rw-rw---- 1 999 docker 52 Oct 13 23:04 aria_log_control\rdrwx------ 2 999 docker 4096 Oct 13 23:04 docker\r-rw-rw---- 1 999 docker 12582912 Oct 13 23:04 ibdata1\r-rw-rw---- 1 999 docker 50331648 Oct 13 23:04 ib_logfile0\r-rw-rw---- 1 999 docker 50331648 Oct 13 23:04 ib_logfile1\r-rw-rw---- 1 999 docker 0 Oct 13 23:04 multi-master.info\rdrwx------ 2 999 docker 4096 Oct 13 23:04 mysql\rdrwx------ 2 999 docker 4096 Oct 13 23:04 performance_schema\r-rw-rw---- 1 999 docker 24576 Oct 13 23:04 tc.log\rtest@docker-test:~/Workspace/test$\r"
},
{
	"uri": "https://bksanjuk.github.io/kubernetes/",
	"title": "Kubernetes",
	"tags": [],
	"description": "",
	"content": "Kubernetes "
},
{
	"uri": "https://bksanjuk.github.io/centos/yum/",
	"title": "YUM",
	"tags": [],
	"description": "",
	"content": "Local yum repository  Local yum repository  RHEL 등 CentOS 기술지원시 외부 yum repository 를 사용할수 없을 경우에 localeyum 을 구성하여 사용합니다.\n문서에서는 dvd-rom 을 이용한 방법을 간단히 설명합니다.\n\r dvd-rom mount 확인 /mnt 디렉토리에 dvd-rom 을 마운트 합니다  [root@centos7 ~]# lsblk\rNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT\rsda 8:0 0 20G 0 disk\r├─sda1 8:1 0 2G 0 part /boot\r├─sda2 8:2 0 2G 0 part [SWAP]\r└─sda3 8:3 0 16G 0 part /\rsr0 11:0 1 4.2G 0 rom\r[root@centos7 ~]#\r /etc/yum.repos.d/iso.repo 를 생성합니다.  [root@centos7 ~]# mount /dev/sr0 /mnt\rmount: /dev/sr0 is write-protected, mounting read-only\rCentOS 의 경우 yum.repos.d 디렉토리의 repo 파일을 백업 합니다.\rRHEL 에서는 별도의 백업없이 iso.repo 파일을 만드시면 됩니다.\r[root@centos7 ~]# cd /etc/yum.repos.d/\r[root@centos7 yum.repos.d]# mv *.repo back/\r[root@centos7 ~]# vi /etc/yum.repos.d/iso.repo\r[iso]\rname=iso\rbaseurl=file:///mnt/\rgpgcheck=0\r local yum 확인  [root@centos7 ~]# yum clean all\r[root@centos7 ~]# yum list\rYUM  CentOS / RHEL 에서는 패키지 관리에 yum 을 사용합니다.\ndnf 명령어의 경우 centos7 에서는 기본으로 들어 있지 않습니다.\n [root@centos7 ~]# yum --help\rLoaded plugins: fastestmirror\rUsage: yum [options] COMMAND\rList of Commands:\rcheck Check for problems in the rpmdb\rcheck-update Check for available package updates\rclean Remove cached data\rdeplist List a package\u0026#39;s dependencies\rdistribution-synchronization Synchronize installed packages to the latest available versions\rdowngrade downgrade a package\rerase Remove a package or packages from your system\rfs Acts on the filesystem data of the host, mainly for removing docs/lanuages for minimal hosts.\rfssnapshot Creates filesystem snapshots, or lists/deletes current snapshots.\rgroups Display, or use, the groups information\rhelp Display a helpful usage message\rhistory Display, or use, the transaction history\rinfo Display details about a package or group of packages\rinstall Install a package or packages on your system\rlist List a package or groups of packages\rload-transaction load a saved transaction from filename\rmakecache Generate the metadata cache\rprovides Find what package provides the given value\rreinstall reinstall a package\rrepo-pkgs Treat a repo. as a group of packages, so we can install/remove all of them\rrepolist Display the configured software repositories\rsearch Search package details for the given string\rshell Run an interactive yum shell\rswap Simple way to swap packages, instead of using shell\rupdate Update a package or packages on your system\rupdate-minimal Works like upgrade, but goes to the \u0026#39;newest\u0026#39; package match which fixes a problem that affects your system\rupdateinfo Acts on repository update information\rupgrade Update packages taking obsoletes into account\rversion Display a version for the machine and/or available repos.\r~ 중략\r yum repository list 확인  [root@centos7 ~]# yum repolist\r 패키지 검색  [root@centos7 ~]# yum search wget\r 패키지 설치  [root@centos7 ~]# yum install wget\r 패키지 삭제  [root@centos7 ~]# yum remove wget\r 패키지 다운로드  패키지를 설치 하고 다운로드 합니다.\r[root@centos7 ~]# yum install wget --downloadonly\r다운로드 위치\r/var/cache/yum/x86_64/7/base/packages\r다운로드 위치 지정\r[root@centos7 ~]# yum install wget --downloadonly --downloaddir=/root\rpkg 설치 없이 다운로드만 합니다.\r[root@centos7 ~]# yum install wget -y --downloadonly\r다운로드 위치\r/var/cache/yum/x86_64/7/base/packages\r yum history   yum 으로 설치 하고 지운내역을 확인 할수 있습니다.\nundo 를 통하여 패키지 설치 전으로 되돌릴수 있습니다.\n [root@centos7 ~]# yum history list\rLoaded plugins: fastestmirror\rID | Login user | Date and time | Action(s) | Altered\r-------------------------------------------------------------------------------\r4 | root \u0026lt;root\u0026gt; | 2018-09-29 08:14 | Erase | 1\r3 | root \u0026lt;root\u0026gt; | 2018-09-29 08:11 | Install | 1\r2 | root \u0026lt;root\u0026gt; | 2018-09-29 07:46 | I, O, U | 215 EE\r1 | System \u0026lt;unset\u0026gt; | 2018-09-29 05:58 | Install | 419\rhistory list\r[root@centos7 ~]#\r명령어 사용시 yum history undo $ID값 을 입력하면 됩니다.\r[root@centos7 ~]# yum history undo 2\r yum localinstall   rpm 파일을 yum 명령어를 통하여 설치 할수 있습니다.\n의존성 문제가 있는 rpm 파일설치에 사용합니다.\n [root@centos7 ~]# yum localinstall wget-1.14-15.el7_4.1.x86_64.rpm\r 문자열이 포함된 패키지 확인  yum provides */문자열\r[root@centos7 ~]# yum provides */httpd.conf\r System 패키지 upgrade   yum update 와 yum upgrade 차이점\nyum update 의 경우 설치된 모든 패키지를 업데이트 합니다.\n사용하지 않는 패키지 보존\nyum upgrade 의 경우 더이상 사용하지 않는 패키지도 강제적으로 업데이트 합니다.\n더이상 사용하지 않는 패키지 삭제\n yum update 가 더 안전하다고 알려져 있습니다.\n\r[root@centos7 ~]# yum update\r"
},
{
	"uri": "https://bksanjuk.github.io/docker/docker-machine/",
	"title": "Docker Machine",
	"tags": [],
	"description": "",
	"content": "Docker Machine Docker Machine 소개\nDocker Machine은 가상 호스트에 Docker Engine을 설치하고 docker-machine 명령으로\n호스트를 관리 할 수있게 해주는 도구입니다.\ndocker-machine 명령을 사용하여 관리 대상 호스트를 시작, 검사, 중지 및 재시작하고\nDocker 클라이언트 및 데몬을 업그레이드하고 호스트와 통신하도록 Docker 클라이언트를 구성 할 수 있습니다.\n문서에는 node 라고 표현하였으나 vm 이 정확한 표현 입니다.\n\r docker machine install\ndocker-machine설치참고 Site\n문서의 경우 windows 10 환경에 vmware Workstaion 환경의 설치를 기준으로 작성 합니다.\nvmware Workstaion 설치 참고 Site\n설치 참고 Site 에서 확인한 결과 docker tools 를 먼저 설치 해야 됩니다.\ndocker tools 는 dokcer-tools 에서 다운 받을수 있습니다.\n  Git windows 에서 설치\n base=https://github.com/docker/machine/releases/download/v0.14.0 \u0026amp;\u0026amp;\rmkdir -p \u0026#34;$HOME/bin\u0026#34; \u0026amp;\u0026amp;\rcurl -L $base/docker-machine-Windows-x86_64.exe \u0026gt; \u0026#34;$HOME/bin/docker-machine.exe\u0026#34; \u0026amp;\u0026amp;\rchmod +x \u0026#34;$HOME/bin/docker-machine.exe\u0026#34;\r 설치후 C:\\Program Files\\Docker Toolbox 디렉토리에 반드시 docker-machine-driver-vmwareworkstation.exe 파일이 있어야 합니다.\ndocker-machine-driver-vmwareworkstation.exe 파일은 site 에서 다운 받을수 있습니다.\ndocker tools 를 설치 하면 윈도우즈 바탕화면에 Docker Quickstart Terminal 아이콘이 생깁니다.\n클릭을 하여 docker-machine 버젼을 확인 합니다.\n test@DESKTOP-MLON2R1 MINGW64 ~\r$ docker-machine version\rdocker-machine.exe version 0.14.0, build 89b8332\rtest@DESKTOP-MLON2R1 MINGW64 ~\r$\r docker-machine 의 경우 기본적으로 Virtualbox 를 사용 합니다.\ndocker-machine 을 이용하여 node1 을 생성 합니다.\n $ docker-machine create node1\rRunning pre-create checks...\rCreating machine...\r(node1) Copying C:\\Users\\test\\.docker\\machine\\cache\\boot2docker.iso to C:\\Users\\test\\.docker\\machine\\machines\\node1\\boot2docker.iso...\r(node1) Creating VirtualBox VM...\r(node1) Creating SSH key...\r(node1) Starting the VM...\r(node1) Check network to re-create if needed...\r(node1) Windows might ask for the permission to configure a dhcp server. Sometimes, such confirmation window is minimized in the taskbar.\r(node1) Waiting for an IP...\rWaiting for machine to be running, this may take a few minutes...\rDetecting operating system of created instance...\rWaiting for SSH to be available...\rDetecting the provisioner...\rProvisioning with boot2docker...\rCopying certs to the local machine directory...\rCopying certs to the remote machine...\rSetting Docker configuration on the remote daemon...\rThis machine has been allocated an IP address, but Docker Machine could not\rreach it successfully.\rSSH for the machine should still work, but connecting to exposed ports, such as\rthe Docker daemon port (usually \u0026lt;ip\u0026gt;:2376), may not work properly.\rYou may need to add the route manually, or use another related workaround.\rThis could be due to a VPN, proxy, or host file configuration issue.\rYou also might want to clear any VirtualBox host only interfaces you are not using.\rChecking connection to Docker...\rDocker is up and running!\rTo see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: C:\\Users\\test\\bin\\docker-machine.exe env node1\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$\r docker-machine 으로 생성한 node 를 확인 합니다.\ndocker-machine create 사용시 아무런 옵션이 없으면 virtualbox 드라이버를 이용하여 node 를 생성 합니다.\n test@DESKTOP-MLON2R4 MINGW64 ~\r$ docker-machine ls\rNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS\rdefault * vmwareworkstation Running tcp://192.168.0.12:2376 v18.06.1-ce\rnode1 - virtualbox Running tcp://192.168.99.100:2376 v18.06.1-ce\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$\r vmwareworkstation Driver 를 이용하여 node 를 생성합니다.\n $ docker-machine create --driver=vmwareworkstation node2\rRunning pre-create checks...\rCreating machine...\r(node2) Copying C:\\Users\\test\\.docker\\machine\\cache\\boot2docker.iso to C:\\Users\\test\\.docker\\machine\\machines\\node2\\boot2docker.iso...\r(node2) Creating SSH key...\r(node2) Creating VM...\r(node2) Creating disk \u0026#39;C:\\Users\\test\\.docker\\machine\\machines\\node2\\node2.vmdk\u0026#39;\r(node2) Virtual disk creation successful.\r(node2) Starting node2...\r(node2) Waiting for VM to come online...\rWaiting for machine to be running, this may take a few minutes...\rDetecting operating system of created instance...\rWaiting for SSH to be available...\rDetecting the provisioner...\rProvisioning with boot2docker...\rCopying certs to the local machine directory...\rCopying certs to the remote machine...\rSetting Docker configuration on the remote daemon...\rChecking connection to Docker...\rDocker is up and running!\rTo see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: C:\\Users\\test\\bin\\docker-machine.exe env node2\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$\r docker-machine rm 명령어\ndocker-machine 으로 생성한 node 를 삭제 할때 사용 하는 명령어 입니다.\n $ docker-machine ls\rNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS\rdefault * vmwareworkstation Running tcp://192.168.0.12:2376 v18.06.1-ce\rnode1 - virtualbox Running tcp://192.168.99.100:2376 v18.06.1-ce\rnode2 - vmwareworkstation Running tcp://192.168.0.13:2376 v18.06.1-ce\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$\r$ docker-machine rm node1\rAbout to remove node1\rWARNING: This action will delete both local reference and remote instance.\rAre you sure? (y/n): y\rSuccessfully removed node1\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$ docker-machine rm node2\rAbout to remove node2\rWARNING: This action will delete both local reference and remote instance.\rAre you sure? (y/n): y\r(node2) Deleting node2...\rSuccessfully removed node2\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$ docker-machine ls\rNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS\rdefault * vmwareworkstation Running tcp://192.168.0.12:2376 v18.06.1-ce\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$\r docker-machine ssh 명령어\ndocker-mahicne 으로 생성한 node 의 경우 기본적으로 ssh 연결이 가능합니다.\npassword 파일이 아닌 ssh key 값으로 접속을 진행 합니다. docker-machine ssh node1 등으로 접속하시면 됩니다.\n외부 ssh 접속시 user:docker / password: tcuser 로 접속 할수 있습니다.\n  vmware driver 에서 사용할수 있는 옵션은 다음과 같습니다.\n    CLI option Environment variable Default     \u0026ndash;vmwareworkstation-boot2docker-url WORKSTATION_BOOT2DOCKER_URL Latest boot2docker url   \u0026ndash;vmwareworkstation-cpu-count WORKSTATION_CPU_COUNT 1   \u0026ndash;vmwareworkstation-disk-size WORKSTATION_DISK_SIZE 20000   \u0026ndash;vmwareworkstation-memory-size WORKSTATION_MEMORY_SIZE 1024   \u0026ndash;vmwareworkstation-ssh-user WORKSTATION_SSH_USER docker   \u0026ndash;vmwareworkstation-ssh-password WORKSTATION_SSH_PASSWORD tcuser    $ docker-machine ssh node1\r## .\r## ## ## ==\r## ## ## ## ## ===\r/\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\u0026#34;\\___/ ===\r~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ / ===- ~~~\r\\______ o __/\r\\ \\ __/\r\\____\\_______/\r_ _ ____ _ _\r| |__ ___ ___ | |_|___ \\ __| | ___ ___| | _____ _ __\r| \u0026#39;_ \\ / _ \\ / _ \\| __| __) / _` |/ _ \\ / __| |/ / _ \\ \u0026#39;__|\r| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__| \u0026lt; __/ |\r|_.__/ \\___/ \\___/ \\__|_____\\__,_|\\___/ \\___|_|\\_\\___|_|\rBoot2Docker version 18.06.1-ce, build HEAD : c7e5c3e - Wed Aug 22 16:27:42 UTC 2018\rDocker version 18.06.1-ce, build e68fc7a\rdocker@node1:~$\r docker-machine stop 명령어\ndocker-machine 으로 생성된 node 를 정지 할때 사용합니다.\n $ docker-machine ls\rNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS\rdefault * vmwareworkstation Running tcp://192.168.0.12:2376 v18.06.1-ce\rmaster - vmwareworkstation Running tcp://192.168.0.15:2376 v18.06.1-ce\rnode1 - vmwareworkstation Running tcp://192.168.0.14:2376 v18.06.1-ce\rnode2 - vmwareworkstation Running tcp://192.168.0.13:2376 v18.06.1-ce\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$ docker-machine stop node2\rStopping \u0026#34;node2\u0026#34;...\rMachine \u0026#34;node2\u0026#34; was stopped.\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$ docker-machine ls\rNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS\rdefault * vmwareworkstation Running tcp://192.168.0.12:2376 v18.06.1-ce\rmaster - vmwareworkstation Running tcp://192.168.0.15:2376 v18.06.1-ce\rnode1 - vmwareworkstation Running tcp://192.168.0.14:2376 v18.06.1-ce\rnode2 - vmwareworkstation Stopped Unknown\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$\r docker-machine start 명령어\ndocker-mcahine node 를 실행 시킬때 사용합니다.\n $ docker-machine start node2\rStarting \u0026#34;node2\u0026#34;...\rMachine \u0026#34;node2\u0026#34; was started.\rWaiting for SSH to be available...\rDetecting the provisioner...\rStarted machines may have new IP addresses. You may need to re-run the `docker-machine env` command.\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$ docker-machine ls\rNAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS\rdefault * vmwareworkstation Running tcp://192.168.0.12:2376 v18.06.1-ce\rmaster - vmwareworkstation Running tcp://192.168.0.15:2376 v18.06.1-ce\rnode1 - vmwareworkstation Running tcp://192.168.0.14:2376 v18.06.1-ce\rnode2 - vmwareworkstation Running tcp://192.168.0.13:2376 v18.06.1-ce\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$\r docker-machine env 명령어\n $ docker-machine env node1\rexport DOCKER_TLS_VERIFY=\u0026#34;1\u0026#34;\rexport DOCKER_HOST=\u0026#34;tcp://192.168.0.14:2376\u0026#34;\rexport DOCKER_CERT_PATH=\u0026#34;C:\\Users\\test\\.docker\\machine\\machines\\node1\u0026#34;\rexport DOCKER_MACHINE_NAME=\u0026#34;node1\u0026#34;\rexport COMPOSE_CONVERT_WINDOWS_PATHS=\u0026#34;true\u0026#34;\r# Run this command to configure your shell:\r# eval $(\u0026#34;C:\\Users\\test\\bin\\docker-machine.exe\u0026#34; env node1)\rtest@DESKTOP-MLON2R4 MINGW64 ~\r$\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/rpm/",
	"title": "RPM",
	"tags": [],
	"description": "",
	"content": "RPM  rpm 관리  Redhat Package manager 로 rpm 파일로 설치 삭제 upgrade 시 사용되는 명령어 입니다. 특별한 경우가 아닌 온라인에서 운영중인 시스템의 경우 yum 으로 패키지를 관리 하며 yum 을 사용하지 못하는경우 또는 동일한 패키지 버젼 유지시 사용 됩니다.\n\r rpm 명령어 옵션     명령어 설명 비고      i 패키지 설치    q 패키지 정보질의    U 패키지 업그레이드    e 패키지 삭제    V 패키지 검증      rpm 패키지 설치  [root@centos7 ~]# rpm -ivh wget-1.14-15.el7_4.1.x86_64.rpm\r rpm 패키지 삭제  [root@centos7 ~]# rpm -e wget-1.14-15.el7_4.1.x86_64\r 패키지 업그레이드  [root@centos7 ~]# rpm -Uvh wget-1.14-15.el7_4.1.x86_64.rpm\r 의존성 패키지의 경우  rpm 파일의 경우 순서에 따라서 의존성 문제가 발생하는 경우가 종종 있습니다.\n해결방법은 다음과 같이 한 디렉토리에 Copy 하고 rpm 명령어 사용시 디렉토리를 지정하면 됩니다.\n\r[root@centos7 ~]# rpm -Uvh /rpms*\r System 에 설치된 패키지 확인  설치된 패키지 출력\r[root@centos7 ~]# rpm -aq\r설치된 패키지 검색\r[root@centos7 ~]# rpm -aq |grep -i wget\rwget-1.14-15.el7_4.1.x86_64\r[root@centos7 ~]#\r패키지가 설치된 날짜 확인\r[root@centos7 ~]# rpm -aq --last\rwget-1.14-15.el7_4.1.x86_64 2018년 09월 29일 (토) 오전 09시 00분 48초\riwl7265-firmware-22.0.7.0-62.2.el7_5.noarch 2018년 09월 29일 (토) 오전 07시 48분 08초\riwl7260-firmware-22.0.7.0-62.2.el7_5.noarch 2018년 09월 29일 (토) 오전 07시 48분 08초\riwl6050-firmware-41.28.5.1-62.2.el7_5.noarch 2018년 09월 29일 (토) 오전 07시 48분 08초\r"
},
{
	"uri": "https://bksanjuk.github.io/ubuntu/x-windows/",
	"title": "X Windows",
	"tags": [],
	"description": "",
	"content": "X-windows "
},
{
	"uri": "https://bksanjuk.github.io/docker/docker-swarm/",
	"title": "Docker Swarm",
	"tags": [],
	"description": "",
	"content": "Docker Swarm Docker Swarm 소개\nDocker Swarm 로 컨테이너를 클러스터링 할수 있습니다.\n소규모의 컨테이너 운영시 kubernetes 보다 간편하게 컨테이너 클러스터를 구성 할수 있습니다.\n\r VM 준비\nSwarm 에서 사용할 모든 vm 에 docker 가 설치 되어 있습니다.\ndocker-machine 을 이용하지 않은 방법을 소개 하고 있습니다.\nvm 준비시 docker-machine 을 이용한다면 조금더 편하게 vm 을 생성 할수 있습니다.\n    hostname ip     docker-master 192.168.0.10   docker-worker01 192.168.0.20   docker-worker02 192.168.0.30     Docker 설치 확인\n test@docker-master:~$ docker -v\rDocker version 18.06.1-ce, build e68fc7a\rtest@docker-worker01:~$ docker -v\rDocker version 18.06.1-ce, build e68fc7a\rtest@docker-worker02:~$ docker -v\rDocker version 18.06.1-ce, build e68fc7a\r Create Docker Swarm Cluster\ndocker-master host 에서 작업 (Docker Swarm Cluster 를 생성합니다. )\nCommand : docker swarm init - advertise-addr $docker-master ip\n test@docker-master:~$ docker swarm init --advertise-addr 192.168.0.10\rSwarm initialized: current node (pbaa14jv3f351lmufm0rwcixw) is now a manager.\rTo add a worker to this swarm, run the following command:\rdocker swarm join --token SWMTKN-1-1u5vl675mm5jy794e9cjv05z08ff132jm0vwzie7sh6kz26dwo-6d6uj014xwu11k7px64rwenkb 192.168.0.10:2377\rTo add a manager to this swarm, run \u0026#39;docker swarm join-token manager\u0026#39; and follow the instructions.\rtest@docker-master:~$\r\rdocker swarm leave 명령어\ndocker swarm 구성이 잘못된 경우 docker swarm leave 명령어로 docker swarm 구성에서 제외 할수 있습니다.\ndocker swarm leave 명령어 사용시 master node 이외 worker node 에서도 작업이 필요 합니다.\n\r docker swarm leave\n test@docker-master:~$ docker swarm leave -f\rNode left the swarm.\rtest@docker-master:~$ docker info |grep -i swarm\rWARNING: No swap limit support\rSwarm: inactive\rtest@docker-master:~$\r docker node 확인\ndocker-master 에서 생성된 docker node 를 확인 합니다.\n test@docker-master:~$ docker node ls\rID HOSTNAME STATUS AVAILABILITY MANAGER STATUS ENGINE VERSION\rpbaa14jv3f351lmufm0rwcixw * docker-master Ready Active Leader 18.06.1-ce\rtest@docker-master:~$\rtest@docker-master:~$ docker info\rContainers: 0\rRunning: 0\rPaused: 0\rStopped: 0\rImages: 0\rServer Version: 18.06.1-ce\rStorage Driver: overlay2\rBacking Filesystem: extfs\rSupports d_type: true\rNative Overlay Diff: true\rLogging Driver: json-file\rCgroup Driver: cgroupfs\rPlugins:\rVolume: local\rNetwork: bridge host macvlan null overlay\rLog: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\rSwarm: active\rNodeID: pbaa14jv3f351lmufm0rwcixw\rIs Manager: true\rClusterID: ryg16z7790io5i5cp7lyig6xk\rManagers: 1\rNodes: 1\rOrchestration:\rTask History Retention Limit: 5\rRaft:\rSnapshot Interval: 10000\rNumber of Old Snapshots to Retain: 0\rHeartbeat Tick: 1\rElection Tick: 10\rDispatcher:\rHeartbeat Period: 5 seconds\rCA Configuration:\rExpiry Duration: 3 months\rForce Rotate: 0\rAutolock Managers: false\rRoot Rotation In Progress: false\rNode Address: 192.168.0.10\rManager Addresses:\r192.168.0.10:2377\rRuntimes: runc\rDefault Runtime: runc\rInit Binary: docker-init\rcontainerd version: 468a545b9edcd5932818eb9de8e72413e616e86e\rrunc version: 69663f0bd4b60df09991c08812a60108003fa340\rinit version: fec3683\rSecurity Options:\rapparmor\rseccomp\rProfile: default\rKernel Version: 4.4.0-62-generic\rOperating System: Ubuntu 16.04.2 LTS\rOSType: linux\rArchitecture: x86_64\rCPUs: 1\rTotal Memory: 1.936GiB\rName: docker-master\rID: DI4N:3HNO:74TW:4AHK:SO2J:L3EA:HAKL:YQ3G:23LB:NOAL:5PMN:TIFM\rDocker Root Dir: /var/lib/docker\rDebug Mode (client): false\rDebug Mode (server): false\rRegistry: https://index.docker.io/v1/\rLabels:\rExperimental: false\rInsecure Registries:\r127.0.0.0/8\rLive Restore Enabled: false\rWARNING: No swap limit support\rtest@docker-master:~$\r join-token 생성\ndocker-master host 에서 join-token 을 생성 합니다.\n test@docker-master:~$ docker swarm join-token worker\rTo add a worker to this swarm, run the following command:\rdocker swarm join --token SWMTKN-1-1u5vl675mm5jy794e9cjv05z08ff132jm0vwzie7sh6kz26dwo-6d6uj014xwu11k7px64rwenkb 192.168.0.10:2377\rtest@docker-master:~$\r docker-worker Swarm 등록\ndocker-master host 에서 생성한 join-token 을 이용하여 worker node 를 클러스터에 등록 합니다.\ndocker-worker01 host 에서 Swarm Cluster 에 등록하고 Swarm 상태를 확인 합니다.\n test@docker-worker01:~$ docker swarm join --token SWMTKN-1-1u5vl675mm5jy794e9cjv05z08ff132jm0vwzie7sh6kz26dwo-6d6uj014xwu11k7px64rwenkb 192.168.0.10:2377\rThis node joined a swarm as a worker.\rtest@docker-worker01:~$ docker info|grep -i swarm\rSwarm: active\rWARNING: No swap limit support\rtest@docker-worker01:~$\r docker-worker02 host 에서 Swarm Cluster 에 등록하고 Swarm 상태를 확인 합니다.\n test@docker-worker02:~$ docker swarm join --token SWMTKN-1-1u5vl675mm5jy794e9cjv05z08ff132jm0vwzie7sh6kz26dwo-6d6uj014xwu11k7px64rwenkb 192.168.0.10:2377\rThis node joined a swarm as a worker.\rtest@docker-worker02:~$ docker info |grep -i swarm\rWARNING: No swap limit support\rSwarm: active\rtest@docker-worker02:~$\r Swarm node 확인\ndocker-master 에서 Swarm node 를 확인 합니다.\n test@docker-master:~$ docker node ls\rID HOSTNAME STATUS AVAILABILITY MANAGER STATUS ENGINE VERSION\rpbaa14jv3f351lmufm0rwcixw * docker-master Ready Active Leader 18.06.1-ce\ruac58mks3ag22eiru1qwg3e3g docker-worker01 Ready Active 18.06.1-ce\remxyua7vz31do60n5dyo96j0y docker-worker02 Ready Active 18.06.1-ce\rtest@docker-master:~$\r Nginx 컨테이너 테스트\n docker service create 명령어\ndocker swarm 의 경우 docker run 대신 docker service create 명령어를 사용합니다.\nSwarm nginx test 문서의 경우 바로 적용하여 사용하는 문서가 아니며 service 생성\nSwarm 기본 적인 명령어 위주로 작성 하였습니다.\n\r docker service create\ndocker-master host 에서 docker service create 명령어를 이용하여 web-service 컨테이너를 생성합니다.\n test@docker-master:~$ docker service create --name web-service --publish 80:80 nginx\rmd8pzk0owb4s8ida55voqzlrb\roverall progress: 1 out of 1 tasks\r1/1: running [==================================================\u0026gt;]\rverify: Service converged\rtest@docker-master:~$  docker service 확인\n test@docker-master:~$ docker service ls\rID NAME MODE REPLICAS IMAGE PORTS\rmd8pzk0owb4s web-service replicated 1/1 nginx:latest *:80-\u0026gt;80/tcp\rtest@docker-master:~$ docker service ps web-service\rID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERROR PORTS\rksugzzmulbh1 web-service.1 nginx:latest docker-master Running Running about a minute ago\rtest@docker-master:~$\r docker service scale\ndocker service scale 명령어를 사용하여 web-service 컨테이너를 추가 할수 있습니다.\n컨테이너 1 -\u0026gt; 3대로 추가\n test@docker-master:~$ docker service scale web-service=3\rweb-service scaled to 3\roverall progress: 3 out of 3 tasks\r1/3: running [==================================================\u0026gt;]\r2/3: running [==================================================\u0026gt;]\r3/3: running [==================================================\u0026gt;]\rverify: Service converged\rtest@docker-master:~$ docker service ps web-service\rID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERROR PORTS\rksugzzmulbh1 web-service.1 nginx:latest docker-master Running Running 7 minutes ago\rumfp8ntznr2r web-service.2 nginx:latest docker-worker02 Running Running 10 seconds ago\r1yuz9z9xxpws web-service.3 nginx:latest docker-worker01 Running Running 20 seconds ago\rtest@docker-master:~$\r 컨테이너 Service 3대 -\u0026gt; 5대 추가\n test@docker-master:~$ docker service scale web-service=5\rweb-service scaled to 5\roverall progress: 5 out of 5 tasks\r1/5: running [==================================================\u0026gt;]\r2/5: running [==================================================\u0026gt;]\r3/5: running [==================================================\u0026gt;]\r4/5: running [==================================================\u0026gt;]\r5/5: running [==================================================\u0026gt;]\rverify: Service converged\rtest@docker-master:~$ docker service ps web-service\rID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERROR PORTS\rksugzzmulbh1 web-service.1 nginx:latest docker-master Running Running 8 minutes ago\rumfp8ntznr2r web-service.2 nginx:latest docker-worker02 Running Running about a minute ago\r1yuz9z9xxpws web-service.3 nginx:latest docker-worker01 Running Running about a minute ago\rm3op5xxy012p web-service.4 nginx:latest docker-master Running Running 44 seconds ago\ryz1me2r5cbdv web-service.5 nginx:latest docker-worker02 Running Running 44 seconds ago\rtest@docker-master:~$\r 컨테이너 Service 5대 -\u0026gt; 1대\n컨테이너 서비스의 증가뿐 아니라 scale out 시에도 사용됩니다.\n test@docker-master:~$ docker service scale web-service=1\rweb-service scaled to 1\roverall progress: 1 out of 1 tasks\r1/1: running [==================================================\u0026gt;]\rverify: Service converged\rtest@docker-master:~$ docker ps\rCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\r3bee481b66c5 nginx:latest \u0026#34;nginx -g \u0026#39;daemon of…\u0026#34; 9 minutes ago Up 9 minutes 80/tcp web-service.1.ksugzzmulbh1r0gd5ztm38v8u\rtest@docker-master:~$\r docker service rm\nswarm 에서 사용중인 컨테이너 삭제시 사용됩니다.\n test@docker-master:~$ docker service rm web-service\rweb-service\rtest@docker-master:~$ docker service ls\rID NAME MODE REPLICAS IMAGE PORTS\rtest@docker-master:~$\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/ntp/",
	"title": "NTP",
	"tags": [],
	"description": "",
	"content": "NTP  NTP (Network Time protocol) 로 System 에 시간을 동기화 하는 역활을 합니다.\nCentOS7 / RHEL7 에서는 ntpd 대신 chronyd 를 사용 합니다.\n  chronyd 패키지가 설치 되었는지 확인합니다.  [root@centos7 ~]# rpm -aq |grep -i chrony\rchrony 패키지를 설치 합니다.\r[root@centos7 ~]# yum install -y chrony\r chrony 의 경우 설정 파일이 /etc/chrony.conf 입니다.\n  chrony.conf 파일  [root@centos7 ~]# cat /etc/chrony.conf\r# Use public servers from the pool.ntp.org project.\r# Please consider joining the pool (http://www.pool.ntp.org/join.html).\rserver 0.centos.pool.ntp.org iburst\rserver 1.centos.pool.ntp.org iburst\rserver 2.centos.pool.ntp.org iburst\rserver 3.centos.pool.ntp.org iburst\r# Record the rate at which the system clock gains/losses time.\rdriftfile /var/lib/chrony/drift\r# Allow the system clock to be stepped in the first three updates\r# if its offset is larger than 1 second.\rmakestep 1.0 3\r# Enable kernel synchronization of the real-time clock (RTC).\rrtcsync\r# Enable hardware timestamping on all interfaces that support it.\r#hwtimestamp *\r# Increase the minimum number of selectable sources required to adjust\r# the system clock.\r#minsources 2\r# Allow NTP client access from local network.\r#allow 192.168.0.0/16\r# Serve time even if not synchronized to a time source.\r#local stratum 10\r# Specify file containing keys for NTP authentication.\r#keyfile /etc/chrony.keys\r# Specify directory for log files.\rlogdir /var/log/chrony\r server 옵션을 사용하여 time Server 를 지정 할수 있습니다.\nex) http://www.pool.ntp.org/zone/kr\nserver 1.kr.pool.ntp.org\nserver 0.asia.pool.ntp.org\nserver 1.asia.pool.ntp.org\nchrony Server 로 사용할 경우 allow 에서 Client network 를 설정해 줍니다.\nallow 192.168.0.0/24\n  chronyd 구동  [root@centos7 ~]# systemctl start chronyd\r chronyd Time sync 확인 (동기화 확인)  [root@centos7 ~]# chronyc tracking\rReference ID : 6AF7F86A (106.247.248.106)\rStratum : 3\rRef time (UTC) : Sat Sep 29 11:46:08 2018\rSystem time : 0.000986114 seconds slow of NTP time\rLast offset : -0.000145085 seconds\rRMS offset : 0.000665187 seconds\rFrequency : 96.481 ppm fast\rResidual freq : -0.035 ppm\rSkew : 1.050 ppm\rRoot delay : 0.014674330 seconds\rRoot dispersion : 0.029061176 seconds\rUpdate interval : 64.4 seconds\rLeap status : Normal\r[root@centos7 ~]#\r 동기화 소스 확인  [root@centos7 ~]# chronyc sources -v\r210 Number of sources = 4\r.-- Source mode \u0026#39;^\u0026#39; = server, \u0026#39;=\u0026#39; = peer, \u0026#39;#\u0026#39; = local clock.\r/ .- Source state \u0026#39;*\u0026#39; = current synced, \u0026#39;+\u0026#39; = combined , \u0026#39;-\u0026#39; = not combined,\r| / \u0026#39;?\u0026#39; = unreachable, \u0026#39;x\u0026#39; = time may be in error, \u0026#39;~\u0026#39; = time too variable.\r|| .- xxxx [ yyyy ] +/- zzzz\r|| Reachability register (octal) -. | xxxx = adjusted offset,\r|| Log2(Polling interval) --. | | yyyy = measured offset,\r|| \\ | | zzzz = estimated error.\r|| | | \\\rMS Name/IP address Stratum Poll Reach LastRx Last sample\r===============================================================================\r^+ 203.217.204.135 2 6 377 5 +13ms[ +13ms] +/- 101ms\r^+ dadns.cdnetworks.co.kr 2 6 377 7 -7304us[-7342us] +/- 73ms\r^+ send.mx.cdnetworks.com 2 6 377 5 -1727us[-1765us] +/- 67ms\r^* 106.247.248.106 2 6 377 4 +1070ns[ -38us] +/- 40ms\r[root@centos7 ~]#\r time sync 명령어  [root@rhel7 ~]# chronyc -a makestep\r200 OK\r[root@rhel7 ~]# date\rSat Sep 29 21:03:00 KST 2018\r[root@rhel7 ~]#\r firewalld 방화벽 추가 chronyd Server / Client 양쪽에서 추가 합니다.  [root@centos7 ~]# firewall-cmd --add-service=ntp --permanent\r[root@centos7 ~]# firewall-cmd --reload\r"
},
{
	"uri": "https://bksanjuk.github.io/docker/docker-swarm-nfs-volume/",
	"title": "Docker Swarm NFS Volume",
	"tags": [],
	"description": "",
	"content": "Docker Swarm NFS Volume "
},
{
	"uri": "https://bksanjuk.github.io/centos/reset-root-password/",
	"title": "Reset Root Password",
	"tags": [],
	"description": "",
	"content": "Reset root password  root Password Reset  Root password 분실시 참고 문서 입니다.\ngrub 매뉴에서 rd.break 를 입력하여 부팅을 진행한후 password 를 변경 합니다.\n\r grub 매뉴에서 Esc 키를 누릅니다.\n키보드 e를 눌러 설정을 편집 합니다.\n  linux16 라인에서 End 키를 눌러 마지막 라인으로 이동합니다.\nrd.break 입력후 Ctrl + x 를 눌러 부팅을 진행 합니다.\n  password 를 변경 합니다.\n :/# chroot /sysroot\r:/# passwd root\rselinux update information ( selinux 사용시 설정 )\r:/# touch /.autorelabel\r:/# exit\r:/# reboot\r 부팅후 바뀐 패스워드로 로그인을 합니다.\n "
},
{
	"uri": "https://bksanjuk.github.io/centos/rescue-mode/",
	"title": "Rescue Mode",
	"tags": [],
	"description": "",
	"content": "Rescue mode  Rescue mode  Rescue mode 는 시스템 장애시 DVD images 를 이용하여 시스템에 부팅 하여 리눅스 시스템을 복구 할때 사용합니다.\n본 문서에는 grub2 설치 부분이 포함 되어 있습니다.\n\r BIOS 에서 CD-ROM 부팅으로 변경 합니다.\n  vmware BIOS 변경  power on to firmware 를 선택하여 Bios 에서 부팅을 변경 할수 있습니다.\n\r BIOS 에서 부팅 순서를 CD-ROM Driver 를 First 로 선택 합니다.\n  Troubleshooting 을 선택 합니다.\n  Rescue a CentOS system 을 선택 합니다.\n  Continue 를 선택 합니다.\n  chroot /mnt/sysimage 디스크 마운트 된 root 파티션을 변경 합니다.\n bash-4.2# chroot /mnt/sysimage\rbash-4.2# ls /dev/sd*\r/dev/sda /dev/sda1 /dev/sda2 /dev/sda3\rbash-4.2# ls /sbin/ | grep grub2\r grub2 bootloder 설치\n bash-4.2# /sbin/grub2-install /dev/sda\rbash-4.2# exit\rexit\rsh-4.2# init 6\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/mainternance-mode/",
	"title": "Mainternance Mode",
	"tags": [],
	"description": "",
	"content": "Mainternance mode  what is meinternance mode  보통의 경우 /etc/fstab Device 를 mount 하지 못하였을경우 mainternance mode 로 진입한후 System booting 이 되지 않습니다.\n\r 메인터넌스 모드로 빠졌을 경우 root 패스워드를 입력하여 system 에 진입할수 있습니다.\n  system 에 진입후 /etc/fstab 확인 및 마운트 포인트를 확인 합니다.\n  /etc/fstab 에 주석 처리를 합니다.\n  system booting 후 정상적으로 로그인 되었는지 확인 합니다.\n  System login 후 /var/log/message 등을 점검 합니다.\n "
},
{
	"uri": "https://bksanjuk.github.io/centos/firewalld/",
	"title": "Firewalld",
	"tags": [],
	"description": "",
	"content": "Firewalld  CentOS7 / RHEL7 에서는 방화벽으로 Firewalld 를 사용합니다.\nfirewalld 의 경우 zone 을 생성 하여 방화벽 Rule 을 설정 할수 있으며 zone 에 interface(Nic)를 지정 할수 있습니다.\n  OS 설치시 기본으로 작동하며 동작 확인은 아래와 같이 할수 있습니다.  [root@centos7 ~]# systemctl status firewalld\r● firewalld.service - firewalld - dynamic firewall daemon\rLoaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)\rActive: active (running) since 일 2018-09-30 12:11:49 KST; 34min ago\rDocs: man:firewalld(1)\rMain PID: 654 (firewalld)\rCGroup: /system.slice/firewalld.service\r└─654 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid\r9월 30 12:11:48 centos7 systemd[1]: Starting firewalld - dynamic firewall daemon...\r9월 30 12:11:49 centos7 systemd[1]: Started firewalld - dynamic firewall daemon.\r[root@centos7 ~]#\r firewalld Daemon Disable 및 Daemon stop   별도의 방화벽 장비를 사용하거나 방화벽을 사용 하지 않을 경우\nfirewalld Daemon 을 비활성 / 정지 하시면 됩니다.\n [root@centos7 ~]# systemctl disable firewalld \u0026amp;\u0026amp; systemctl stop firewalld\r firewalld.conf 설정 설정파일의 경우 /etc/firewalld/firewalld.conf 파일에서 설정 할수 있습니다.  [root@centos7 ~]# cat /etc/firewalld/firewalld.conf\r# firewalld config file\r# default zone\r# The default zone used if an empty zone string is used.\r# Default: public\rDefaultZone=public\r# Minimal mark\r# Marks up to this minimum are free for use for example in the direct\r# interface. If more free marks are needed, increase the minimum\r# Default: 100\rMinimalMark=100\r# Clean up on exit\r# If set to no or false the firewall configuration will not get cleaned up\r# on exit or stop of firewalld\r# Default: yes\rCleanupOnExit=yes\r# Lockdown\r# If set to enabled, firewall changes with the D-Bus interface will be limited\r# to applications that are listed in the lockdown whitelist.\r# The lockdown whitelist file is lockdown-whitelist.xml\r# Default: no\rLockdown=no\r# IPv6_rpfilter\r# Performs a reverse path filter test on a packet for IPv6. If a reply to the\r# packet would be sent via the same interface that the packet arrived on, the\r# packet will match and be accepted, otherwise dropped.\r# The rp_filter for IPv4 is controlled using sysctl.\r# Default: yes\r# Default: yes\rIPv6_rpfilter=yes\r# IndividualCalls\r# Do not use combined -restore calls, but individual calls. This increases the\r# time that is needed to apply changes and to start the daemon, but is good for\r# debugging.\r# Default: no\rIndividualCalls=no\r# LogDenied\r# Add logging rules right before reject and drop rules in the INPUT, FORWARD\r# and OUTPUT chains for the default rules and also final reject and drop rules\r# in zones. Possible values are: all, unicast, broadcast, multicast and off.\r# Default: off\rLogDenied=off\r# AutomaticHelpers\r# For the secure use of iptables and connection tracking helpers it is\r# recommended to turn AutomaticHelpers off. But this might have side effects on\r# other services using the netfilter helpers as the sysctl setting in\r# /proc/sys/net/netfilter/nf_conntrack_helper will be changed.\r# With the system setting, the default value set in the kernel or with sysctl\r# will be used. Possible values are: yes, no and system.\r# Default: system\rAutomaticHelpers=system\r[root@centos7 ~]#\r 방화벽 상태 확인  [root@centos7 ~]# firewall-cmd --list-all\rpublic (active)\rtarget: default\ricmp-block-inversion: no\rinterfaces: ens33 ens34 bond0\rsources:\rservices: ssh dhcpv6-client ntp\rports:\rprotocols:\rmasquerade: no\rforward-ports:\rsource-ports:\ricmp-blocks:\rrich rules:\r[root@centos7 ~]#\r Default zone 확인  [root@centos7 ~]# firewall-cmd --get-default-zone\rpublic\r public zone 설정파일 zone 설정 파일의 경우 /etc/firewalld/zones 디렉토리에 위치 하고 있습니다.  [root@centos7 ~]# cat /etc/firewalld/zones/public.xml\r\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\r\u0026lt;zone\u0026gt;\r\u0026lt;short\u0026gt;Public\u0026lt;/short\u0026gt;\r\u0026lt;description\u0026gt;For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.\u0026lt;/description\u0026gt;\r\u0026lt;service name=\u0026#34;ssh\u0026#34;/\u0026gt;\r\u0026lt;service name=\u0026#34;dhcpv6-client\u0026#34;/\u0026gt;\r\u0026lt;service name=\u0026#34;ntp\u0026#34;/\u0026gt;\r\u0026lt;/zone\u0026gt;\r[root@centos7 ~]#\r 사용 가능한 zone 목록 확인  [root@centos7 ~]# firewall-cmd --get-zones\rblock dmz drop external home internal public trusted work\r 사용할수 있는 Service 목록 확인  [root@centos7 ~]# firewall-cmd --get-services\r Service port 추가  [root@centos7 ~]# firewall-cmd --permanent --zone=public --add-service=http\r Service port 삭제  [root@centos7 ~]# firewall-cmd --permanent --zone=public --remove-service=http\r zone 생성  [root@centos7 ~]# firewall-cmd --permanent --new-zone=web-service\r 설정적용  root@centos7 ~]# firewall-cmd --reload\r web-service zone 에 Service 추가  [root@centos7 ~]# firewall-cmd --permanent --zone=web-service --add-service=http\r[root@centos7 ~]# firewall-cmd --permanent --zone=web-service --add-service=https\r[root@centos7 ~]# firewall-cmd --reload\r zone 삭제  [root@centos7 ~]# firewall-cmd --permanent --delete-zone=web-service\r public zone에 특정 포트허용  [root@centos7 ~]# firewall-cmd --permanent --zone=public --add-port=20201/tcp\r[root@centos7 ~]# firewall-cmd --reload\r[root@centos7 ~]# firewall-cmd --list-all\rpublic (active)\rtarget: default\ricmp-block-inversion: no\rinterfaces: ens33 ens34 bond0\rsources:\rservices: ssh dhcpv6-client ntp\rports: 20201/tcp\rprotocols:\rmasquerade: no\rforward-ports:\rsource-ports:\ricmp-blocks:\rrich rules:\r[root@centos7 ~]#\rports 라인에 20201 ports 가 추가된것을 확인 할수 있습니다.\n public zone에 특정 포트 삭제  [root@centos7 ~]# firewall-cmd --permanent --zone=public --remove-port=20201/tcp\r[root@centos7 ~]# firewall-cmd --reload\r[root@centos7 ~]# firewall-cmd --list-all\rpublic (active)\rtarget: default\ricmp-block-inversion: no\rinterfaces: ens33 ens34 bond0\rsources:\rservices: ssh dhcpv6-client ntp\rports:\rprotocols:\rmasquerade: no\rforward-ports:\rsource-ports:\ricmp-blocks:\rrich rules:\r[root@centos7 ~]#\r public zone 에 포트범위로 포트 허용  [root@centos7 ~]# firewall-cmd --permanent --zone=public --add-port=2000-2200/tcp\r[root@centos7 ~]# firewall-cmd --reload\r IP 대역으로 접근 허용  [root@centos7 ~]# firewall-cmd --permanent --zone=public --add-source=192.168.0.0/24 --add-port=22/tcp\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/iscsi/",
	"title": "ISCSI",
	"tags": [],
	"description": "",
	"content": "ISCSI CentOS 7 ISCSI Server 사용시 targetCLI 를 사용합니다.\ntargetCLI에서 자세한 정보를 확인 할수 있습니다.\n\r문서내용 참고\ntargetcli(iscsi server) 에서 fileio 생성 -\u0026gt; iscsi client 설치 -\u0026gt; fileio 테스트\nblock 생성 -\u0026gt; block 테스트 로 문서를 정리 하였습니다.\niscsi client 는 별도의 vm 에 구성을 해야 합니다.\n\r targetCLI(iscsi server) 설치  [root@centos7 ~]# yum install -y targetcli\r targetCLI Daemon 활성화 및 Daemon 실행  [root@centos7 ~]# systemctl enable target\r[root@centos7 ~]# systemctl start target\r 사용할수 있는 Volume     Volume 종류 설명     block lvm 논리볼륨 , Disk   fileio 지정된 크기의 File 생성후 사용   pscsi 물리적 scsi 장치   ramdisk ramdisk 생성후 사용     fileio 사용 example  diksk1.img 파일생성 Tip\n/\u0026gt; 위치에서 생성을 해야 합니다. 위치 이동은 cd 명령어를 통하여 이동할수 있습니다.\n\r targetcli 에서 사용할 디렉토리 생성후 10G disk1.img 파일을 생성 합니다.\n [root@centos7 ~]# mkdir /images\r[root@centos7 ~]# targetcli\rtargetcli shell version 2.1.fb46\rCopyright 2011-2013 by Datera, Inc and others.\rFor help on commands, type \u0026#39;help\u0026#39;.\r/\u0026gt; backstores/fileio create disk1 /images/disk1.img 10G\rCreated fileio disk1 with size 10737418240\r wwn 생성 및 Lun 생성  /\u0026gt; cd iscsi/iqn.2018-10.com.example:target1/tpg1/\r/iscsi/iqn.20...:target1/tpg1\u0026gt; ls\ro- tpg1 ..................................................................................................... [no-gen-acls, no-auth]\ro- acls ................................................................................................................ [ACLs: 0]\ro- luns ................................................................................................................ [LUNs: 0]\ro- portals .......................................................................................................... [Portals: 1]\ro- 0.0.0.0:3260 ........................................................................................................... [OK]\r/iscsi/iqn.20...:target1/tpg1\u0026gt; portals/ create\rUsing default IP port 3260\rBinding to INADDR_ANY (0.0.0.0)\rThis NetworkPortal already exists in configFS\r/iscsi/iqn.20...:target1/tpg1\u0026gt; luns/ create /backstores/fileio/disk1\rCreated LUN 0.\r ACL Disable 및 Read/Write mode 설정  /iscsi/iqn.20...:target1/tpg1\u0026gt; set attribute demo_mode_write_protect=0\rParameter demo_mode_write_protect is now \u0026#39;0\u0026#39;.\r/iscsi/iqn.20...:target1/tpg1\u0026gt; set attribute generate_node_acls=1\rParameter generate_node_acls is now \u0026#39;1\u0026#39;.\r/iscsi/iqn.20...:target1/tpg1\u0026gt; exit\rGlobal pref auto_save_on_exit=true\rLast 10 configs saved in /etc/target/backup/.\rConfiguration saved to /etc/target/saveconfig.json\r[root@centos7 ~]#\r iscsi client 설치   별도 vm 에서 iscsi-initiator-utils 를 설치 합니다.\n [root@CentOS7-client ~]# yum install -y iscsi-initiator-utils\r fileio 테스트   iscsiadmo 을 이용하여 targetcli iqn 정보를 확인 합니다.\n [root@CentOS7-client ~]# iscsiadm --mode discoverydb --type sendtargets --portal 192.168.0.40 --discover\r192.168.0.40:3260,1 iqn.2018-10.com.example:target1\r[root@CentOS7-client ~]#\r iscsi login  [root@CentOS7-client ~]# iscsiadm --mode node --targetname iqn.2018-10.com.example:target1 --login\rLogging in to [iface: default, target: iqn.2018-10.com.example:target1, portal: 192.168.0.40,3260] (multiple)\rLogin to [iface: default, target: iqn.2018-10.com.example:target1, portal: 192.168.0.40,3260] successful.\r[root@CentOS7-client ~]#\r iscsi 확인  iscsi client 확인\niscsi 확인시 proc 파일시스템의 scsi 파일 과 fdisk 정보 에서 확인 할수 있습니다.\n\rModel: disk1 를 확인 할수 있습니다.\r[root@CentOS7-client ~]# cat /proc/scsi/scsi\rAttached devices:\rHost: scsi2 Channel: 00 Id: 00 Lun: 00\rVendor: VMware, Model: VMware Virtual S Rev: 1.0\rType: Direct-Access ANSI SCSI revision: 02\rHost: scsi4 Channel: 00 Id: 00 Lun: 00\rVendor: NECVMWar Model: VMware SATA CD01 Rev: 1.00\rType: CD-ROM ANSI SCSI revision: 05\rHost: scsi33 Channel: 00 Id: 00 Lun: 00\rVendor: LIO-ORG Model: disk1 Rev: 4.0\rType: Direct-Access ANSI SCSI revision: 05\r/dev/sdb 10G 를 확인 할수 있습니다.\r[root@CentOS7-client ~]# fdisk -l\rDisk /dev/sda: 21.5 GB, 21474836480 bytes, 41943040 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\rDisk label type: dos\rDisk identifier: 0x0009fcf9\rDevice Boot Start End Blocks Id System\r/dev/sda1 * 2048 2099199 1048576 83 Linux\r/dev/sda2 2099200 41943039 19921920 8e Linux LVM\rDisk /dev/mapper/centos-root: 18.2 GB, 18249416704 bytes, 35643392 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\rDisk /dev/mapper/centos-swap: 2147 MB, 2147483648 bytes, 4194304 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\rDisk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 4194304 bytes\r[root@CentOS7-client ~]#\r iscsi logout -u 옵션을 사용하여 로그아웃 후 -o 옵션을 사용하여 delete 합니다.  [root@CentOS7-client ~]# iscsiadm --mode node --targetname iqn.2018-10.com.example:target1 --portal 192.168.0.40 -u\rLogging out of session [sid: 1, target: iqn.2018-10.com.example:target1, portal: 192.168.0.40,3260]\rLogout of [sid: 1, target: iqn.2018-10.com.example:target1, portal: 192.168.0.40,3260] successful.\r[root@CentOS7-client ~]# iscsiadm --mode node --targetname iqn.2018-10.com.example:target1 --portal 192.168.0.40 -o delete\r block 생성   targetcli server 에서 block 생성용으로 /dev/sdb 10G 를 추가 하였습니다.\n/dev/sdb 10G 를 이용하여 lvm 3개를 만들어 테스트를 진행 합니다.\n file system type lvm\nfdisk 에서 별도로 file system type 을 lvm 으로 지정 하지 않아도 사용시 문제가 없습니다.\n볼륨 재사용시 파일 시스템 확인용으로 사용합니다.\n\r[root@centos7 ~]# fdisk -l\rFdisk 확인 Disk /dev/sda: 21.5 GB, 21474836480 bytes, 41943040 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\rDisk label type: dos\rDisk identifier: 0x000a27c3\rDevice Boot Start End Blocks Id System\r/dev/sda1 * 2048 4196351 2097152 83 Linux\r/dev/sda2 4196352 8390655 2097152 82 Linux swap / Solaris\r/dev/sda3 8390656 41943039 16776192 83 Linux\rDisk /dev/sdb: 10.7 GB, 10737418240 bytes, 20971520 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\r[root@centos7 ~]#\rfdisk 작업 (별도의 fdisk 작업을 하지 않아도 lvm 사용시 문제는 없지만 차후 file system 확인용도로 partition type 을 지정 합니다.)\r[root@centos7 ~]# fdisk /dev/sdb\rWelcome to fdisk (util-linux 2.23.2).\rChanges will remain in memory only, until you decide to write them.\rBe careful before using the write command.\rDevice does not contain a recognized partition table\rBuilding a new DOS disklabel with disk identifier 0x852441a8.\rCommand (m for help): n\rPartition type:\rp primary (0 primary, 0 extended, 4 free)\re extended\rSelect (default p): p\rPartition number (1-4, default 1): 1\rFirst sector (2048-20971519, default 2048):\rUsing default value 2048\rLast sector, +sectors or +size{K,M,G} (2048-20971519, default 20971519):\rUsing default value 20971519\rPartition 1 of type Linux and of size 10 GiB is set\rCommand (m for help): t\rSelected partition 1\rHex code (type L to list all codes): 8e\rChanged type of partition \u0026#39;Linux\u0026#39; to \u0026#39;Linux LVM\u0026#39;\rCommand (m for help): wq\rThe partition table has been altered!\rCalling ioctl() to re-read partition table.\rSyncing disks.\r[root@centos7 ~]#\r LVM 생성   targetcli block 으로 사용할 lvm 을 생성 합니다.\n [root@centos7 ~]# pvcreate /dev/sdb1\rPhysical volume \u0026#34;/dev/sdb1\u0026#34; successfully created.\r[root@centos7 ~]# vgcreate vg00 /dev/sdb1\rVolume group \u0026#34;vg00\u0026#34; successfully created\r[root@centos7 ~]# lvcreate -L 1G -n lv-vol1 vg00\rLogical volume \u0026#34;lv-vol1\u0026#34; created.\r[root@centos7 ~]# lvcreate -L 1G -n lv-vol2 vg00\rLogical volume \u0026#34;lv-vol2\u0026#34; created.\r[root@centos7 ~]# lvcreate -L 1G -n lv-vol3 vg00\rLogical volume \u0026#34;lv-vol3\u0026#34; created.\r[root@centos7 ~]# lvs\rLV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert\rlv-vol1 vg00 -wi-a----- 1.00g lv-vol2 vg00 -wi-a----- 1.00g lv-vol3 vg00 -wi-a----- 1.00g [root@centos7 ~]#\r iscsi block Device 생성  [root@centos7 ~]# targetcli\rtargetcli shell version 2.1.fb46\rCopyright 2011-2013 by Datera, Inc and others.\rFor help on commands, type \u0026#39;help\u0026#39;.\r/iscsi/iqn.20...:target1/tpg1\u0026gt; cd\r/\u0026gt; cd /backstores/block\r/backstores/block\u0026gt; create lv-vol1 /dev/vg00/lv-vol1\rCreated block storage object lv-vol1 using /dev/vg00/lv-vol1.\r/backstores/block\u0026gt; create lv-vol2 /dev/vg00/lv-vol2\rCreated block storage object lv-vol2 using /dev/vg00/lv-vol2.\r/backstores/block\u0026gt; create lv-vol3 /dev/vg00/lv-vol3\rCreated block storage object lv-vol3 using /dev/vg00/lv-vol3.\r/backstores/block\u0026gt;\r wwn 생성  /backstores/block\u0026gt; cd /iscsi\r/iscsi\u0026gt; create iqn.2018-10.com.example:target2\rCreated target iqn.2018-10.com.example:target2.\rCreated TPG 1.\rGlobal pref auto_add_default_portal=true\rCreated default portal listening on all IPs (0.0.0.0), port 3260.\r/iscsi\u0026gt;\r Lun 생성  /iscsi\u0026gt; cd iqn.2018-10.com.example:target2/\r/iscsi/iqn.20...ample:target2\u0026gt; ls\ro- iqn.2018-10.com.example:target2 ....................................................................................... [TPGs: 1]\ro- tpg1 ................................................................................................... [no-gen-acls, no-auth]\ro- acls .............................................................................................................. [ACLs: 0]\ro- luns .............................................................................................................. [LUNs: 0]\ro- portals ........................................................................................................ [Portals: 1]\ro- 0.0.0.0:3260 ......................................................................................................... [OK]\r/iscsi/iqn.20...ample:target2\u0026gt; cd tpg1/luns\r/iscsi/iqn.20...et2/tpg1/luns\u0026gt; create /backstores/block/lv-vol1\rCreated LUN 0.\r/iscsi/iqn.20...et2/tpg1/luns\u0026gt; create /backstores/block/lv-vol2\rCreated LUN 1.\r/iscsi/iqn.20...et2/tpg1/luns\u0026gt; create /backstores/block/lv-vol3\rCreated LUN 2.\r/iscsi/iqn.20...et2/tpg1/luns\u0026gt; ls\ro- luns .................................................................................................................. [LUNs: 3]\ro- lun0 ................................................................... [block/lv-vol1 (/dev/vg00/lv-vol1) (default_tg_pt_gp)]\ro- lun1 ................................................................... [block/lv-vol2 (/dev/vg00/lv-vol2) (default_tg_pt_gp)]\ro- lun2 ................................................................... [block/lv-vol3 (/dev/vg00/lv-vol3) (default_tg_pt_gp)]\r/iscsi/iqn.20...et2/tpg1/luns\u0026gt;\r ACL Disable 및 Read/Write mode 설정  /iscsi/iqn.20...et2/tpg1/luns\u0026gt; cd\r/iscsi/iqn.20...:target2/tpg1\u0026gt; set attribute authentication=0\rParameter authentication is now \u0026#39;0\u0026#39;.\r/iscsi/iqn.20...:target2/tpg1\u0026gt; set attribute demo_mode_write_protect=0\rParameter demo_mode_write_protect is now \u0026#39;0\u0026#39;.\r/iscsi/iqn.20...:target2/tpg1\u0026gt; set attribute generate_node_acls=1\rParameter generate_node_acls is now \u0026#39;1\u0026#39;.\r/iscsi/iqn.20...:target2/tpg1\u0026gt; exit\rGlobal pref auto_save_on_exit=true\rLast 10 configs saved in /etc/target/backup/.\rConfiguration saved to /etc/target/saveconfig.json\r[root@centos7 ~]#\r block 테스트   iscsi client 에서 iscsiadm 을 이용하여 targetcli iqn 을 확인 합니다.\n [root@CentOS7-client ~]# iscsiadm --mode discoverydb --type sendtargets --portal 192.168.0.40 --discover\r192.168.0.40:3260,1 iqn.2018-10.com.example:target1\r192.168.0.40:3260,1 iqn.2018-10.com.example:target2\r[root@CentOS7-client ~]#\r iscsi login  [root@CentOS7-client ~]# iscsiadm --mode node --targetname iqn.2018-10.com.example:target2 --portal 192.168.0.40 --login\rLogging in to [iface: default, target: iqn.2018-10.com.example:target2, portal: 192.168.0.40,3260] (multiple)\rLogin to [iface: default, target: iqn.2018-10.com.example:target2, portal: 192.168.0.40,3260] successful.\r[root@CentOS7-client ~]#\r iscsi 확인  [root@CentOS7-client ~]# cat /proc/scsi/scsi\rAttached devices:\rHost: scsi2 Channel: 00 Id: 00 Lun: 00\rVendor: VMware, Model: VMware Virtual S Rev: 1.0\rType: Direct-Access ANSI SCSI revision: 02\rHost: scsi4 Channel: 00 Id: 00 Lun: 00\rVendor: NECVMWar Model: VMware SATA CD01 Rev: 1.00\rType: CD-ROM ANSI SCSI revision: 05\rHost: scsi34 Channel: 00 Id: 00 Lun: 00\rVendor: LIO-ORG Model: lv-vol1 Rev: 4.0\rType: Direct-Access ANSI SCSI revision: 05\rHost: scsi34 Channel: 00 Id: 00 Lun: 01\rVendor: LIO-ORG Model: lv-vol2 Rev: 4.0\rType: Direct-Access ANSI SCSI revision: 05\rHost: scsi34 Channel: 00 Id: 00 Lun: 02\rVendor: LIO-ORG Model: lv-vol3 Rev: 4.0\rType: Direct-Access ANSI SCSI revision: 05\r[root@CentOS7-client ~]#\r[root@CentOS7-client ~]# fdisk -l\rDisk /dev/sda: 21.5 GB, 21474836480 bytes, 41943040 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\rDisk label type: dos\rDisk identifier: 0x0009fcf9\rDevice Boot Start End Blocks Id System\r/dev/sda1 * 2048 2099199 1048576 83 Linux\r/dev/sda2 2099200 41943039 19921920 8e Linux LVM\rDisk /dev/mapper/centos-root: 18.2 GB, 18249416704 bytes, 35643392 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\rDisk /dev/mapper/centos-swap: 2147 MB, 2147483648 bytes, 4194304 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\rDisk /dev/sdb: 1073 MB, 1073741824 bytes, 2097152 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 4194304 bytes\rDisk /dev/sdc: 1073 MB, 1073741824 bytes, 2097152 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 4194304 bytes\rDisk /dev/sdd: 1073 MB, 1073741824 bytes, 2097152 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 4194304 bytes\r[root@CentOS7-client ~]#\r iscsi logout  [root@CentOS7-client ~]# iscsiadm --mode node --targetname iqn.2018-10.com.example:target2 --portal 192.168.0.40 -u\rLogging out of session [sid: 2, target: iqn.2018-10.com.example:target2, portal: 192.168.0.40,3260]\rLogout of [sid: 2, target: iqn.2018-10.com.example:target2, portal: 192.168.0.40,3260] successful.\r[root@CentOS7-client ~]# iscsiadm --mode node --targetname iqn.2018-10.com.example:target2 --portal 192.168.0.40 -o delete\r 방화벽 설정  [root@centos7 ~]# firewall-cmd --add-service=iscsi-target --permanent\r[root@centos7 ~]# firewall-cmd --reload\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/multipath/",
	"title": "Multipath",
	"tags": [],
	"description": "",
	"content": "Multipath  Multipath 란\nLinux 에서 Storage 와 연결하여 Volume 을 구성하여 사용하기 위한 솔류션 입니다.\n이중화 구성으로 하여 Lun 을 붙여 사용할수 있으며 한쪽 패스가 끊기더라도 다른 한쪽의 구성으로 사용할수 있습니다.\nRedHat DM Multipath Doc 에서 확인 할수 있습니다.\n  Mutipath test  Mutipath 를 테스트 하기 위해서는 vm 2대가 필요 합니다.\niscsi-server 2Nic 구성 + iscsi-client 구성으로 하여 iscsi 로그인을 Nic 별로 진행 합니다.\n\r iscsi-server 구성\ntargetcli 부분의 설명은 제외 합니다. targetcli 에서 참고 하시면 됩니다.\n  iscsi-server ip 구성     nic 구성 ip 정보     eth0 192.168.0.11   eth1 192.168.0.12     Multiapth 설치   multipath 설치는 iscsi-client 에서 진행 합니다.\n [root@centos7 ~]# yum install -y device-mapper-multipath\r multipath.conf 파일 생성  /etc/multipath 디렉토리에서는 config 파일이 없습니다.\r[root@centos7 ~]# ls -al /etc/multipath/\r합계 12\rdrwxr-xr-x 2 root root 6 8월 16 23:43 .\rdrwxr-xr-x. 79 root root 8192 10월 16 20:04 ..\r[root@centos7 ~]#\rmultipath.conf 를 생성 합니다.\r[root@centos7 ~]# mpathconf --enable\r[root@centos7 ~]# ls -al /etc/multipath.conf\r-rw------- 1 root root 2415 10월 16 20:05 /etc/multipath.conf\r[root@centos7 ~]#\r Multipath Daemon 활성화  [root@centos7 ~]# systemctl enable multipathd\r[root@centos7 ~]# systemctl start multipathd\r iscsi login   iqn 을 확인 합니다.\n확인시 Nic 양쪽으로 확인을 합니다.\n ip 를 통한 iqn 확인\r[root@centos7 ~]# iscsiadm --mode discoverydb --type sendtargets --portal 192.168.0.11 --discover\r192.168.0.11:3260,1 iqn.2018-10.com.example:target2\r192.168.0.11:3260,1 iqn.2018-10.com.example:target1\r[root@centos7 ~]# iscsiadm --mode discoverydb --type sendtargets --portal 192.168.0.12 --discover\r192.168.0.12:3260,1 iqn.2018-10.com.example:target2\r192.168.0.12:3260,1 iqn.2018-10.com.example:target1\r[root@centos7 ~]#\rlogin 한번으로 Nic 두개로 로그인을 진행 합니다.\r[root@centos7 ~]# iscsiadm --mode node --targetname iqn.2018-10.com.example:target2 --login\rLogging in to [iface: default, target: iqn.2018-10.com.example:target2, portal: 192.168.0.11,3260] (multiple)\rLogging in to [iface: default, target: iqn.2018-10.com.example:target2, portal: 192.168.0.12,3260] (multiple)\rLogin to [iface: default, target: iqn.2018-10.com.example:target2, portal: 192.168.0.11,3260] successful.\rLogin to [iface: default, target: iqn.2018-10.com.example:target2, portal: 192.168.0.12,3260] successful.\r[root@centos7 ~]#\r iscsi 볼륨 확인   볼륨 확인시 이중화 된 Volume 을 확인 할수 있습니다.\n [root@centos7 ~]# cat /proc/scsi/scsi\rAttached devices:\rHost: scsi2 Channel: 00 Id: 00 Lun: 00\rVendor: VMware, Model: VMware Virtual S Rev: 1.0\rType: Direct-Access ANSI SCSI revision: 02\rHost: scsi4 Channel: 00 Id: 00 Lun: 00\rVendor: NECVMWar Model: VMware SATA CD01 Rev: 1.00\rType: CD-ROM ANSI SCSI revision: 05\rHost: scsi33 Channel: 00 Id: 00 Lun: 00\rVendor: LIO-ORG Model: lv-vol1 Rev: 4.0\rType: Direct-Access ANSI SCSI revision: 05\rHost: scsi34 Channel: 00 Id: 00 Lun: 00\rVendor: LIO-ORG Model: lv-vol1 Rev: 4.0\rType: Direct-Access ANSI SCSI revision: 05\rHost: scsi33 Channel: 00 Id: 00 Lun: 02\rVendor: LIO-ORG Model: lv-vol3 Rev: 4.0\rType: Direct-Access ANSI SCSI revision: 05\rHost: scsi34 Channel: 00 Id: 00 Lun: 02\rVendor: LIO-ORG Model: lv-vol3 Rev: 4.0\rType: Direct-Access ANSI SCSI revision: 05\rHost: scsi33 Channel: 00 Id: 00 Lun: 01\rVendor: LIO-ORG Model: lv-vol2 Rev: 4.0\rType: Direct-Access ANSI SCSI revision: 05\rHost: scsi34 Channel: 00 Id: 00 Lun: 01\rVendor: LIO-ORG Model: lv-vol2 Rev: 4.0\rType: Direct-Access ANSI SCSI revision: 05\r[root@centos7 ~]#\r multipath.conf 설정  [root@centos7 ~]# vi /etc/multipath.conf\r주석이 없는 설정 부분만 참고를 위하여 작성 하였습니다.\r## Use user friendly names, instead of using WWIDs as names.\rdefaults {\ruser_friendly_names yes\rfind_multipaths yes\r}\r# blocklist 부분은 vm 에서 사용하는 Disk 가 sda 라서 해당 부분만 blacklist 처리 하였습니다.\rblacklist {\r# wwid 26353900f02796769\r# devnode \u0026#34;^(ram|raw|loop|fd|md|dm-|sr|scd|st)[0-9]*\u0026#34;\r# devnode \u0026#34;^hd[a-z]\u0026#34;\rdevnode \u0026#34;sda\u0026#34;\r}\r# 최하단의 blacklist 부분은 주석 처리 합니다.\r#blacklist {\r#}\r multipath.conf 설정참고   Local Disk 의 경우 blacklist 를 해야 합니다.\nHardWare Vendor 에 따라 설정 내용이 상이 합니다.\n blacklist {\r# wwid 26353900f02796769\rdevnode \u0026#34;^(ram|raw|loop|fd|md|dm-|sr|scd|st)[0-9]*\u0026#34;\rdevnode \u0026#34;^hd[a-z]\u0026#34;\rdevnode \u0026#34;^cciss!c[0-9]d[0-9]*\u0026#34;\r}\r multipath Device 확인   mpatha / mpathb / mpathc Device 를 확인할수 있습니다.\n [root@centos7 ~]# systemctl reload multipathd\r[root@centos7 ~]# multipath -ll\rmpathc (36001405d46b28234b334117917856bf6) dm-2 LIO-ORG ,lv-vol3\rsize=1.0G features=\u0026#39;0\u0026#39; hwhandler=\u0026#39;0\u0026#39; wp=rw\r|-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=active\r| `- 33:0:0:2 sdd 8:48 active ready running\r`-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=enabled\r`- 34:0:0:2 sde 8:64 active ready running\rmpathb (36001405c05ff0ac733b4371a3e28011f) dm-1 LIO-ORG ,lv-vol2\rsize=1.0G features=\u0026#39;0\u0026#39; hwhandler=\u0026#39;0\u0026#39; wp=rw\r|-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=active\r| `- 33:0:0:1 sdf 8:80 active ready running\r`-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=enabled\r`- 34:0:0:1 sdg 8:96 active ready running\rmpatha (360014050dfa89d4746f48648330154cb) dm-0 LIO-ORG ,lv-vol1\rsize=1.0G features=\u0026#39;0\u0026#39; hwhandler=\u0026#39;0\u0026#39; wp=rw\r|-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=active\r| `- 33:0:0:0 sdb 8:16 active ready running\r`-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=enabled\r`- 34:0:0:0 sdc 8:32 active ready running\r[root@centos7 ~]#\r multipath Alias 설정   mpatha 로 구성된 Device name 을 바로 사용하여도 상관은 없지만 업무에 맞게 설정을 할수 있습니다.\nmultipath.conf 에서 alias 설정을 진행 하면 됩니다.\n multipath -ll 로 확인한 정보를 이용하여 multipath.conf 파일을 수정 합니다.\rmpathc (36001405d46b28234b334117917856bf6) dm-2 LIO-ORG ,lv-vol3\rsize=1.0G features=\u0026#39;0\u0026#39; hwhandler=\u0026#39;0\u0026#39; wp=rw\r|-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=active\r| `- 33:0:0:2 sdd 8:48 active ready running\r`-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=enabled\r`- 34:0:0:2 sde 8:64 active ready running\rmpathb (36001405c05ff0ac733b4371a3e28011f) dm-1 LIO-ORG ,lv-vol2\rsize=1.0G features=\u0026#39;0\u0026#39; hwhandler=\u0026#39;0\u0026#39; wp=rw\r|-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=active\r| `- 33:0:0:1 sdf 8:80 active ready running\r`-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=enabled\r`- 34:0:0:1 sdg 8:96 active ready running\rmpatha (360014050dfa89d4746f48648330154cb) dm-0 LIO-ORG ,lv-vol1\rsize=1.0G features=\u0026#39;0\u0026#39; hwhandler=\u0026#39;0\u0026#39; wp=rw\r|-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=active\r| `- 33:0:0:0 sdb 8:16 active ready running\r`-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=enabled\r`- 34:0:0:0 sdc 8:32 active ready running\rmultipath -ll 로 확인한 wwid 로 alias 를 설정 합니다. data1 ~ data3 까지 설정 합니다.\r[root@centos7 ~]# vi /etc/multipath.conf\r#blacklist {\r#}\rmultipaths {\rmultipath\rwwid 36001405d46b28234b334117917856bf6\ralias data1\r}\rmultipath {\rwwid 36001405c05ff0ac733b4371a3e28011f\ralias data2\r}\rmultipath {\rwwid 360014050dfa89d4746f48648330154cb\ralias data3\r}\r}\r[root@centos7 ~]#\r multipath alias 확인  [root@centos7 ~]# systemctl reload multipathd\r[root@centos7 ~]# multipath -ll\rOct 16 20:27:42 | missing \u0026#39;{\u0026#39; on line 99 of /etc/multipath.conf\rdata3 (360014050dfa89d4746f48648330154cb) dm-0 LIO-ORG ,lv-vol1\rsize=1.0G features=\u0026#39;0\u0026#39; hwhandler=\u0026#39;0\u0026#39; wp=rw\r|-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=active\r| `- 33:0:0:0 sdb 8:16 active ready running\r`-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=enabled\r`- 34:0:0:0 sdc 8:32 active ready running\rdata2 (36001405c05ff0ac733b4371a3e28011f) dm-1 LIO-ORG ,lv-vol2\rsize=1.0G features=\u0026#39;0\u0026#39; hwhandler=\u0026#39;0\u0026#39; wp=rw\r|-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=active\r| `- 33:0:0:1 sdf 8:80 active ready running\r`-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=enabled\r`- 34:0:0:1 sdg 8:96 active ready running\rdata1 (36001405d46b28234b334117917856bf6) dm-2 LIO-ORG ,lv-vol3\rsize=1.0G features=\u0026#39;0\u0026#39; hwhandler=\u0026#39;0\u0026#39; wp=rw\r|-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=active\r| `- 33:0:0:2 sdd 8:48 active ready running\r`-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=enabled\r`- 34:0:0:2 sde 8:64 active ready running\r[root@centos7 ~]#\r multipath Device 파일 포멧 및 mount   테스트를 위하여 data 디렉토리 생성및 data1 Device 포맷을 진행합니다.\nmultipath 로 이중화 구성이된 Lun 의 경우 /dev/mapper 및에 위치 하고 있습니다.\n 디렉토리를 생성 합니다.\r[root@centos7 ~]# mkdir /data\rext4로 파일 시스템을 포맷 합니다.\r[root@centos7 ~]# mkfs.ext4 /dev/mapper/data1\rmke2fs 1.42.9 (28-Dec-2013)\rFilesystem label=\rOS type: Linux\rBlock size=4096 (log=2)\rFragment size=4096 (log=2)\rStride=0 blocks, Stripe width=1024 blocks\r65536 inodes, 262144 blocks\r13107 blocks (5.00%) reserved for the super user\rFirst data block=0\rMaximum filesystem blocks=268435456\r8 block groups\r32768 blocks per group, 32768 fragments per group\r8192 inodes per group\rSuperblock backups stored on blocks:\r32768, 98304, 163840, 229376\rAllocating group tables: done\rWriting inode tables: done\rCreating journal (8192 blocks): done\rWriting superblocks and filesystem accounting information: done\r[root@centos7 ~]#\rmount 확인\r[root@centos7 ~]# mount /dev/mapper/data1 /data/\r[root@centos7 ~]# df -h\rFilesystem Size Used Avail Use% Mounted on\r/dev/sda3 16G 2.0G 15G 12% /\rdevtmpfs 1.9G 0 1.9G 0% /dev\rtmpfs 1.9G 0 1.9G 0% /dev/shm\rtmpfs 1.9G 12M 1.9G 1% /run\rtmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup\r/dev/sda1 2.0G 168M 1.9G 9% /boot\rtmpfs 378M 0 378M 0% /run/user/0\r/dev/mapper/data1 976M 2.6M 907M 1% /data\r[root@centos7 ~]#\r mutiapth path 확인  [root@centos7 ~]# multipath -ll\rOct 16 20:34:33 | missing \u0026#39;{\u0026#39; on line 99 of /etc/multipath.conf\rdata3 (360014050dfa89d4746f48648330154cb) dm-0 LIO-ORG ,lv-vol1\rsize=1.0G features=\u0026#39;0\u0026#39; hwhandler=\u0026#39;0\u0026#39; wp=rw\r|-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=active\r| `- 33:0:0:0 sdb 8:16 active ready running\r`-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=enabled\r`- 34:0:0:0 sdc 8:32 active ready running\rdata2 (36001405c05ff0ac733b4371a3e28011f) dm-1 LIO-ORG ,lv-vol2\rsize=1.0G features=\u0026#39;0\u0026#39; hwhandler=\u0026#39;0\u0026#39; wp=rw\r|-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=active\r| `- 33:0:0:1 sdf 8:80 active ready running\r`-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=enabled\r`- 34:0:0:1 sdg 8:96 active ready running\rdata1 (36001405d46b28234b334117917856bf6) dm-2 LIO-ORG ,lv-vol3\rsize=1.0G features=\u0026#39;0\u0026#39; hwhandler=\u0026#39;0\u0026#39; wp=rw\r|-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=enabled\r| `- 33:0:0:2 sdd 8:48 active ready running\r`-+- policy=\u0026#39;service-time 0\u0026#39; prio=1 status=active\r`- 34:0:0:2 sde 8:64 active ready running\r[root@centos7 ~]#\r\rLVM Filter 설정\n스토리지 볼륨을 lvm 으로 사용시 lvm.conf 를 수정 하여 lvm 으로 사용할 Device 만 지정 할수 있습니다.\n\rLVM Filter 설정시 주의할점\nLocal disk 로 lvm 을 사용하고 있을시 반드시 해당 내역을 추가 해야 합니다.\n\r LVM Filter 테스트   local disk 를 제외한 multipath 로 구성된 볼륨을 이용하여 lvm 볼륨을 설정 합니다.\n 필터 라인을 찾아서 아래와 같이 추가 합니다. [root@centos7 ~]# vi /etc/lvm/lvm.conf\r# filter = [ \u0026#34;a|.*/|\u0026#34; ]\rfilter =[ \u0026#34;a|/dev/mapper/*|\u0026#34;, \u0026#34;r|.*|\u0026#34; ]\rlvmdiskscan 확인\r[root@centos7 ~]# lvmdiskscan\r/dev/mapper/data3 [ 1.00 GiB]\r/dev/mapper/data2 [ 1.00 GiB]\r/dev/mapper/data1 [ 1.00 GiB]\r0 disks\r3 partitions\r0 LVM physical volume whole disks\r0 LVM physical volumes\r[root@centos7 ~]#\r multipath 관련 명령어 정리     명령어 설명     multipath -d 멀티패스 디바이스의 정보를 표시 합니다.   multipath -v2 멀티패스 디바이스를 설정하고 설정된 정보를 출력합니다.   multipath -v3 멀티패스 디바이스를 설정하고 설정된 정보를 출력합니다.   multipath -ll 설정된 멀티패스 디바이스의 정보를 출력합니다.   multipath -F 모든 미사용 멀티패스 디바이스 정보를 Flush 시킵니다.실제 디바이스는 제거 하지 않습니다.   echo 1 \u0026gt; /sys/class/fc_host/host번호/issue_lib 온라인 상태에서 멀티패스 인식 / fc포트 갯수 만큼 host 번호를 찾아 1값을 넣으면 됩니다.   multipath -r 멀티패스를 인식시 사용   systemctl reload multipathd 멀티패스를 인식시 사용   lspci grep -i fibre   scsi_id \u0026ndash;whitelisted \u0026ndash;device=/dev/sda 특정 device wwid 확인   /lib/udev/scsi_id \u0026ndash;replace-whitespace \u0026ndash;whitelisted \u0026ndash;device /dev/sdb 특정 device wwid 확인   scsi_id –g –u –s /dev/sda Centos5 에서 wwid 확인   systool -av -c fc_host grep speed   systool -c fc_host -v HBA 카드 정보 확인 path link port wwn 확인   systool -c fc_remote_ports -v –d HBA카드에 연결된 타겟 디바이스의 wwpn , wwnn 확인   systool -c scsi_disk -v 스토리지의 캐시타입 , RAID 타입 , Time OUT , 제조사 확인    HBA 정보 확인 # lspci| grep -i fibre\r\rmultipath 관련 패키지\nsystool 패키지 sysfsutils\nscsi-recan 패키지 sg3_utils\n\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/ftp/",
	"title": "FTP",
	"tags": [],
	"description": "",
	"content": "FTP CentOS 에서는 FTP Server 로 vsftpd 를 이용합니다.\nvsftpd 에서 자세한 정보를 확인할수 있습니다.\n\r vsftpd 설치  [root@centos7 ~]# yum install vsftpd\r vsftpd daemon 실행 및 활성화  [root@centos7 ~]# systemctl enable vsftpd\r[root@centos7 ~]# systemctl start vsftpd\r user 접속 설정 파일   vsftpd 에서는 기본으로 root 유저의 접속이 Denied 되어 있습니다.\nroot 접속이 필요 한 경우 user_list 와 ftpusers 파일의 root 라인에 # 주석처리가 필요 합니다.\n [root@centos7 ~]# cat /etc/vsftpd/user_list\r# vsftpd userlist\r# If userlist_deny=NO, only allow users in this file\r# If userlist_deny=YES (default), never allow users in this file, and\r# do not even prompt for a password.\r# Note that the default vsftpd pam config also checks /etc/vsftpd/ftpusers\r# for users that are denied.\rroot\rbin\rdaemon\radm\rlp\rsync\rshutdown\rhalt\rmail\rnews\ruucp\roperator\rgames\rnobody\r[root@centos7 ~]# cat /etc/vsftpd/ftpusers\r# Users that are not allowed to login via ftp\rroot\rbin\rdaemon\radm\rlp\rsync\rshutdown\rhalt\rmail\rnews\ruucp\roperator\rgames\rnobody\r[root@centos7 ~]#\r vsftpd.conf Default 설정값  [root@centos7 ~]# cat /etc/vsftpd/vsftpd.conf\ranonymous_enable=YES local_enable=YES write_enable=YES\rlocal_umask=022\r#anon_upload_enable=YES\r#anon_mkdir_write_enable=YES\rdirmessage_enable=YES\rxferlog_enable=YES\rconnect_from_port_20=YES\r#chown_uploads=YES\r#chown_username=whoever\r#xferlog_file=/var/log/xferlog\rxferlog_std_format=YES\r#idle_session_timeout=600\r#data_connection_timeout=120\r#nopriv_user=ftpsecure\r#async_abor_enable=YES\r#ascii_upload_enable=YES\r#ascii_download_enable=YES\r# You may fully customise the login banner string:\r#ftpd_banner=Welcome to blah FTP service.\r#deny_email_enable=YES\r#banned_email_file=/etc/vsftpd/banned_emails\r#chroot_local_user=YES\r#chroot_list_enable=YES\r# (default follows)\r#chroot_list_file=/etc/vsftpd/chroot_list\r#ls_recurse_enable=YES\rlisten=NO\rlisten_ipv6=YES\rpam_service_name=vsftpd\ruserlist_enable=YES\rtcp_wrappers=YES\r vsftpd.conf 옵션 정리   /etc/vsftpd/vsftpd.conf 내용으로 착성 되었습니다.\n    설정값 설명     anonymous_enable anonymous 사용자 접속 허용여부   local_enable local 사용자 허용여부   write_enable write 명령어 허용여부   local_umask local 사용자용 umask값   anon_upload_enable anonymous 사용자 upload 허용여부   anon_mkdir_write_enable anonymous 사용자 디렉토리 생서 허용여부   dirmessage_enable 접속시 출력 메세지 사용자 홈디렉토리에 .message 파일에 작성   xferlog_enable xferlog 표준 포맷으로 로그를 남길지 여부   connect_from_port_20 20번 포트의 데이터전송 연결을 허용여부   chown_uploads anonymous 사용자가 업로드한 파일의 소유권을 자동으로 변경하도록 설정   chown_username anonymous 사용자가 업로드한 파일의 소유권을 변경할 유저명을 설정   xferlog_file 파일 전송 로그를 기록할 파일명   xferlog_std_format xferlog 형식으로 ftp log를 남기기 위한 설정 detail 로그 설정시 no 로 설정합니다.   idle_session_timeout i클라이언트 세션을 끊을 때 까지의 대기시간   data_connection_timeout data connection을 끊을때 까지의 대기시간   nopriv_user vsftpd 구동될 서버의 유저를 설정   async_abor_enable async ABOR 명령어를 사용여부   ascii_upload_enable ASCII 모드로 업로드 허용여부   ascii_download_enable ASCII 모드로 다운로드 허용여부   ftpd_banner ftp 접속 메세지 설정   deny_email_enable 로그인 거부 리스트 사용에 대한 설정   banned_email_file 로그인 거부 리스트 사용에 대한 설정   chroot_local_user local user chroot 활성여부   chroot_list_enable 특정 사용자 list를 지정하여 chroot 적용여부   chroot_list_file chroot_list_enable 과 같이 사용됩니다.   ls_recurse_enable 디렉토리 내용을 출력할때 cache 사용여부   listen standalone으로 운영시 설정   listen_ipv6 ipv6 로 vsftpd 운영시 사용   pam_service_name vsftpd 에서 사용할 pam 서비스 이름   userlist_enable user_list 사용여부   tcp_wrappers tcp_wrappers 사용여부 hosts.allow / hosts.deny 사용여부     방화벽 추가  [root@centos7 ~]# firewall-cmd --permanent --add-port=21/tcp\r[root@centos7 ~]# firewall-cmd --reload\r anonymous user 설정및 특정 디렉토리로 접속  anonymous ftp 사용\nanonymous ftp 경우 보안상 위험성이 있기 때문에 사용을 권장 하지 않습니다.\nsystem local user 가 아닌 ftp 사용의 경우 Virtual User 를 사용하는것이 좋습니다.\n\r vsftpd.conf 에서 anonymous_enable=yes 가 되어 있을 경우\ndefault 접속 디렉토리는 /var/ftp/pub 입니다.\n  anonymous 디렉토리 생성 및 권한 설정   /anon-data 디렉토리에 바로 권한을 설정 할수 없음으로 익명 업로드용 디렉토리를 생성 하고\n권한을 777 로 줍니다.\n [root@centos7 ~]# mkdir -p /anon-data/anonymous\r[root@centos7 ~]# chmod a-w /anon-data/\r[root@centos7 ~]# chmod 777 /anon-data/anonymous/\r vsftpd.conf 설정 변경및 daemon 재시작  [root@centos7 ~]# vi /etc/vsftpd/vsftpd.conf\ranon_root=/anon-data\ranon_upload_enable=YES\r[root@centos7 ~]# systemctl restart vsftpd\r 접속 테스트   anonymous 사용자 업로드용 디렉토리는 /anon-data/anonymous 입니다.\n [root@centos7 ~]# ftp localhost\rTrying ::1...\rConnected to localhost (::1).\r220 (vsFTPd 3.0.2)\rName (localhost:root): anonymous\r331 Please specify the password.\rPassword:\r230 Login successful.\rRemote system type is UNIX.\rUsing binary mode to transfer files.\rftp\u0026gt; ls\r229 Entering Extended Passive Mode (|||32151|).\r150 Here comes the directory listing.\rdrwxrwxrwx 2 0 0 6 Oct 15 08:21 anonymous\r226 Directory send OK.\rftp\u0026gt;\r\ractive mode 와 passive mode\nactive mode 의 경우 ftp 데이터 통신시 20번 포트를 이용한 방법 입니다.\npassive mode 는 1024 port 이후 ftp 데이터 포트를 미리 지정하여 해당 포트로 Client 가 접속하여 이용하는 방식입니다.\n\r vsftp passive mode 사용   vsftpd.conf 를 수정 합니다.\n [root@centos7 ~]# vi /etc/vsftpd/vsftpd.conf\r#passive mod Settings\rpasv_enable=YES\rpasv_min_port=40001\rpasv_max_port=40020\r[root@centos7 ~]# systemctl restart vsftpd\r 방화벽 설정  [root@centos7 ~]# firewall-cmd --permanent --zone=public --add-port=40001-40020/tcp\r[root@centos7 ~]# firewall-cmd --reload\r ftp 접속 테스트   별도의 Client 를 이용하여 접속 합니다.\n [root@CentOS7-client ~]# ftp 192.168.0.10\rConnected to 192.168.0.10 (192.168.0.10).\r220 (vsFTPd 3.0.2)\rName (192.168.0.10:root): test\r331 Please specify the password.\rPassword:\r230 Login successful.\rRemote system type is UNIX.\rUsing binary mode to transfer files.\rftp\u0026gt; ls\r227 Entering Passive Mode (192,168,0,10,156,75).\r150 Here comes the directory listing.\r226 Directory send OK.\rftp\u0026gt; pwd\r257 \u0026#34;/home/test\u0026#34;\rftp\u0026gt; 221 Goodbye.\r[root@CentOS7-client ~]#\r vsftp port 접속 확인   test 시 Client 에서 ftp 2번 로그 하여 40001 과 40009 번 포트를 사용하는것을 확인 할수 있습니다.\n [root@centos7 ~]# netstat -antp |grep -i 4000\rtcp6 0 0 192.168.0.10:40009 192.168.0.4:41048 TIME_WAIT -\rtcp6 0 0 192.168.0.10:40001 192.168.0.4:41015 TIME_WAIT -\r[root@centos7 ~]#\r Vsftpd Virtual Users Setting 1   Virtual Users 공통 사항\nyum install db4-utils db4 설치가 필요 합니다.\n  vsftpd 를 이용한 virtual user 구성 방법입니다.\nSetting 1 에서는 password를 암호화 하여 랜덤하게 생성합니다.\nUser password 를 지정 할수 없으며, 공유디렉토리가 아닌 Virtual User 별 디렉토리로 접근합니다.\n  virtual user 구성에 필요한 디렉토리를 생성 합니다.  [root@centos7 ~]# mkdir /etc/vsftpd/vconf\r[root@centos7 ~]# mkdir -p /data/vftp\r[root@centos7 ~]# useradd -s /sbin/nologin -d /data/vftp vsftpd\r[root@centos7 ~]# chown -R vsftpd:vsftpd /data/vftp\r vsftpd.conf 설정  [root@centos7 ~]# vi /etc/vsftpd/vsftpd.conf\r변경 anonymous_enable=NO\r#xferlog_std_format=YES\ridle_session_timeout=900\rnopriv_user=vsftpd\r#chroot_list_enable=YES\rlisten=YES\rlisten_ipv6=NO\r추가 allow_writeable_chroot=YES\rguest_enable=YES\rguest_username=vsftpd\rlocal_root=/data/vftp/$USER\ruser_sub_token=$USER\rvirtual_use_local_privs=YES\ruser_config_dir=/etc/vsftpd/vconf\r pam.d 설정   default vsftpd pam.d 설정 파일을 별도로 보관 합니다.\nvsftpd pam.d 파일에 아래와 같이 설정을 합니다.\n [root@centos7 ~]# cd /etc/pam.d/\r[root@centos7 pam.d]# cp vsftpd vsftpd.org\r[root@centos7 pam.d]# vi vsftpd\r#%PAM-1.0\rauth required pam_userdb.so db=/etc/vsftpd/password crypt=crypt\raccount required pam_userdb.so db=/etc/vsftpd/password crypt=crypt\rsession required pam_loginuid.so\r vsftpd 재시작  [root@centos7 ~]# systemctl restart vsftpd\r virtual ftp 사용자 생성  [root@centos7 ~]# mkdir -p /data/vftp/test1\r[root@centos7 ~]# chown -R vsftpd:vsftpd /data/vftp\r/etc/vsftpd/vconf/test1 파일 생성 [root@centos7 ~]# echo \u0026#39;dirlist_enable=YES\rdownload_enable=YES\rlocal_root=/data/vftp/test1\rwrite_enable=YES\u0026#39; \u0026gt; /etc/vsftpd/vconf/test1\rtest1 유저와 password 를 생성 합니다. [root@centos7 ~]# echo \u0026#39;test1\u0026#39; | tee /etc/vsftpd/password{,-nocrypt} \u0026gt; /dev/null\r[root@centos7 ~]# myval=$(openssl rand -base64 6)\r[root@centos7 ~]# echo $myval \u0026gt;\u0026gt; /etc/vsftpd/password-nocrypt\r[root@centos7 ~]# echo $(openssl passwd -crypt $myval) \u0026gt;\u0026gt; /etc/vsftpd/password\r[root@centos7 ~]# db_load -T -t hash -f /etc/vsftpd/password /etc/vsftpd/password.db\r[root@centos7 ~]# db_dump -d a /etc/vsftpd/password.db | grep len\r[000] 4090 len: 5 data: test1\r[001] 4076 len: 13 data: FCq/W4hz1lHuA\r[root@centos7 ~]# cat /etc/vsftpd/password\rtest1\rFCq/W4hz1lHuA\rpassword-nocrypt 의 경우 사용할수 있는 password 파일 입니다. [root@centos7 ~]# cat /etc/vsftpd/password-nocrypt\rtest1\rb4Ahnz0Z\r[root@centos7 ~]#\r ftp 접속 테스트  [root@centos7 ~]# ftp localhost\rTrying ::1...\rftp: connect to address ::1연결이 거부됨\rTrying 127.0.0.1...\rConnected to localhost (127.0.0.1).\r220 (vsFTPd 3.0.2)\rName (localhost:root): test1\r331 Please specify the password.\rPassword:\r230 Login successful.\rRemote system type is UNIX.\rUsing binary mode to transfer files.\rftp\u0026gt; ls\r227 Entering Passive Mode (127,0,0,1,22,107).\r150 Here comes the directory listing.\r226 Directory send OK.\rftp\u0026gt; pwd\r257 \u0026#34;/\u0026#34;\rftp\u0026gt; quit\r221 Goodbye.\r[root@centos7 ~]#\r 방화벽 설정  [root@centos7 ~]# firewall-cmd --permanent --add-service=ftp\r[root@centos7 ~]# firewall-cmd --reload\r Selinux 설정  [root@centos7 ~]# setsebool -P ftpd_full_access 1\r Virtual User Setting 2   Virtual User Setting 2에서는 User 별 패스워드를 지정 할수 있습니다.\n  Virtual User 디렉토리   local_root 설정에서 Virtual User 의 디렉토리를 설정 할수 있습니다.\n공통 디렉토리 사용시 /data/vftp 로 설정 하시면 됩니다.\n  vsftpd.conf 설정  [root@centos7 ~]# vi /etc/vsftpd/vsftpd.conf\r변경 anonymous_enable=NO\r#xferlog_std_format=YES\ridle_session_timeout=900\rnopriv_user=vsftpd\r#chroot_list_enable=YES\rlisten=YES\rlisten_ipv6=NO\r추가 allow_writeable_chroot=YES\rguest_enable=YES\rguest_username=vsftpd\rlocal_root=/data/vftp/$USER\ruser_sub_token=$USER\rvirtual_use_local_privs=YES\r pam.d 설정  [root@centos7 ~]# vi /etc/pam.d/vsftpd\r#%PAM-1.0\rauth required pam_userdb.so db=/etc/vsftpd/password\raccount required pam_userdb.so db=/etc/vsftpd/password\rsession required pam_loginuid.so\r vftp 디렉토리 생성  [root@centos7 ~]# mkdir -p /data/vftp/test1\r[root@centos7 ~]# useradd -s /sbin/nologin -d /data/vftp vsftpd\r[root@centos7 ~]# chown -R vsftpd:vsftpd /data/vftp\r virtual user 생성  [root@centos7 ~]# vi vftp.txt\rtest1 password\rtest2\rpassword\rtest3\rpassword\r password.db 생성 및 패스워드 확인  [root@centos7 ~]# db_load -T -t hash -f /root/vftp.txt /etc/vsftpd/password.db\r[root@centos7 ~]# chmod 600 /etc/vsftpd/password.db\r[root@centos7 ~]# rm vftp.txt\r[root@centos7 ~]# db_dump -d a /etc/vsftpd/password.db | grep len\r[000] 4090 len: 5 data: test2\r[001] 4081 len: 8 data: password\r[000] 4090 len: 5 data: test1\r[001] 4081 len: 8 data: password\r[002] 4075 len: 5 data: test3\r[003] 4066 len: 8 data: password\r[root@centos7 ~]#\r\rvftp.txt 파일 삭제\nVirtual User Setting 2 는 password 파일을 만들어 User 를 password 를 지정 합니다.\n암호화 되지 않은 password 파일은 보안상 좋지 않으며 꼭, ftp user 생성시 만든 password 파일을 삭제 해야 합니다.\n\r 접속 확인  [root@centos7 ~]# ftp localhost\rTrying ::1...\rftp: connect to address ::1연결이 거부됨\rTrying 127.0.0.1...\rConnected to localhost (127.0.0.1).\r220 (vsFTPd 3.0.2)\rName (localhost:root): test1\r331 Please specify the password.\rPassword:\r230 Login successful.\rRemote system type is UNIX.\rUsing binary mode to transfer files.\rftp\u0026gt; ls\r227 Entering Passive Mode (127,0,0,1,192,110).\r150 Here comes the directory listing.\r226 Directory send OK.\rftp\u0026gt; pwd\r257 \u0026#34;/\u0026#34;\rftp\u0026gt; quit\r221 Goodbye.\r[root@centos7 ~]#\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/postfix/",
	"title": "Postfix",
	"tags": [],
	"description": "",
	"content": "Postfix What is Postfix\nWietse Venema의 메일 서버는 널리 사용되는 Sendmail 프로그램의 대안으로 IBM 연구에서 시작된 Mail Server 입니다.\nPostfix Official Site  에서 자세한 정보를 확인할수 있습니다.\n\rMail Server 구축시 참고사항\n대략의 스팸메일 때문에 메일 서버를 구축하여도 포털 메일에서 확인이 안될수 있습니다.\n메일 서버 운영시 반드시 화이트 리스트에 등록을 해야 합니다. 문서내용은 테스트 용으로만 사용하시길 바랍니다. kisarbl.or.kr 에서 등록할수 있습니다.\n\rCentos7 or RHEL7\nCentos7 의 경우 Default 로 postfix 가 설치 되어 구동 되고 있습니다.\n\r hostname 설정  root@centos7 ~]# hostnamectl set-hostname mail.test.com\r Postfix 설치  [root@mail ~]# yum install -y postfix\r Postfix 실행 및 Daemon 활성화  [root@mail ~]# systemctl start postfix\r[root@mail ~]# systemctl enable postfix\r Postfix 설정  [root@cmail ~]# vi /etc/postfix/main.cf\rmyhostname = mail.test.com\rmydomain = test.com\rmyorigin = $mydomain\rinet_interfaces = all\r#inet_interfaces = $myhostname\r#inet_interfaces = $myhostname, localhost\r#inet_interfaces = localhost\rmydestination = $myhostname, localhost.$mydomain, localhost, $mydomain\r#relay_domains = $mydestination\r main.cf 파일 설정값     설정값 설정값 Default 설정     queue_directory mail Queue 디렉토리 /var/spool/postfix   command_directory postfix command 디렉토리 /usr/sbin   daemon_directory postfix daemon 디렉토리 /usr/libexec/postfix   data_directory postfix data 디렉토리 /var/lib/postfix   mail_owner postfix owner 설정 postfix   myhostname hostname 설정 #myhostname = host.domain.tld   mydomain domain 설정 #mydomain = domain.tld   myorigin myorigin = $mydomain #myorigin = $myhostname   inet_interfaces 메일을 수신에 사용할 네트워크 인터페이스를 지정 #inet_interfaces = all   inet_protocols Default 값 사용 inet_protocols = all   proxy_interfaces proxy 인터페이스 사용시 설정 #proxy_interfaces =   mydestination 메일 서버 수신 설정 mydestination = $myhostname, localhost.$mydomain, localhost   relay_domains 외부로 Relay 시킬경우 사용 #relay_domains = $mydestination   home_mailbox 사용자 홈디렉토리에 저장시 사용 #home_mailbox = Maildir/   mail_spool_directory mail spool 디렉토리 설정 #mail_spool_directory = /var/spool/mail   smtpd_banner 클라이언트가 메일 서버 접속시 보여줄 Server 이름 #smtpd_banner = $myhostname ESMTP $mail_name     postfix Daemon 재시작  [root@mail ~]# systemctl restart postfix\r 방화벽 추가  [root@mail ~]# firewall-cmd --add-service=smtp --permanent\r[root@mail ~]# firewall-cmd --reload\r Local mail test  [root@mail ~]# yum install mutt\r[root@mail ~]# su - test\rLast login: Fri Oct 26 21:10:47 KST 2018 from 192.168.0.1 on pts/0\r[test@mail ~]$ mutt\r/home/test1/Mail does not exist. Create it? ([yes]/no): no no 를 눌러 별도로 home mail 디렉토리를 생성하지 않습니다. m 을 눌러 메일을 작성 합니다. To: test1\rSubject: mail test\rmail server test\r1\r2\r3\r4\r5\r y 를 눌러 메일을 전송 합니다.    mail 확인   test1 user 로 유저를 변경후 mutt 로 메일을 확인 합니다.\n [test@mail ~]$ su - test1\rPassword:\rLast login: Sat Oct 27 07:34:55 KST 2018 on pts/0\r[test1@mail ~]$ mutt\r  mutt 확인시 test@mail.test.com 에서 온 메일을 확인할수 있습니다.\n  해당 라인에서 엔터를 쳐서 메일 내용을 확인 합니다.\n  muttrc 설정\nmutt 사용시 /home/User/Mail does not exist. Create it? ([yes]/no): 의 경우 .muttrc 가 설정 되어 있지 않아 나오는 메시지 입니다.\n\r .muttrc 파일 생성  [test1@mail ~]$ vi .muttrc\rset folder=/var/spool/mail\rset mbox=+daedalus\r postfix 메일 큐 명령어  # 메일 큐 비우기 [root@rhel7 ~]# postfix -f # 메일 큐에 쌓인 메일 확인 [root@rhel7 ~]# mailq # 메일큐 전체 삭제 [root@rhel7 ~]# postsuper -d ALL\r\rmail server test\n2대의 vm 을 이용하여 mail server 를 구성 합니다.\n서로 다른 서버에서 mail 을 보내서 정상적으로 메일이 발신/수신 되는지 확인 합니다.\n별도의 dns 서버 셋팅이 필요 합니다.\n\r   hostname ip mail user     mail.test.com 192.168.0.20 test01   mail.test1.com 192.168.0.30 user01     bind 설정\nbind 설치 에서 참고 하시면 됩니다.  dns 구성은 named-chroot 구성 입니다. 설정디렉토리는 다음과 같습니다. [root@ns ~]# cd /var/named/chroot/var/named/\r[root@ns etc]# vi named.rfc1912.zones\rzone \u0026#34;test1.com\u0026#34; In {\rtype master;\rfile \u0026#34;test1.com\u0026#34;;\rallow-update { none; };\r};\r[root@ns etc]# cd /var/named/chroot/var/named/\r[root@ns named]# cp test.com test1.com\rtest.com 설정 [root@ns named]# cat test.com\r$TTL 3H\r@ IN SOA @ ns.test.com. (\r0 ; serial\r1D ; refresh\r1H ; retry\r1W ; expire\r3H ) ; minimum\rIN NS ns.test.com.\rIN MX 10 mail.test.com.\rIN A 192.168.0.20\rmail IN A 192.168.0.20\rns IN A 192.168.0.20\rwww IN A 192.168.0.20\r[root@ns named]# vi test1.com\r$TTL 3H\r@ IN SOA @ ns.test1.com. (\r0 ; serial\r1D ; refresh\r1H ; retry\r1W ; expire\r3H ) ; minimum\rIN NS ns.test1.com.\rIN MX 10 mail.test1.com.\rIN A 192.168.0.30\rmail IN A 192.168.0.30\rns IN A 192.168.0.30\rwww IN A 192.168.0.30\r[root@ns named]# chown root:named test1.com\r[root@ns named]# systemctl restart named-chroot\r[root@ns named]# nslookup\r\u0026gt; server\rDefault server: 192.168.0.10\rAddress: 192.168.0.10#53\r\u0026gt; mail.test.com\rServer: 192.168.0.10\rAddress: 192.168.0.10#53\rName: mail.test.com\rAddress: 192.168.0.20\r\u0026gt; mail.test1.com\rServer: 192.168.0.10\rAddress: 192.168.0.10#53\rName: mail.test1.com\rAddress: 192.168.0.30\r\u0026gt;\r[root@ns named]#\r resolv.conf 를 변경 합니다.   mail.test.com / mail.test1.com 모두 변경 합니다.\n [root@mail ~]# vi /etc/resolv.conf\r# Generated by NetworkManager\r#nameserver 8.8.8.8\rnameserver 192.168.0.10\r test.com -\u0026gt; test1.com 의 user01 로 메일을 보냅니다.  [root@mail ~]# su - user01\r[test01@mail ~]$ mutt\rTo: user01@mail.test1.com\rSubject: mail.test.com server test\rtest.com mail Server test\r1\r2\r3\r4\r5\rFrom: test01@mail.test.com\rTo: user01@mail.test1.com\rCc:\rBcc:\rSubject: test.com mail Server test\rReply-To:\rFcc: ~/sent\rSecurity: None\ry를 눌러 메일을 전송 합니다.  mail.test1.com 에서 메일을 확인 합니다.  [root@mail ~]# su - user01\rLast login: Sun Oct 28 08:18:51 KST 2018 on pts/0\r[user01@mail ~]$ mutt\r mutt 로 확인시 메일이 한통 도착한걸 확인 할수 있습니다.   mail.test.com 에서 온 메일을 확인 할수 있습니다.   mail.test1.com -\u0026gt; mail.test.com 으로 메일을 전송해 봅니다.  Web mail 운영시 참고사항\ndovecot , roundcube 를 이용하여 web mail 을 구성할수 있습니다.\nmail Server 에서는 자체 web-mail GUI 환경을 제공 하지 않습니다. gui 부분은 roundcube 로 사용을 하시면 편하게 web에서 메일을 볼수 있습니다.\ndovcot 의 경우 Unix/Linux 환경에서 사용할수 있는 IMAP / POP3 전자메일 서버 입니다.\n\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/samba/",
	"title": "Samba",
	"tags": [],
	"description": "",
	"content": "Samba network 를 통한 이기종 linux / window 파일 디렉토리 공유\n프린터 공유시 Samba 를 이용합니다.\nSamba Officail Site에서 자세한 정보를 확인 할수 있습니다.\n프린트 공유시에는 Samba Server 에 cups Daemon 이 동작해야 합니다.\n\r Samba 설치  [root@centos7 ~]# yum install -y samba-*\r Samba Daemon 실행 및 활성화  [root@centos7 ~]# systemctl start smb\r[root@centos7 ~]# systemctl enable smb\r\rSamba 설정 파일\nlmhosts 파일의 경우 삼바서버 NetBIOS 호스트 파일 입니다.\n삼바서버에서 사용하는 호스트 정보파일 입니다.\nsmb.conf 와 smb.conf.example 파일이 있습니다.\nexample 파일은 참고용 파일이며 설정값이 들어가는 파일은 smb.conf 파일 입니다.\n\r[root@centos7 ~]# ls -al /etc/samba/\r합계 32\rdrwxr-xr-x 2 root root 61 10월 16 22:07 .\rdrwxr-xr-x. 81 root root 8192 10월 16 21:59 ..\r-rw-r--r-- 1 root root 20 8월 17 00:49 lmhosts\r-rw-r--r-- 1 root root 706 8월 17 00:49 smb.conf\r-rw-r--r-- 1 root root 11327 8월 17 00:49 smb.conf.example\r[root@centos7 ~]#\r[root@centos7 ~]# cat /etc/samba/smb.conf\r# See smb.conf.example for a more detailed config file or\r# read the smb.conf manpage.\r# Run \u0026#39;testparm\u0026#39; to verify the config is correct after\r# you modified it.\r[global]\rworkgroup = SAMBA\rsecurity = user\rpassdb backend = tdbsam\rprinting = cups\rprintcap name = cups\rload printers = yes\rcups options = raw\r[homes]\rcomment = Home Directories\rvalid users = %S, %D%w%S\rbrowseable = No\rread only = No\rinherit acls = Yes\r[printers]\rcomment = All Printers\rpath = /var/tmp\rprintable = Yes\rcreate mask = 0600\rbrowseable = No\r[print$]\rcomment = Printer Drivers\rpath = /var/lib/samba/drivers\rwrite list = @printadmin root\rforce group = @printadmin\rcreate mask = 0664\rdirectory mask = 0775\r[root@centos7 ~]#\r smb.conf 수정  [root@centos7 ~]# vi /etc/samba/smb.conf\r[share]\rcomment = share data\rpath = /smb-test\rprintable = no\rpublic = no\rwritable = yes\rcreate mask = 0777\rdirectory mask = 0777\r share 필드 설명     설정값 설명     comment 공유 디렉토리 설명   path 공유 디렉토리 위치   printable printer 사용 여부   public 익명접근 가능여부   writable 쓰기 가능여부   create mask 파일 권한   directory mask 디렉토리 권한     global 필드 설명     설정값 설명     workgroup 작업구룹명 삼바 서버와 클라이언트의 작업구릅은 반드시 일치해야 합니다.   security share 값은 더이상 사용되지 않습니다. user Default 사용권장   passdb backend 패스워드에 대한 인증방식   map to guest 계정이 없는 사용자를 Guest 로 지정 합니다.   printing printing server 로 사용시 설정 Default 사용권장   printcap name printing server 로 사용시 설정 Default 사용권장   load printers printing server 사용시 설정   server string 윈도우 네트워크 환경에서 보여줄 삼바 서버에 대한 설명   interfaces Samba Server 인터페이스를 지정 할수 있습니다.   hosts allow 접근 호스트 allow 설정   unix charset 문자셋 을 지정 할수 있습니다. utf-8 설정을 지정 할수 있습니다.   cpus options cpus 옵션을 지정     설정 내용 참고\n아래 내용은 단순 참고 자료 입니다.  [global]\rworkgroup = SAMBA\rsecurity = user\rpassdb backend = tdbsam\rmap to guest = Bad User\rprinting = cups\rprintcap name = cups\rload printers = yes\rcups options = raw\rserver string = Samba Server Version %v\rinterfaces = lo ens33 192.168.0.10/24\rhosts allow = 192.168.0\runix charset=utf-8\r smb.conf 오류 체크  [root@centos7 ~]# testparm\rLoad smb config files from /etc/samba/smb.conf\rrlimit_max: increasing rlimit_max (1024) to minimum Windows limit (16384)\rProcessing section \u0026#34;[homes]\u0026#34;\rProcessing section \u0026#34;[printers]\u0026#34;\rProcessing section \u0026#34;[print$]\u0026#34;\rProcessing section \u0026#34;[share]\u0026#34;\rProcessing section \u0026#34;[pub]\u0026#34;\rLoaded services file OK.\rServer role: ROLE_STANDALONE\rPress enter to see a dump of your service definitions\r# Global parameters\r[global]\rmap to guest = Bad User\rprintcap name = cups\rsecurity = USER\rworkgroup = SAMBA\ridmap config * : backend = tdb\rcups options = raw\r[homes]\rbrowseable = No\rcomment = Home Directories\rinherit acls = Yes\rread only = No\rvalid users = %S %D%w%S\r[printers]\rbrowseable = No\rcomment = All Printers\rcreate mask = 0600\rpath = /var/tmp\rprintable = Yes\r[print$]\rcomment = Printer Drivers\rcreate mask = 0664\rdirectory mask = 0775\rforce group = @printadmin\rpath = /var/lib/samba/drivers\rwrite list = @printadmin root\r[share]\rcomment = share data\rcreate mask = 0777\rdirectory mask = 0777\rpath = /smb-test\rread only = No\r[pub]\rcomment = public data\rcreate mask = 0777\rdirectory mask = 0777\rguest ok = Yes\rpath = /public\rread only = No\r[root@centos7 ~]#\r Samba Test 디렉토리 생성 및 User 생성  [root@centos7 ~]# mkdir /smb-test\r[root@centos7 ~]# chmod 777 /smb-test\r[root@centos7 ~]# smbpasswd -a test\rNew SMB password:\rRetype new SMB password:\rAdded user test.\r[root@centos7 ~]#\r\rSamba mount 테스트\n윈도우즈 이용시 윈도우 key + R 에서 \\host-ip 로 접속 userID/Pass 입력후 접속 하시면 됩니다.\nLinux 이용시 아래와 같이 mount -t cifs -o username=x,password=xx //호스트/공유이름 /마운트포인트 로 Mount 하시면 됩니다.\n\r[root@centos75 ~]# mount -t cifs -o username=test,password=test-password //192.168.0.10/share /mnt\r[root@centos75 ~]# df -h\rFilesystem Size Used Avail Use% Mounted on\r/dev/sda3 16G 4.6G 12G 29% /\rdevtmpfs 1.9G 0 1.9G 0% /dev\rtmpfs 1.9G 0 1.9G 0% /dev/shm\rtmpfs 1.9G 13M 1.9G 1% /run\rtmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup\r/dev/sda1 2.0G 178M 1.9G 9% /boot\rtmpfs 378M 28K 378M 1% /run/user/0\rtmpfs 378M 12K 378M 1% /run/user/42\r//192.168.0.10/share 16G 2.0G 15G 13% /mnt\r[root@centos75 ~]#\r\rsmbclient Samba Server 확인\nsmbclient 명령어를 이용하여 samba Server 의 정보를 확인 할수 있습니다.\n\r[root@centos75 ~]# smbclient -L 192.168.0.10 -U%\rSharename Type Comment\r--------- ---- -------\rprint$ Disk Printer Drivers\rshare Disk share data\rIPC$ IPC IPC Service (Samba 4.7.1)\rReconnecting with SMB1 for workgroup listing.\rServer Comment\r--------- -------\rWorkgroup Master\r--------- -------\r[root@centos75 ~]#\r\rsmbclient Samba Server 접속\n마운트 없이 단순하게 접속하여 확인시 사용합니다.\n-U 옵션을 사용하여 유저를 지정 할수 있습니다.\n\r[root@centos75 ~]# smbclient -U test //192.168.0.10/share\rEnter SAMBA\\test\u0026#39;s password:\rTry \u0026#34;help\u0026#34; to get a list of possible commands.\rsmb: \\\u0026gt; ls\r. D 0 Tue Oct 16 22:32:17 2018\r.. DR 0 Tue Oct 16 22:22:35 2018\r16765952 blocks of size 1024. 14682328 blocks available\rsmb: \\\u0026gt; pwd\rCurrent directory is \\\\192.168.0.10\\share\\\rsmb: \\\u0026gt; quit\r[root@centos75 ~]#\r Samba 접속자 확인\n접속자 확인시 smbstatus 를 사용 합니다.\n [root@centos7 ~]# smbstatus\rSamba version 4.7.1\rPID Username Group Machine Protocol Version Encryption Signing\r----------------------------------------------------------------------------------------------------------------------------------------\r4007 test test 192.168.0.11 (ipv4:192.168.0.11:51252) NT1 - -\rService pid Machine Connected at Encryption Signing\r---------------------------------------------------------------------------------------------\rshare 4007 192.168.0.11 Tue Oct 16 10:42:30 PM 2018 KST - -\rIPC$ 4007 192.168.0.11 Tue Oct 16 10:42:30 PM 2018 KST - -\rNo locked files\r[root@centos7 ~]#\r Public share 디렉토리\n별도의 유저 없이 사용할수 있는 디렉토리 설정의 경우 아래 내용으로 사용이 가능 합니다.\n설정참고 wiki.samba.org\n [root@centos7 ~]# vi /etc/samba/smb.conf\r[global]\rworkgroup = SAMBA\rsecurity = user\rpassdb backend = tdbsam\rmap to guest = Bad User\r[pub]\rcomment = public data\rpath = /public\rprintable = no\rpublic = yes\rwritable = yes\rcreate mask = 0777\rdirectory mask = 0777\r[root@centos7 ~]# mkdir /public\r[root@centos7 ~]# chmod 777 /public/\r[root@centos7 ~]# systemctl reload smb  Public share 디렉토리 확인  [root@centos75 ~]# smbclient -L 192.168.0.10 -U%\rSharename Type Comment\r--------- ---- -------\rprint$ Disk Printer Drivers\rshare Disk share data\rIPC$ IPC IPC Service (Samba 4.7.1)\rpub Disk public data\rReconnecting with SMB1 for workgroup listing.\rServer Comment\r--------- -------\rWorkgroup Master\r--------- -------\r[root@centos75 ~]#\r Public share 디렉토리 mount\n패스워드 입력시 엔터를 치면 됩니다.  [root@centos75 ~]# mount -t cifs //192.168.0.10/pub /mnt\rPassword for root@//192.168.0.10/pub:\r[root@centos75 ~]# df -h\rFilesystem Size Used Avail Use% Mounted on\r/dev/sda3 16G 4.5G 12G 29% /\rdevtmpfs 1.9G 0 1.9G 0% /dev\rtmpfs 1.9G 0 1.9G 0% /dev/shm\rtmpfs 1.9G 13M 1.9G 1% /run\rtmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup\r/dev/sda1 2.0G 178M 1.9G 9% /boot\rtmpfs 378M 28K 378M 1% /run/user/0\rtmpfs 378M 12K 378M 1% /run/user/42\r//192.168.0.10/pub 16G 2.0G 15G 13% /mnt\r[root@centos75 ~]#\r Samba 방화벽 설정  [root@centos7 ~]# firewall-cmd --permanent --zone=public --add-service=samba\r[root@centos7 ~]# firewall-cmd --reload\r\rSystem User Samba 이용\n기본적으로 System User 의 경우 /home/$User 디렉토리를 사용할수 있습니다.\nsmbpasswd -a $USER 로 추가\nsmbpasswd -x $USER 삭제 할수 있습니다.\n\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/software-raid/",
	"title": "Software RAID",
	"tags": [],
	"description": "",
	"content": "Software RAID mdadm 소개\nCentos 에서 software RAID 구성시 mdadm 을 설치하여 사용 합니다.\nraid.wiki.kernerl.org 에서 조금더 많은 정보를 확인 할수 있습니다.\n\rmdadm Test note\u0026rdquo;\nmdadm 을 테스트 하기 위해서는 hdd Disk 가 2개 붙어 있어야 합니다.\n본문서는 RAID 1 만 작성 하였습니다.\n\r mdadm 설치  [root@centos7 ~]# yum install -y mdadm\r disk 확인  [root@centos7 ~]# fdisk -l\rDisk /dev/sda: 21.5 GB, 21474836480 bytes, 41943040 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\rDisk label type: dos\rDisk identifier: 0x000a27c3\rDevice Boot Start End Blocks Id System\r/dev/sda1 * 2048 4196351 2097152 83 Linux\r/dev/sda2 4196352 8390655 2097152 82 Linux swap / Solaris\r/dev/sda3 8390656 41943039 16776192 83 Linux\rDisk /dev/sdc: 1073 MB, 1073741824 bytes, 2097152 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\rDisk /dev/sdb: 1073 MB, 1073741824 bytes, 2097152 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\r[root@centos7 ~]#\r RAID 장치 활성화 확인  [root@centos7 ~]# cat /proc/mdstat\rPersonalities :\runused devices: \u0026lt;none\u0026gt;\r[root@centos7 ~]#\r fdisk 작업\nfilesystem type 를 Linux raid autodetect 로 설정 합니다.  [root@centos7 ~]# fdisk /dev/sdb\rWelcome to fdisk (util-linux 2.23.2).\rChanges will remain in memory only, until you decide to write them.\rBe careful before using the write command.\rDevice does not contain a recognized partition table\rBuilding a new DOS disklabel with disk identifier 0x5890a0c8.\rCommand (m for help): n\rPartition type:\rp primary (0 primary, 0 extended, 4 free)\re extended\rSelect (default p): p\rPartition number (1-4, default 1): 1\rFirst sector (2048-2097151, default 2048):\rUsing default value 2048\rLast sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151):\rUsing default value 2097151\rPartition 1 of type Linux and of size 1023 MiB is set\rCommand (m for help): t\rSelected partition 1\rHex code (type L to list all codes): fd\rChanged type of partition \u0026#39;Linux\u0026#39; to \u0026#39;Linux raid autodetect\u0026#39;\rCommand (m for help): wq\rThe partition table has been altered!\rCalling ioctl() to re-read partition table.\rSyncing disks.\r[root@centos7 ~]# fdisk /dev/sdc\rWelcome to fdisk (util-linux 2.23.2).\rChanges will remain in memory only, until you decide to write them.\rBe careful before using the write command.\rDevice does not contain a recognized partition table\rBuilding a new DOS disklabel with disk identifier 0x5c112dd6.\rCommand (m for help): n\rPartition type:\rp primary (0 primary, 0 extended, 4 free)\re extended\rSelect (default p): p\rPartition number (1-4, default 1): 1\rFirst sector (2048-2097151, default 2048):\rUsing default value 2048\rLast sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151):\rUsing default value 2097151\rPartition 1 of type Linux and of size 1023 MiB is set\rCommand (m for help): t\rSelected partition 1\rHex code (type L to list all codes): fd\rChanged type of partition \u0026#39;Linux\u0026#39; to \u0026#39;Linux raid autodetect\u0026#39;\rCommand (m for help): wq\rThe partition table has been altered!\rCalling ioctl() to re-read partition table.\rSyncing disks.\r[root@centos7 ~]#\r mdadm 을 이용하여 sdb1 sdc1 을 RAID 1 으로 구성 합니다.  [root@centos7 ~]# mdadm --create /dev/md1 --level=1 --raid-device=2 /dev/sdb1 /dev/sdc1\rmdadm: Note: this array has metadata at the start and\rmay not be suitable as a boot device. If you plan to\rstore \u0026#39;/boot\u0026#39; on this device please ensure that\ryour boot-loader understands md/v1.x metadata, or use\r--metadata=0.90\rContinue creating array? y\rmdadm: Defaulting to version 1.2 metadata\rmdadm: array /dev/md1 started.\r[root@centos7 ~]#\r mdadm.conf 파일을 생성 합니다.  mdadm.conf 참고 사항\nmdadm.conf 파일에 md1 값이 없을 경우 다른 Device 로 잡힐수 있습니다.\n\r[root@centos7 ~]# mdadm --detail --scan \u0026gt; /etc/mdadm.conf\r[root@centos7 ~]# cat /etc/mdadm.conf\rARRAY /dev/md1 metadata=1.2 name=centos7:1 UUID=a7be8a5e:0cfb01ea:c55ea0af:6bd107a0\r[root@centos7 ~]#\r /dev/md1 Device 를 포맷합니다.  [root@centos7 ~]# mkfs.xfs /dev/md1\rmeta-data=/dev/md1 isize=512 agcount=4, agsize=65408 blks\r= sectsz=512 attr=2, projid32bit=1\r= crc=1 finobt=0, sparse=0\rdata = bsize=4096 blocks=261632, imaxpct=25\r= sunit=0 swidth=0 blks\rnaming =version 2 bsize=4096 ascii-ci=0 ftype=1\rlog =internal log bsize=4096 blocks=855, version=2\r= sectsz=512 sunit=0 blks, lazy-count=1\rrealtime =none extsz=4096 blocks=0, rtextents=0\r[root@centos7 ~]#\r mount 포인트 생성 및 /etc/fstab 수정  [root@centos7 ~]# mkdir /data\r[root@centos7 ~]# vi /etc/fstab\r/dev/md1 /data xfs defaults 0 0\r[root@centos7 ~]# df -h\rFilesystem Size Used Avail Use% Mounted on\r/dev/sda3 16G 2.1G 14G 13% /\rdevtmpfs 1.9G 0 1.9G 0% /dev\rtmpfs 1.9G 0 1.9G 0% /dev/shm\rtmpfs 1.9G 12M 1.9G 1% /run\rtmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup\r/dev/sda1 2.0G 190M 1.9G 10% /boot\rtmpfs 378M 0 378M 0% /run/user/0\r/dev/md1 1019M 33M 987M 4% /data\r[root@centos7 ~]#\r system rebooting 후 확인  [root@centos7 ~]# df -h\rFilesystem Size Used Avail Use% Mounted on\r/dev/sda3 16G 2.1G 14G 13% /\rdevtmpfs 1.9G 0 1.9G 0% /dev\rtmpfs 1.9G 0 1.9G 0% /dev/shm\rtmpfs 1.9G 12M 1.9G 1% /run\rtmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup\r/dev/sda1 2.0G 190M 1.9G 10% /boot\r/dev/md1 1019M 33M 987M 4% /data\rtmpfs 378M 0 378M 0% /run/user/0\r[root@centos7 ~]# mdadm --detail --scan\rARRAY /dev/md1 metadata=1.2 name=centos7:1 UUID=a7be8a5e:0cfb01ea:c55ea0af:6bd107a0\r[root@centos7 ~]# mdadm --detail /dev/md1\r/dev/md1:\rVersion : 1.2\rCreation Time : Wed Oct 17 23:18:02 2018\rRaid Level : raid1\rArray Size : 1046528 (1022.00 MiB 1071.64 MB)\rUsed Dev Size : 1046528 (1022.00 MiB 1071.64 MB)\rRaid Devices : 2\rTotal Devices : 2\rPersistence : Superblock is persistent\rUpdate Time : Wed Oct 17 23:27:29 2018\rState : clean\rActive Devices : 2\rWorking Devices : 2\rFailed Devices : 0\rSpare Devices : 0\rConsistency Policy : resync\rName : centos7:1 (local to host centos7)\rUUID : a7be8a5e:0cfb01ea:c55ea0af:6bd107a0\rEvents : 19\rNumber Major Minor RaidDevice State\r0 8 17 0 active sync /dev/sdb1\r1 8 33 1 active sync /dev/sdc1\r[root@centos7 ~]#\r RAID 상태를 확인 합니다.  [root@centos7 ~]# cat /proc/mdstat\rPersonalities : [raid1]\rmd1 : active raid1 sdb1[0] sdc1[1]\r1046528 blocks super 1.2 [2/2] [UU]\runused devices: \u0026lt;none\u0026gt;\r[root@centos7 ~]#\r\rRAID 장애 처리\ndisk 를 하나 빼고 부팅 후 raid 상태를 확인 합니다.\n\r RAID 상태 확인\n정상적인 경우 UU 라고 나오지만 RAID 장애가 발생 하였을시 U_ 표시가 나옵니다.  [root@centos7 ~]# cat /proc/mdstat\rPersonalities : [raid1]\rmd1 : active raid1 sdb1[0]\r1046528 blocks super 1.2 [2/1] [U_]\runused devices: \u0026lt;none\u0026gt;\r[root@centos7 ~]#\r mount 상태 확인및 Disk 쓰기 확인\n마운트 상태 확인 및 touch 명령어를 이용하여 빈파일을 생성합니다.  [root@centos7 ~]# df -h\rFilesystem Size Used Avail Use% Mounted on\r/dev/sda3 16G 2.1G 14G 13% /\rdevtmpfs 1.9G 0 1.9G 0% /dev\rtmpfs 1.9G 0 1.9G 0% /dev/shm\rtmpfs 1.9G 12M 1.9G 1% /run\rtmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup\r/dev/sda1 2.0G 190M 1.9G 10% /boot\r/dev/md1 1019M 33M 987M 4% /data\r[root@centos7 ~]# cd /data\r[root@centos7 data]# touch 0\r 디스크를 추가 하고 Fdisk 작업을 합니다.  [root@centos7 ~]# fdisk -l\rDisk /dev/sda: 21.5 GB, 21474836480 bytes, 41943040 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\rDisk label type: dos\rDisk identifier: 0x000a27c3\rDevice Boot Start End Blocks Id System\r/dev/sda1 * 2048 4196351 2097152 83 Linux\r/dev/sda2 4196352 8390655 2097152 82 Linux swap / Solaris\r/dev/sda3 8390656 41943039 16776192 83 Linux\rDisk /dev/sdc: 1073 MB, 1073741824 bytes, 2097152 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\rDisk /dev/sdb: 1073 MB, 1073741824 bytes, 2097152 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\rDisk label type: dos\rDisk identifier: 0x5890a0c8\rDevice Boot Start End Blocks Id System\r/dev/sdb1 2048 2097151 1047552 fd Linux raid autodetect\rDisk /dev/md1: 1071 MB, 1071644672 bytes, 2093056 sectors\rUnits = sectors of 1 * 512 = 512 bytes\rSector size (logical/physical): 512 bytes / 512 bytes\rI/O size (minimum/optimal): 512 bytes / 512 bytes\r[root@centos7 ~]# fdisk /dev/sdc\rWelcome to fdisk (util-linux 2.23.2).\rChanges will remain in memory only, until you decide to write them.\rBe careful before using the write command.\rDevice does not contain a recognized partition table\rBuilding a new DOS disklabel with disk identifier 0x50182188.\rCommand (m for help): n\rPartition type:\rp primary (0 primary, 0 extended, 4 free)\re extended\rSelect (default p): p\rPartition number (1-4, default 1): 1\rFirst sector (2048-2097151, default 2048):\rUsing default value 2048\rLast sector, +sectors or +size{K,M,G} (2048-2097151, default 2097151):\rUsing default value 2097151\rPartition 1 of type Linux and of size 1023 MiB is set\rCommand (m for help): t\rSelected partition 1\rHex code (type L to list all codes): fd\rChanged type of partition \u0026#39;Linux\u0026#39; to \u0026#39;Linux raid autodetect\u0026#39;\rCommand (m for help): wq\rThe partition table has been altered!\rCalling ioctl() to re-read partition table.\rSyncing disks.\r[root@centos7 ~]#\r Disk 를 /dev/md1 에 추가 합니다.\n디스크 추가시 /proc/mdstat 파일을 확인 하면 recovery 상황을 볼수 있습니다.  [root@centos7 ~]# mdadm /dev/md1 --add /dev/sdc1\rmdadm: added /dev/sdc1\r[root@centos7 ~]# cat /proc/mdstat\rPersonalities : [raid1]\rmd1 : active raid1 sdc1[2] sdb1[0]\r1046528 blocks super 1.2 [2/1] [U_]\r[===============\u0026gt;.....] recovery = 76.4% (800896/1046528) finish=0.0min speed=266965K/sec\runused devices: \u0026lt;none\u0026gt;\r[root@centos7 ~]#\r recovery 후 확인  [root@centos7 ~]# cat /proc/mdstat\rPersonalities : [raid1]\rmd1 : active raid1 sdc1[2] sdb1[0]\r1046528 blocks super 1.2 [2/2] [UU]\runused devices: \u0026lt;none\u0026gt;\r[root@centos7 ~]#\r RAID 삭제 방법\n/etc/fstab 의 mount 정보도 삭제 합니다.  [root@centos7 ~]# umount /data\r[root@centos7 ~]# mdadm -S /dev/md1\rmdadm: stopped /dev/md1\r[root@centos7 ~]# mdadm --zero-superblock /dev/sdb1\r[root@centos7 ~]# mdadm --zero-superblock /dev/sdc1\r[root@centos7 ~]# cat /proc/mdstat\rPersonalities : [raid1]\runused devices: \u0026lt;none\u0026gt;\r[root@centos7 ~]#\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/vnc/",
	"title": "VNC",
	"tags": [],
	"description": "",
	"content": "VNC tigervnc 소개\nTigerVNC는 사용자가 원격 컴퓨터의 사용할수있게 해주는 클라이언트 / 서버 응용 프로그램\nVNC (Virtual Network Computing)의 고성능 플랫폼 입니다.\nTigerVNC는 3D 및 비디오 응용 프로그램을 실행하는 데 필요한 수준의 성능을 제공하며, 다양한 플랫폼에서 사용가능합니다.\n\r tigervnc-server 설치  [root@centos7 ~]# yum install -y tigervnc-server\r vncserver 파일 복사\nsystemd 에서 사용할 vncserver 파일을 복사 합니다.  [root@centos7 ~]# cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service\r vncserver 파일 수정   수정전\n [root@centos7 ~]# vi /etc/systemd/system/vncserver@\\:1.service\r[Service]\rType=forking\r# Clean any existing files in /tmp/.X11-unix environment\rExecStartPre=/bin/sh -c \u0026#39;/usr/bin/vncserver -kill %i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 || :\u0026#39;\rExecStart=/usr/sbin/runuser -l \u0026lt;USER\u0026gt; -c \u0026#34;/usr/bin/vncserver %i\u0026#34;\rPIDFile=/home/\u0026lt;USER\u0026gt;/.vnc/%H%i.pid\rExecStop=/bin/sh -c \u0026#39;/usr/bin/vncserver -kill %i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 || :\u0026#39;\r 수정후\n [Service]\rType=forking\r# Clean any existing files in /tmp/.X11-unix environment\rExecStartPre=/bin/sh -c \u0026#39;/usr/bin/vncserver -kill %i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 || :\u0026#39;\rExecStart=/usr/sbin/runuser -l root -c \u0026#34;/usr/bin/vncserver %i\u0026#34;\rPIDFile=/root/.vnc/%H%i.pid\rExecStop=/bin/sh -c \u0026#39;/usr/bin/vncserver -kill %i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 || :\u0026#39;\r systemd 설정 reload\nvncserver 설정 변경을 적용하기 위하여 systemd 설정을 reload 합니다.  [root@centos7 ~]# systemctl daemon-reload\r vncserver 활성화 및 daemon 실행\ndaemon 실행시 정상적으로 실행이 안될때가 있습니다.\ndaemon 활성화후 system rebooting 후 확인해 보면 정상적으로 daemon 이 올라온것을 확인 할수 있습니다.  [root@centos7 ~]# systemctl enable vncserver@:1.service\rCreated symlink from /etc/systemd/system/multi-user.target.wants/vncserver@:1.service to /etc/systemd/system/vncserver@:1.service.\r[root@centos7 ~]# systemctl start vncserver@:1.service\r vncuser 암호 설정\nvnc에서 사용할 암호를 설정 합니다.  [root@centos7 ~]# vncserver\rYou will require a password to access your desktops.\rPassword:\rVerify:\rWould you like to enter a view-only password (y/n)? y\rPassword:\rVerify:\rNew \u0026#39;centos7:2 (root)\u0026#39; desktop is centos7:2\rCreating default startup script /root/.vnc/xstartup\rCreating default config /root/.vnc/config\rStarting applications specified in /root/.vnc/xstartup\rLog file is /root/.vnc/centos7:2.log\r[root@centos7 ~]#\r 방화벽 설정  [root@centos7 ~]# firewall-cmd --permanent --zone=public --add-service vnc-server\rsuccess\r[root@centos7 ~]# firewall-cmd --reload\rsuccess\r[root@centos7 ~]#\r vncserver 동작확인  [root@centos7 ~]# systemctl status vncserver@:1.service\r● vncserver@:1.service - Remote desktop service (VNC)\rLoaded: loaded (/etc/systemd/system/vncserver@:1.service; enabled; vendor preset: disabled)\rActive: active (running) since 월 2018-10-15 09:19:56 KST; 6min ago\rProcess: 1005 ExecStart=/usr/sbin/runuser -l root -c /usr/bin/vncserver %i (code=exited, status=0/SUCCESS)\rProcess: 988 ExecStartPre=/bin/sh -c /usr/bin/vncserver -kill %i \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 || : (code=exited, status=0/SUCCESS)\rMain PID: 1097 (Xvnc)\rCGroup: /system.slice/system-vncserver.slice/vncserver@:1.service\r‣ 1097 /usr/bin/Xvnc :1 -auth /root/.Xauthority -desktop centos7:1 (root) -fp catalogue:/etc/X11/fontpath.d -geometry 1024x768 -pn -rfbauth /root/.vnc/passwd -rfbport 5901 -rfbwait...\r10월 15 09:19:53 centos7 systemd[1]: Starting Remote desktop service (VNC)...\r10월 15 09:19:56 centos7 systemd[1]: Started Remote desktop service (VNC).\r[root@centos7 ~]#\r vnc Client 는 tigervnc.org releases 에서 최신 버젼을 다운 받을수 있습니다.\n  vncserver 접속   tigervnc.org 에서 vncViewer 를 다운 받아 접속 할수 있습니다.\nvnc의 경우 5901 port 를 사용 합니다.\nvncserverIP:1 번으로 접속 합니다.\n vnc-server 비정상 작동시\nvnc-server 가 정상적으로 작동 하지 않을시\n/root/.vnc 디렉토리의 .log .pid 파일 삭제\n/tmp/.X11-unix 디렉토리의 X로 시작하는 파일을 삭제 합니다.\n\r example\n [root@centos7 ~]# cd .vnc/\r[root@centos7 .vnc]# ls\rcentos7:1.log centos7:1.pid config passwd xstartup\r[root@centos7 .vnc]# rm -rf centos7\\:1.*\r[root@centos7 tmp]# rm -rf .X11-unix/\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/nfs/",
	"title": "NFS",
	"tags": [],
	"description": "",
	"content": "NFS NFS 소개\nNFS (Network File System)는 컴퓨터 사용자가 원격 컴퓨터의 파일을 사용자의 컴퓨터에있는\n것처럼보고 선택적으로 저장하고 업데이트 할 수있게 해주는 클라이언트/서버 응용 프로그램 입니다.\nNFS 프로토콜은 NAS (Network Attached Storage)를위한 여러 분산 파일 시스템 표준 중 하나입니다.\n\r nfs 설치  [root@centos75 ~]# yum install -y nfs-utils\r nfs 실행 및 Daemon 활성화\nnfs 실행시 필요한 데몬들을 모두 구성 합니다.  [root@centos75 ~]# systemctl start nfs-server\r[root@centos75 ~]# systemctl start nfs-lock\r[root@centos75 ~]# systemctl start nfs-idmap\r[root@centos75 ~]# systemctl start rpcbind\r[root@centos75 ~]# systemctl enable nfs-server\r[root@centos75 ~]# systemctl enable nfs-lock\r[root@centos75 ~]# systemctl enable nfs-idmap\r[root@centos75 ~]# systemctl enable rpcbind\r nfs 디렉토리 생성  [root@centos75 ~]# mkdir /nfs-data\r[root@centos75 ~]# chown nfsnobody:nfsnobody /nfs-data\r nfs 설정   /etc/exports 에 nfs 사용할 공유 디렉토리를 설정 합니다.\n모든 * ip 대역에서 접슥을 가능 하게 하며 읽기 전용 으로 파일시스템이 변경 되면\n즉시 됭기화 하게 설정 합니다.\n [root@centos75 ~]# vi /etc/exports\r/nfs-data *(ro,sync)\r[root@centos75 ~]# systemctl reload nfs-server\r[root@centos75 ~]# exportfs\r/nfs-data \u0026lt;world\u0026gt;\r[root@centos75 ~]#\r nfs /etc/exports 옵션     옵션 설명     ro 읽기 전용으로만 연결을 허용 합니다.   rw 읽기 쓰기 가능하게 연결을 허용 합니다.   root_squash NFS 설정시 기본값이 되며 클라이언트 측에 관리자가 접속요청시 익명계정으로 연결을 허용 합니다.   no_root_squash 클라이언트 측에 관리자가 접속 요청을 했을때 서버 측에서의 관리자 계정으로 맵핑 시켜 연결 합니다.   all_squash 클라이언트 측에서 사용자로 접근 요청 했을 때 익명 계정으로 연결을 허용 합니다.   anonuid=[UID] 클라이언트 측에서 익명으로 접근 요청시 지정한 UID 값의 계정으로 연결 합니다.   anongid=[GID] 클라이언트 측에서 익명으로 접근 요청시 지정한 GID 값의 그룹 으로 연결 합니다.   sync 파일 시스템이 변경 되며 즉시 동기화 합니다.   noaccess 지정된 디렉토리에는 접근을 거부 합니다.   secure 클라이언트 마운트 요청시 포트를 1024 이하로 합니다.   insecure 인증되지 않은 접근도 접근 가능 합니다.      더많은 옵션은 man exports 에서 확인 할수 있습니다.\n  방화벽 설정\n  [root@centos75 ~]# firewall-cmd --permanent --zone=public --add-service=nfs\r[root@centos75 ~]# firewall-cmd --permanent --zone=public --add-service=mountd\r[root@centos75 ~]# firewall-cmd --permanent --zone=public --add-service=rpc-bind\r[root@centos75 ~]# firewall-cmd --reload\r nfs client 설정   nfs 사용을 위하여 패키지를 설치 합니다.\n [root@centos7 ~]# yum install -y nfs-utils\r showmount -e $nfs-server nfs-server 의 공유 디렉토리를 확인 합니다.  [root@centos7 ~]# showmount -e 192.168.0.11\rExport list for 192.168.0.11:\r/nfs-data *\r[root@centos7 ~]#\r mount 명령어를 이용한 nfs-server mount  [root@centos7 ~]# df -h\rFilesystem Size Used Avail Use% Mounted on\r/dev/sda3 16G 4.5G 12G 29% /\rdevtmpfs 1.9G 0 1.9G 0% /dev\rtmpfs 1.9G 0 1.9G 0% /dev/shm\rtmpfs 1.9G 13M 1.9G 1% /run\rtmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup\r/dev/sda1 2.0G 178M 1.9G 9% /boot\rtmpfs 378M 28K 378M 1% /run/user/0\rtmpfs 378M 12K 378M 1% /run/user/42\r192.168.0.11:/nfs-data 16G 4.5G 12G 29% /mnt\r[root@centos7 ~]#\r /etc/fstab 에 등록  [root@centos7 ~]# vi /etc/hosts\r[root@centos7 ~]# vi /etc/hosts\r192.168.0.11 nfs\r[root@centos7 ~]# vi /etc/fstab\rnfs:/nfs-data /data nfs ro,hard,bg,intr,tcp,rsize=16384,wsize=16384 0 0\r[root@centos7 ~]# mkdir /data\r[root@centos7 ~]# df -h\rFilesystem Size Used Avail Use% Mounted on\r/dev/sda3 16G 2.0G 14G 13% /\rdevtmpfs 1.9G 0 1.9G 0% /dev\rtmpfs 1.9G 0 1.9G 0% /dev/shm\rtmpfs 1.9G 12M 1.9G 1% /run\rtmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup\r/dev/sda1 2.0G 168M 1.9G 9% /boot\rtmpfs 378M 0 378M 0% /run/user/0\rnfs:/nfs-data 16G 4.5G 12G 29% /data\r[root@centos7 ~]#\r nfs /etc/fstab 설정 옵션     옵션 설명     ro 읽기 전용으로 마운트 합니다.   rw 읽기 쓰기 가능으로 마운트 합니다.   rsize 지정된 nfs 서버로 부터 읽어 오는 바이트수를 지정 , 기본값 1024   wsize 지정된 nfs 서버로 부터 쓰기를 할때 사용하는 바이트 수를 지정 , 기본값 1024   timeo rpc 타임아웃이 발생 되고 나서 첫번째 재전송 요구를 보낼때 사용되는 시간   retrans timeout 발생시 재전송 시도 횟수를 제한한 것, 기본값 3 입니다.   port 지정된 nfs 연결시 port 번호를 지정   fg 첫번째 마운트 시도하여 timeout 되면 바로 중단됩니다. default 값   intr timeout 발생시 신호를 보내는 nfs 호출을 인터럽트 합니다.   hard timeout 이 발생하면 \u0026ldquo;server not responding\u0026rdquo; 메시지를 출력한후 계속 재시도합니다.   soft timeout 이 발생하면 i/o 에러가 발생하였음을 알려줍니다.   noac 모든 속성의 캐쉬를 해제 합니다. 서버 효율이 떨어질수 있으나 다른 nfs 클라이언트 사용시 공통 화일 시스템에 쓰기 작업시 좋은 효율을 얻을수 있습니다.   tcp nfs 파일 시스템을 기본값인 udp 가 아닌 tcp 프로토콜을 사용하여 마운트 합니다.   retry 백그라운드 에서 진행중인 nfs 마운트 작업이 포기하기 전까지 실행할 횟수를 지정 합니다. , 기본값 10000번 입니다.    nfsstat 명령어\nNFS 클라이언트 및 서버 작업에 대한 통계를 표시합니다.\n\r[root@centos7 ~]# nfsstat\rClient rpc stats:\rcalls retrans authrefrsh\r125 0 125\rClient nfs v4:\rnull read write commit open open_conf\r0 0% 0 0% 0 0% 0 0% 0 0% 0 0%\ropen_noat open_dgrd close setattr fsinfo renew\r0 0% 0 0% 0 0% 0 0% 13 11% 0 0%\rsetclntid confirm lock lockt locku access\r0 0% 0 0% 0 0% 0 0% 0 0% 5 4%\rgetattr lookup lookup_root remove rename link\r10 8% 8 6% 5 4% 0 0% 0 0% 0 0%\rsymlink create pathconf statfs readlink readdir\r0 0% 0 0% 8 6% 3 2% 0 0% 0 0%\rserver_caps delegreturn getacl setacl fs_locations rel_lkowner\r21 17% 0 0% 0 0% 0 0% 0 0% 0 0%\rsecinfo exchange_id create_ses destroy_ses sequence get_lease_t\r0 0% 0 0% 4 3% 4 3% 3 2% 25 21%\rreclaim_comp layoutget getdevinfo layoutcommit layoutreturn getdevlist\r0 0% 4 3% 0 0% 0 0% 0 0% 0 0%\r(null)\r5 4%\r[root@centos7 ~]#\r 모든 버전의 NFS에 대한 모든 정보 표시  [root@centos7 ~]# nfsstat -o all -234\r NFS의 활성 버전에 대한 모든 정보 표시  [root@centos7 ~]# nfsstat -o all\r 마운트 된 NFS 파일 시스템에 대한 정보 표시  [root@centos7 ~]# nfsstat -m\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/dns/",
	"title": "DNS",
	"tags": [],
	"description": "",
	"content": "DNS bind infomation\nBIND는 DNS (Domain Name System) 정보를 인터넷에 게시하고 사용자의 DNS 쿼리를 해결할 수있는 오픈 소스 소프트웨어입니다.\nBIND라는 이름은 \u0026ldquo;버클리 인터넷 이름 도메인 (Berkeley Internet Name Domain)\u0026ldquo;의 약자로 1980 년 초 버클리 캘리포니아 대학에서 소프트웨어가 시작 되어서 붙여진 이름 입니다.\n\rweb server 사용시 tip\nWeb Server Test 시 apache Virtual domain 테스트시 bind 와 같이 설정 하여 멀티 도메인 설정을 할수 있습니다.\n간편하게 Windows / Linux hosts 파일 변경 하여 사용하여도 됩니다.\n\r bind install  [root@centos7 ~]# yum install bind-*\r named.conf 설정  [root@centos7 ~]# vi /etc/named.conf\roptions {\rlisten-on port 53 { any; };\rlisten-on-v6 port 53 { ::1; };\rdirectory \u0026#34;/var/named\u0026#34;;\rdump-file \u0026#34;/var/named/data/cache_dump.db\u0026#34;;\rstatistics-file \u0026#34;/var/named/data/named_stats.txt\u0026#34;;\rmemstatistics-file \u0026#34;/var/named/data/named_mem_stats.txt\u0026#34;;\rallow-query { any; };\r 도메인 추가   rev 파일\n역방향 설정의 경우 test.com 만 설정 하였습니다. ip 주소로 도메인 검색시 역방향 설정을 합니다.\n필요에 따라 설정 하시면 됩니다.\n  test.com / a.com / b.com 을 만듭니다.\n주석 부분의 경우 역방향 조회 부분입니다.\n [root@centos7 ~]# vi /etc/named.rfc1912.zones\rzone \u0026#34;test.com\u0026#34; In {\rtype master;\rfile \u0026#34;test.com\u0026#34;;\rallow-update { none; };\r};\rzone \u0026#34;0.168.192.in-addr.arpa\u0026#34; IN {\rtype master;\rfile \u0026#34;test.com.rev\u0026#34;;\rallow-update { none; };\r};\rzone \u0026#34;a.com\u0026#34; In {\rtype master;\rfile \u0026#34;a.com\u0026#34;;\rallow-update { none; };\r};\r#zone \u0026#34;0.168.191.in-addr.arpa\u0026#34; IN {\r# type master;\r# file \u0026#34;a.com.rev\u0026#34;;\r# allow-update { none; };\r#};\rzone \u0026#34;b.com\u0026#34; In {\rtype master;\rfile \u0026#34;b.com\u0026#34;;\rallow-update { none; };\r};\r zone 파일 생성  DNS 레코드 참고\n   레코드 설명 레코드 설명     SOA 존의 권한시작 NS 권한을 가진 네임서버   A 호스트 주소 CNAME Alias canonical 이름   MX 메일 익스체인저 PTR 도메인 네임 포인터 (역방향 DNS에 사용 )    [root@centos7 ~]# cd /var/named/\r[root@centos7 named]# cp named.empty test.com\r[root@centos7 named]# cp named.empty a.com\r[root@centos7 named]# cp named.empty b.com\r[root@centos7 named]# vi test.com\r$TTL 3H\r@ IN SOA @ ns.test.com. (\r0 ; serial\r1D ; refresh\r1H ; retry\r1W ; expire\r3H ) ; minimum\rIN NS ns.test.com.\rIN MX 10 mail.test.com.\rIN A 192.168.0.10\rmail IN A 192.168.0.10\rns IN A 192.168.0.10\rwww IN A 192.168.0.10\r[root@centos7 named]# vi a.com\r$TTL 3H\r@ IN SOA @ ns.a.com. (\r0 ; serial\r1D ; refresh\r1H ; retry\r1W ; expire\r3H ) ; minimum\rIN NS ns.a.com.\rIN MX 10 mail.a.com.\rIN A 192.168.0.10\rmail IN A 192.168.0.10\rns IN A 192.168.0.10\rwww IN A 192.168.0.10\r[root@centos7 named]# vi b.com\r$TTL 3H\r@ IN SOA @ ns.b.com. (\r0 ; serial\r1D ; refresh\r1H ; retry\r1W ; expire\r3H ) ; minimum\rIN NS ns.b.com.\rIN MX 10 mail.b.com.\rIN A 192.168.0.10\rmail IN A 192.168.0.10\rns IN A 192.168.0.10\rwww IN A 192.168.0.10\r 역방향 설정  [root@centos7 named]# vi test.com.rev\r$TTL 1D\r@ IN SOA @ ns.test.com. (\r0 ; serial\r1D ; refresh\r1H ; retry\r1W ; expire\r3H ) ; minimum\rIN NS ns.test.com.\r10 IN PTR ns.test.com.\r 권한 변경  [root@centos7 named]# chown root:named a.com\r[root@centos7 named]# chown root:named b.com\r[root@centos7 named]# chown root:named test.com\r[root@centos7 named]# chown root:named test.com.rev\r bind 실행 및 Daemon 활성화  [root@centos7 ~]# systemctl start named\r[root@centos7 ~]# systemctl enable named\r 방화벽 설정  [root@centos7 ~]# firewall-cmd --permanent --add-port=53/tcp --zone=public\r[root@centos7 ~]# firewall-cmd --permanent --add-port=53/udp\r[root@centos7 ~]# firewall-cmd --reload\r bind Test\ncentos75 의 경우 별도의 system 입니다.\n기존에 사용하던 Google dns 는 주석 처리 합니다.\nbind 서버를 nameserver 로 지정 합니다.\n [root@centos75 ~]# vi /etc/resolv.conf\r# Generated by NetworkManager\r#nameserver 8.8.8.8\rnameserver 192.168.0.10\r ping Test\ncentos75 의 경우 별도의 system 입니다.  [root@centos75 ~]# nslookup\r\u0026gt; a.com\rServer: 192.168.0.10\rAddress: 192.168.0.10#53\rName: a.com\rAddress: 192.168.0.10\r\u0026gt; b.com\rServer: 192.168.0.10\rAddress: 192.168.0.10#53\rName: b.com\rAddress: 192.168.0.10\r\u0026gt; test.com\rServer: 192.168.0.10\rAddress: 192.168.0.10#53\rName: test.com\rAddress: 192.168.0.10\r\u0026gt;\r[root@centos75 ~]# ping test.com\rPING test.com (192.168.0.10) 56(84) bytes of data.\r64 bytes from 192.168.0.10 (192.168.0.10): icmp_seq=1 ttl=64 time=0.303 ms\r^C\r--- test.com ping statistics ---\r1 packets transmitted, 1 received, 0% packet loss, time 0ms\rrtt min/avg/max/mdev = 0.303/0.303/0.303/0.000 ms\r[root@centos75 ~]#\r 역방향 조회\nip 로 도메인 정보를 확인 합니다.  [root@centos75 ~]# nslookup\r\u0026gt; 192.168.0.10\rServer: 192.168.0.10\rAddress: 192.168.0.10#53\r** server can\u0026#39;t find 10.0.168.192.in-addr.arpa.: NXDOMAIN\r\u0026gt; 192.168.0.10\rServer: 192.168.0.10\rAddress: 192.168.0.10#53\r10.0.168.192.in-addr.arpa name = ns.test.com.\r\u0026gt;\r bind chroot 설정\nbind 에서 chroot 환경으로 운영하기 위한 설정 입니다.\n  bind chroot 설정   bind-chroot 패키지를 설치 합니다.\n [root@centos7 ~]# yum install -y bind-chroot\r named 데몬이 동작 하였을시 정지 합니다.  [root@centos7 ~]# systemctl status named\r[root@centos7 ~]# systemctl stop named\r[root@centos7 ~]# systemctl disable named\r named chroot 환경을 초기화 합니다.\nnamed 데몬을 사용하지 않고 named-chroot 데몬을 사용합니다.  [root@centos7 ~]# /usr/libexec/setup-named-chroot.sh /var/named/chroot on\r[root@centos7 ~]# systemctl start named-chroot\r[root@centos7 ~]# systemctl enable named-chroot\r named chroot 환경 확인   named.conf , named.rfc1912.zones 파일 위치\n [root@centos7 ~]# ls -al /var/named/chroot/etc\rtotal 688\rdrwxr-x--- 4 root named 187 Oct 17 22:10 .\rdrwxr-x--- 7 root named 61 Oct 17 21:07 ..\r-rw-r--r-- 2 root root 517 May 9 22:11 localtime\rdrwxr-x--- 2 root named 6 Aug 28 00:40 named\r-rw-r----- 1 root named 1693 Oct 17 21:11 named.conf\r-rw-r--r-- 1 root named 3923 Aug 28 00:40 named.iscdlv.key\r-rw-r----- 1 root named 1474 Oct 17 21:40 named.rfc1912.zones\r-rw-r--r-- 1 root named 1587 May 22 2017 named.root.key\rdrwxr-x--- 3 root named 25 Oct 17 21:07 pki\r-rw-r--r-- 1 root root 6545 Jun 7 2013 protocols\r-rw-r----- 1 root named 100 Oct 17 21:19 rndc.key\r-rw-r--r-- 1 root root 670293 Jun 7 2013 services\r[root@centos7 ~]#\r 도메인 파일 위치 확인  [root@centos7 ~]# ls -al /var/named/chroot/var/named/\rtotal 32\rdrwxr-x--- 8 root named 239 Oct 17 21:39 .\rdrwxr-x--- 5 root named 52 Oct 17 21:07 ..\r-rw-r----- 1 root named 470 Oct 17 21:29 a.com\r-rw-r----- 1 root named 469 Oct 17 21:29 b.com\rdrwxr-x--- 7 root named 61 Oct 17 21:07 chroot\rdrwxr-x--- 7 root named 61 Oct 17 21:07 chroot_sdb\rdrwxrwx--- 2 named named 23 Oct 17 21:19 data\rdrwxrwx--- 2 named named 31 Oct 17 22:11 dynamic\rdrwxrwx--- 2 root named 6 Aug 23 2017 dyndb-ldap\r-rw-r----- 1 root named 2281 May 22 2017 named.ca\r-rw-r----- 1 root named 152 Dec 15 2009 named.empty\r-rw-r----- 1 root named 152 Jun 21 2007 named.localhost\r-rw-r----- 1 root named 168 Dec 15 2009 named.loopback\rdrwxrwx--- 2 named named 6 Aug 28 00:40 slaves\r-rw-r----- 1 root named 475 Oct 17 21:29 test.com\r-rw-r--r-- 1 root named 401 Oct 17 21:30 test.com.rev\r[root@centos7 ~]#\r chroot 위치에 dns 파일을 생성 합니다.  [root@centos7 ~]# touch /var/named/chroot/var/named/data/cache_dump.db\r[root@centos7 ~]# touch /var/named/chroot/var/named/data/named_stats.txt\r[root@centos7 ~]# touch /var/named/chroot/var/named/data/named_mem_stats.txt\r[root@centos7 ~]# touch /var/named/chroot/var/named/data/named.run\r[root@centos7 ~]# touch /var/named/chroot/var/named/data/dynamic\r[root@centos7 ~]# mkdir /var/named/chroot/var/named/dynamic\r[root@centos7 ~]# touch /var/named/chroot/var/named/dynamic/managed-keys.bind\r 권한 변경 및 파일 복사  [root@centos7 ~]# chmod -R 777 /var/named/chroot/var/named/data\r[root@centos7 ~]# chmod -R 777 /var/named/chroot/var/named/dynamic\r[root@centos7 ~]# cp -p /etc/named.conf /var/named/chroot/etc/named.conf\r named.conf 설정  [root@centos7 ~]# vi /var/named/chroot/etc/named.conf\roptions {\rlisten-on port 53 { any; };\rlisten-on-v6 port 53 { ::1; };\rdirectory \u0026#34;/var/named\u0026#34;;\rdump-file \u0026#34;/var/named/data/cache_dump.db\u0026#34;;\rstatistics-file \u0026#34;/var/named/data/named_stats.txt\u0026#34;;\rmemstatistics-file \u0026#34;/var/named/data/named_mem_stats.txt\u0026#34;;\rallow-query { any; };\r c.com zone 파일 생성\n설정 위치 /var/named/chroot/var/named  [root@centos7 ~]# vi /var/named/chroot/etc/named.rfc1912.zones\rzone \u0026#34;c.com\u0026#34; In {\rtype master;\rfile \u0026#34;c.com\u0026#34;;\rallow-update { none; };\r};\r[root@centos7 ~]# cd /var/named/chroot/var/named/\r[root@centos7 named]# cp b.com c.com\r[root@centos7 named]# vi c.com\r$TTL 3H\r@ IN SOA @ ns.c.com. (\r0 ; serial\r1D ; refresh\r1H ; retry\r1W ; expire\r3H ) ; minimum\rIN NS ns.c.com.\rIN A 192.168.0.10\rns IN A 192.168.0.10\rwww IN A 192.168.0.10\r[root@centos7 named]# chown root:named c.com\r named-chroot 를 Reload 합니다.  [root@centos7 ~]# systemctl reload named-chroot\r nslookup 테스트\n다른 system 에서 nslookup 과 ping 테스트를 진행 합니다.  [root@centos75 ~]# nslookup\r\u0026gt; server\rDefault server: 192.168.0.10\rAddress: 192.168.0.10#53\r\u0026gt; c.com\rServer: 192.168.0.10\rAddress: 192.168.0.10#53\rName: c.com\rAddress: 192.168.0.10\r\u0026gt;\r[root@centos75 ~]# ping c.com\rPING c.com (192.168.0.10) 56(84) bytes of data.\r64 bytes from ns.test.com (192.168.0.10): icmp_seq=1 ttl=64 time=0.192 ms\r64 bytes from ns.test.com (192.168.0.10): icmp_seq=2 ttl=64 time=0.261 ms\r^C\r--- c.com ping statistics ---\r2 packets transmitted, 2 received, 0% packet loss, time 999ms\rrtt min/avg/max/mdev = 0.192/0.226/0.261/0.037 ms\r[root@centos75 ~]#"
},
{
	"uri": "https://bksanjuk.github.io/centos/lamp-stack/",
	"title": "LAMP Stack",
	"tags": [],
	"description": "",
	"content": "LAMP Stack What is LAMP Stack\nLAMP Stack 은 웹 사이트 및 웹 응용 프로그램을 만드는 데 사용할 수있는 일련의 오픈 소스 소프트웨어입니다. LAMP는 머리 글자로, 일반적으로 Linux 운영 체제,\nApache HTTP Server, MySQL 관계형 데이터베이스 관리 시스템 및 PHP 프로그래밍 언어로 구성됩니다.\n\r설치 순서 참고\n본 문서의 경우 mysql 이 아닌 mariadb 로 설치를 진행하며 설치 순서는 mariadb -\u0026gt; php -\u0026gt; apache 순으로 진행 합니다.\n\r CentOS 7 설치  Mariadb repo확인\n mariadb repo 생성  [root@lamp ~]# vi /etc/yum.repos.d/mariadb.repo\r[mariadb]\rname = MariaDB\rbaseurl = http://yum.mariadb.org/10.1/centos7-amd64\rgpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB\rgpgcheck=1\r[root@lamp ~]# yum clean all \u0026amp;\u0026amp; yum list\r mariadb 10.1 설치  [root@lamp ~]# yum install -y mariadb mariadb-server\r mariadb 실행 및 daemon 활성화  [root@lamp ~]# systemctl start mariadb.service\r[root@lamp ~]# systemctl enable mariadb.service\r mariadb secure_installation 실행 (root 패스워드 설정)  [root@lamp ~]# /usr/bin/mysql_secure_installation\rNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\rSERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!\rIn order to log into MariaDB to secure it, we\u0026#39;ll need the current\rpassword for the root user. If you\u0026#39;ve just installed MariaDB, and\ryou haven\u0026#39;t set the root password yet, the password will be blank,\rso you should just press enter here.\rEnter current password for root (enter for none):\rOK, successfully used password, moving on...\rSetting the root password ensures that nobody can log into the MariaDB\rroot user without the proper authorisation.\rSet root password? [Y/n] y\rNew password:\rRe-enter new password:\rPassword updated successfully!\rReloading privilege tables..\r... Success!\rBy default, a MariaDB installation has an anonymous user, allowing anyone\rto log into MariaDB without having to have a user account created for\rthem. This is intended only for testing, and to make the installation\rgo a bit smoother. You should remove them before moving into a\rproduction environment.\rRemove anonymous users? [Y/n] y\r... Success!\rNormally, root should only be allowed to connect from \u0026#39;localhost\u0026#39;. This\rensures that someone cannot guess at the root password from the network.\rDisallow root login remotely? [Y/n] y\r... Success!\rBy default, MariaDB comes with a database named \u0026#39;test\u0026#39; that anyone can\raccess. This is also intended only for testing, and should be removed\rbefore moving into a production environment.\rRemove test database and access to it? [Y/n] y\r- Dropping test database...\r... Success!\r- Removing privileges on test database...\r... Success!\rReloading the privilege tables will ensure that all changes made so far\rwill take effect immediately.\rReload privilege tables now? [Y/n] y\r... Success!\rCleaning up...\rAll done! If you\u0026#39;ve completed all of the above steps, your MariaDB\rinstallation should now be secure.\rThanks for using MariaDB!\r[root@lamp ~]#\r mariadb status 확인\ncharacterset 의 경우 차후 변경 합니다.  [root@lamp ~]# mysql -uroot -p\rEnter password:\rWelcome to the MariaDB monitor. Commands end with ; or \\g.\rYour MariaDB connection id is 11\rServer version: 10.1.36-MariaDB MariaDB Server\rCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\rType \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement.\rMariaDB [(none)]\u0026gt; status;\r--------------\rmysql Ver 15.1 Distrib 10.1.36-MariaDB, for Linux (x86_64) using readline 5.1\rConnection id: 11\rCurrent database:\rCurrent user: root@localhost\rSSL: Not in use\rCurrent pager: stdout\rUsing outfile: \u0026#39;\u0026#39;\rUsing delimiter: ;\rServer: MariaDB\rServer version: 10.1.36-MariaDB MariaDB Server\rProtocol version: 10\rConnection: Localhost via UNIX socket\rServer characterset: latin1\rDb characterset: latin1\rClient characterset: utf8\rConn. characterset: utf8\rUNIX socket: /var/lib/mysql/mysql.sock\rUptime: 1 min 48 sec\rThreads: 1 Questions: 23 Slow queries: 0 Opens: 18 Flush tables: 1 Open tables: 12 Queries per second avg: 0.212\r--------------\rMariaDB [(none)]\u0026gt; quit\rBye\r[root@lamp ~]#\r mariadb characterset 변경 및 확인  [root@lamp ~]# vi /etc/my.cnf.d/server.cnf\r[mysqld]\rcharacter-set-server = utf8mb4\rcollation-server = utf8mb4_unicode_ci\r[root@lamp ~]# vi /etc/my.cnf.d/client.cnf\r[client]\rdefault-character-set = utf8mb4\r[root@lamp ~]# systemctl restart mariadb.service\r[root@lamp ~]# mysql -uroot -p\rEnter password:\rWelcome to the MariaDB monitor. Commands end with ; or \\g.\rYour MariaDB connection id is 2\rServer version: 10.1.36-MariaDB MariaDB Server\rCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\rType \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement.\rMariaDB [(none)]\u0026gt; status;\r--------------\rmysql Ver 15.1 Distrib 10.1.36-MariaDB, for Linux (x86_64) using readline 5.1\rConnection id: 2\rCurrent database:\rCurrent user: root@localhost\rSSL: Not in use\rCurrent pager: stdout\rUsing outfile: \u0026#39;\u0026#39;\rUsing delimiter: ;\rServer: MariaDB\rServer version: 10.1.36-MariaDB MariaDB Server\rProtocol version: 10\rConnection: Localhost via UNIX socket\rServer characterset: utf8mb4\rDb characterset: utf8mb4\rClient characterset: utf8mb4\rConn. characterset: utf8mb4\rUNIX socket: /var/lib/mysql/mysql.sock\rUptime: 15 sec\rThreads: 1 Questions: 4 Slow queries: 0 Opens: 17 Flush tables: 1 Open tables: 11 Queries per second avg: 0.266\r--------------\rMariaDB [(none)]\u0026gt;\r Apache 설치  [root@lamp ~]# yum install -y httpd\r apache 실행 및 daemon 활성화  [root@lamp ~]# systemctl start httpd\r[root@lamp ~]# systemctl enable httpd\r 방화벽 open  [root@lamp ~]# firewall-cmd --permanent --add-port=80/tcp\r[root@lamp ~]# firewall-cmd --permanent --add-port=443/tcp\r[root@lamp ~]# firewall-cmd --reload\r\ryum-config-manager yum-config-manager 가 없는 경우 yum-utils 패키지를 설치 합니다.\n\r php7 설치  [root@lamp ~]# yum install -y epel-release\r[root@lamp ~]# rpm -Uvh http://ftp.riken.jp/Linux/remi/enterprise/remi-release-7.rpm\r[root@lamp ~]# yum clean all \u0026amp;\u0026amp; yum list\r[root@lamp ~]# yum update -y\r[root@lamp ~]# init 6\r[root@lamp ~]# yum-config-manager --enable remi-php71\r[root@lamp ~]# yum -y install php php-opcache php-mysql php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-soap curl curl-devel\r php.ini 설정  [root@lamp ~]# vi /etc/php.ini\r;display_errors = Off\rdisplay_errors = On\r; display_startup_errors = Off\rdisplay_startup_errors = On\rdate.timezone = Asia/Seoul\r;cgi.fix_pathinfo=1\rcgi.fix_pathinfo=0\r php info 확인  [root@lamp ~]# vi /var/www/html/info.php\r\u0026lt;?php phpinfo(); ?\u0026gt;\r web-page 확인   Apache MPM 설정   apache 확인\n [root@lamp ~]# httpd -V |grep \u0026#34;^Server MPM\u0026#34;\rServer MPM: prefork\r Worker 로 변경  [root@lamp ~]# vi /etc/httpd/conf.modules.d/00-mpm.conf\r#LoadModule mpm_prefork_module modules/mod_mpm_prefork.so\rLoadModule mpm_worker_module modules/mod_mpm_worker.so\r[root@lamp ~]# vi /etc/httpd/conf.modules.d/10-worker.conf\r\u0026lt;IfModule mpm_worker_module\u0026gt;\rServerLimit 250\rStartServers 10\rMinSpareThreads 75\rMaxSpareThreads 250\rThreadLimit 64\rThreadsPerChild 32\rMaxClients 8000\rMaxRequestsPerChild 10000\r\u0026lt;/IfModule\u0026gt;\r[root@lamp ~]# systemctl restart httpd\r[root@lamp ~]# httpd -V |grep \u0026#34;^Server MPM\u0026#34;\rServer MPM: worker\r[root@lamp ~]#\r httpd.conf 설정  [root@lamp ~]# vi /etc/httpd/conf/httpd.conf\rServerRoot \u0026#34;/etc/httpd\u0026#34; / apache root 디렉토리\rListen 80 / apache Port Include conf.modules.d/*.conf / apache module 디렉토리\rUser apache / apache 실행유저\rGroup apache / apache 실행구룹\rServerAdmin root@localhost / Server 관리자 e-mail\rServerName www.test.com:80 / Apache Server Domain:port\r\u0026lt;IfModule dir_module\u0026gt;\rDirectoryIndex index.html index.php /Directory index 설정 \u0026lt;/IfModule\u0026gt;\r UserDir설정\n/home/$User/public_html 사용시 설정 합니다.  [root@lamp ~]# vi /etc/httpd/conf.d/userdir.conf\r\u0026lt;IfModule mod_userdir.c\u0026gt;\r#\r# UserDir is disabled by default since it can confirm the presence\r# of a username on the system (depending on home directory\r# permissions).\r#\r#UserDir disabled\r#\r# To enable requests to /~user/ to serve the user\u0026#39;s public_html\r# directory, remove the \u0026#34;UserDir disabled\u0026#34; line above, and uncomment\r# the following line instead:\r#\rUserDir public_html\r\u0026lt;/IfModule\u0026gt;\r\u0026lt;Directory \u0026#34;/home/*/public_html\u0026#34;\u0026gt;\rOptions Indexes Includes FollowSymLinks\rRequire all granted\r\u0026lt;/Directory\u0026gt;\r\rUserDir 사용시 참고사항\n/home 디렉토리의 User 디렉토리 권한은 700 입니다. 711로 권한 변경이 필요 합니다.\n\r UserDir 확인  [root@lamp ~]# chmod 711 /home/test\r[root@lamp ~]# mkdir /home/test/public_html\r[root@lamp ~]# chown test:test /home/test/public_html/\r[root@lamp ~]# systemctl restart httpd\r[root@lamp ~]# vi /home/test/public_html/index.php\r\u0026lt;?php phpinfo(); ?\u0026gt;\r[root@lamp ~]# curl http://192.168.0.20/~test/\r VirtualHost 설정\nvhost.conf 파일이 별도로 없음으로 생성 합니다.  [root@lamp ~]# cd /etc/httpd/conf.d/\r[root@lamp conf.d]# vi vhost.conf\r#NameVirtualHost *:80\r\u0026lt;VirtualHost *:80\u0026gt;\rServerAdmin admin@test.com\rDocumentRoot /var/www/html/www.test.com/public_html/\rServerName test.com\rServerAlias www.test.com\rErrorLog /var/www/html/www.test.com/logs/test.com-error_log\rCustomLog /var/www/html/www.test.com/logs/test.com-access_log common\r\u0026lt;/VirtualHost\u0026gt;\r\u0026lt;VirtualHost *:80\u0026gt;\rServerAdmin admin@test.com\rDocumentRoot /var/www/html/bbs.test.com/public_html/\rServerName bbs.test.com\rErrorLog /var/www/html/bbs.test.com/logs/test.com-error_log\rCustomLog /var/www/html/bbs.test.com/logs/test.com-access_log common\r\u0026lt;/VirtualHost\u0026gt;\r 디렉토리 생성 및 권한 설정  [root@lamp ~]# mkdir -p /var/www/html/www.test.com/{public_html,logs}\r[root@lamp ~]# mkdir -p /var/www/html/bbs.test.com/{public_html,logs}\r[root@lamp ~]# chown -R apache:apache /var/www/html/www.test.com\r[root@lamp ~]# chown -R apache:apache /var/www/html/bbs.test.com\r적당히 html 문서를 만들어 확인을 합니다. [root@lamp ~]# vi /var/www/html/www.test.com/public_html/index.html\r[root@lamp ~]# vi /var/www/html/bbs.test.com/public_html/index.html\r[root@lamp ~]# systemctl restart httpd\r 확인  [root@lamp ~]# curl http://www.test.com\r\u0026lt;html\u0026gt; \u0026lt;/html\u0026gt;\r\u0026lt;h\u0026gt; www.test.com \u0026lt;/h\u0026gt;\r[root@lamp ~]# curl http://bbs.test.com\r\u0026lt;html\u0026gt; \u0026lt;/html\u0026gt;\r\u0026lt;h\u0026gt; bbs.test.com \u0026lt;/h\u0026gt;\r[root@lamp ~]#\r\r별도의 디렉토리 사용시 httpd.conf 수정하여 Directory 설정을 추가 해야 합니다.\napache access 에서 자세한 정보를 확인 할수 있습니다.\n\r[root@lamp ~]# vi /etc/httpd/conf/httpd.conf\r\u0026lt;Directory \u0026#34;/www-data/public_html\u0026#34;\u0026gt;\rAllowOverride None\rRequire all granted\r\u0026lt;/Directory\u0026gt;\r[root@lamp ~]# mkdir -p /www-data/{public_html,logs}\r[root@lamp ~]# chown -R apache:apache /www-data/\r[root@lamp ~]# vi /etc/httpd/conf.d/vhost.conf\r\u0026lt;VirtualHost *:80\u0026gt;\rServerAdmin admin@test.com\rDocumentRoot /www-data/public_html/\rServerName blog.test.com\rErrorLog /www-data/logs/blog.test.com-error_log\rCustomLog /www-data/logs/blog.test.com-access_log common\r\u0026lt;/VirtualHost\u0026gt;\r[root@lamp ~]# systemctl restart httpd\r"
},
{
	"uri": "https://bksanjuk.github.io/centos/lemp-stack/",
	"title": "LEMP Stack",
	"tags": [],
	"description": "",
	"content": "LEMP Stack What is LEMP Stack\nLAMP Stack 의 변형 이며 Apache 대신 Nginx 로 구성 하는것을 말합니다.\nLinux , Nginx , Mysql , php 로 구성 하지만 본 문서에서는 Mysql 대신 mariadb 를 사용 합니다.\n\r system update\nNginx 설치전 system update 를 진행 합니다.  [root@lemp ~]# yum update -y\r Nginx repo 생성 및 yum list 확인  [root@lemp ~]# vi /etc/yum.repos.d/nginx.repo\r[nginx]\rname=nginx\rbaseurl=http://nginx.org/packages/centos/7/$basearch/\rgpgcheck=0\renabled=1\r[root@lemp ~]# yum clean all \u0026amp;\u0026amp; yum list\r Nginx 설치  [root@lemp ~]# yum install -y nginx\r Mariadb repo 생성 및 yum list 확인  [root@lemp ~]# vi /etc/yum.repos.d/mariadb.repo\r[mariadb]\rname = MariaDB\rbaseurl = http://yum.mariadb.org/10.1/centos7-amd64\rgpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB\rgpgcheck=1\r[root@lemp ~]# yum clean all \u0026amp;\u0026amp; yum list\r Mariadb 10.1 설치  [root@lemp ~]# yum install -y mariadb mariadb-server\r mariadb 실행 및 Daemon 활성화  [root@lemp ~]# systemctl start mariadb.service\r[root@lemp ~]# systemctl enable mariadb.service\r mariadb secure_installation 실행\nroot 패스워드를 설정 합니다.  [root@lemp ~]# /usr/bin/mysql_secure_installation\rNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\rSERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!\rIn order to log into MariaDB to secure it, we\u0026#39;ll need the current\rpassword for the root user. If you\u0026#39;ve just installed MariaDB, and\ryou haven\u0026#39;t set the root password yet, the password will be blank,\rso you should just press enter here.\rEnter current password for root (enter for none):\rOK, successfully used password, moving on...\rSetting the root password ensures that nobody can log into the MariaDB\rroot user without the proper authorisation.\rSet root password? [Y/n] y\rNew password:\rRe-enter new password:\rPassword updated successfully!\rReloading privilege tables..\r... Success!\rBy default, a MariaDB installation has an anonymous user, allowing anyone\rto log into MariaDB without having to have a user account created for\rthem. This is intended only for testing, and to make the installation\rgo a bit smoother. You should remove them before moving into a\rproduction environment.\rRemove anonymous users? [Y/n] y\r... Success!\rNormally, root should only be allowed to connect from \u0026#39;localhost\u0026#39;. This\rensures that someone cannot guess at the root password from the network.\rDisallow root login remotely? [Y/n] y\r... Success!\rBy default, MariaDB comes with a database named \u0026#39;test\u0026#39; that anyone can\raccess. This is also intended only for testing, and should be removed\rbefore moving into a production environment.\rRemove test database and access to it? [Y/n] y\r- Dropping test database...\r... Success!\r- Removing privileges on test database...\r... Success!\rReloading the privilege tables will ensure that all changes made so far\rwill take effect immediately.\rReload privilege tables now? [Y/n] y\r... Success!\rCleaning up...\rAll done! If you\u0026#39;ve completed all of the above steps, your MariaDB\rinstallation should now be secure.\rThanks for using MariaDB!\r[root@lemp ~]#\r php 설치  [root@lemp ~]# yum install -y epel-release yum-utils\r[root@lemp ~]# rpm -Uvh http://ftp.riken.jp/Linux/remi/enterprise/remi-release-7.rpm\r[root@lemp ~]# yum clean all \u0026amp;\u0026amp; yum list\r[root@lemp ~]# yum update -y\r[root@lemp ~]# init 6\r[root@lemp ~]# yum-config-manager --enable remi-php71\r[root@lemp ~]# yum -y install php php-mysql php-fpm php-opcache php-gd php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-soap curl curl-devel\r Nginx 실행 및 Daemon 활성화  [root@lemp ~]# systemctl start nginx\r[root@lemp ~]# systemctl enable nginx\r 방화벽 Open  [root@lemp ~]# firewall-cmd --permanent --add-port=80/tcp\r[root@lemp ~]# firewall-cmd --permanent --add-port=443/tcp\r[root@lemp ~]# firewall-cmd --reload\r Mariadb 설정  [root@lemp ~]# vi /etc/my.cnf.d/server.cnf\r[mysqld]\rcharacter-set-server = utf8mb4\rcollation-server = utf8mb4_unicode_ci\r[root@lemp ~]# vi /etc/my.cnf.d/client.cnf\r[client]\rdefault-character-set = utf8mb4\r[root@lemp ~]# systemctl restart mariadb.service\r[root@lemp ~]# mysql -uroot -p\rEnter password:\rWelcome to the MariaDB monitor. Commands end with ; or \\g.\rYour MariaDB connection id is 2\rServer version: 10.1.36-MariaDB MariaDB Server\rCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\rType \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement.\rMariaDB [(none)]\u0026gt; status;\r--------------\rmysql Ver 15.1 Distrib 10.1.36-MariaDB, for Linux (x86_64) using readline 5.1\rConnection id: 2\rCurrent database:\rCurrent user: root@localhost\rSSL: Not in use\rCurrent pager: stdout\rUsing outfile: \u0026#39;\u0026#39;\rUsing delimiter: ;\rServer: MariaDB\rServer version: 10.1.36-MariaDB MariaDB Server\rProtocol version: 10\rConnection: Localhost via UNIX socket\rServer characterset: utf8mb4\rDb characterset: utf8mb4\rClient characterset: utf8mb4\rConn. characterset: utf8mb4\rUNIX socket: /var/lib/mysql/mysql.sock\rUptime: 8 sec\rThreads: 1 Questions: 4 Slow queries: 0 Opens: 17 Flush tables: 1 Open tables: 11 Queries per second avg: 0.500\r--------------\rMariaDB [(none)]\u0026gt;\r php.ini 설정  [root@lemp ~]# vi /etc/php.ini\r;display_errors = Off\rdisplay_errors = On\r; display_startup_errors = Off\rdisplay_startup_errors = On\rdate.timezone = Asia/Seoul\r;cgi.fix_pathinfo=1\rcgi.fix_pathinfo=0\r Nginx 설정\nnginx.conf 파일에 /etc/nginx/sites-enabled 라인을 추가 합니다.  [root@lemp ~]# mkdir /etc/nginx/sites-enabled\r[root@lemp ~]# vi /etc/nginx/nginx.conf\ruser nginx;\rworker_processes 1;\rerror_log /var/log/nginx/error.log warn;\rpid /var/run/nginx.pid;\revents {\rworker_connections 1024;\r}\rhttp {\rinclude /etc/nginx/mime.types;\rdefault_type application/octet-stream;\rlog_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39;\r\u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39;\r\u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;;\raccess_log /var/log/nginx/access.log main;\rsendfile on;\r#tcp_nopush on;\rkeepalive_timeout 65;\r#gzip on;\rinclude /etc/nginx/conf.d/*.conf;\rinclude /etc/nginx/sites-enabled/*.conf;\r}\r Nginx default.conf  server {\rlisten 80;\rserver_name localhost;\rcharset UTF-8;\rroot /usr/share/nginx/html;\rindex index.php index.html index.htm;\rlocation / {\rtry_files $uri $uri/ /index.php?$query_string;\r}\rerror_page 500 502 503 504 /50x.html;\rlocation = /50x.html {\rroot /usr/share/nginx/html;\r}\rlocation ~ \\.php$ {\rtry_files $uri =404;\rfastcgi_pass 127.0.0.1:9000;\rfastcgi_split_path_info ^(.+\\.php)(/.+)$;\r#fastcgi_pass unix:/run/php-fpm/php-fpm.sock;\rfastcgi_index index.php;\rfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\rinclude fastcgi_params;\r}\r}\r\rphp-fpm 설정\nsock 방식을 사용할 경우 fastcgi_pass unix:/run/php-fpm/php-fpm.sock; 주석을 해제 합니다.\nwww.conf 파일 을 listen = /run/php-fpm/php-fpm.sock; 로 listen = 127.0.0.1:9000 로 수정 해야 합니다.\n\r php-fpm 설정  [root@lemp ~]# vi /etc/php-fpm.d/www.conf\ruser = nginx\rgroup = nginx\rlisten.owner = nginx\rlisten.group = nginx\rlisten.mode = 0660\r php-fpm 실행 및 Daemon 활성화  [root@lemp ~]# systemctl start php-fpm.service\r[root@lemp ~]# systemctl enable php-fpm.service\r[root@lemp ~]# systemctl restart nginx\r phpinfo 확인  [root@lemp ~]# vi /usr/share/nginx/html/info.php\r\u0026lt;?php phpinfo(); ?\u0026gt;\r[root@lemp ~]# curl http://localhost/info.php\r Nginx VirtualHost 설정  [root@lemp ~]# vi /etc/nginx/conf.d/default.conf\rserver {\rlisten 80 default_server;\rserver_name localhost;\r test_com.conf 파일 생성  [root@lemp ~]# mkdir -p /var/www/html/test.com/{public_html,logs}\r[root@lemp ~]# vi /etc/nginx/sites-enabled/test_com.conf\rserver {\rlisten 80;\rserver_name www.test.com test.com;\rroot /var/www/html/test.com/public_html;\rindex index.php index.html index.htm;\rlocation / {\rtry_files $uri $uri/ /index.php?$query_string;\rautoindex on;\r}\raccess_log /var/www/html/test.com/logs/access.log;\rerror_log /var/www/html/test.com/logs/error.log warn;\rerror_page 500 502 503 504 /50x.html;\rlocation = /50x.html {\r}\rlocation ~ \\.php$ {\rtry_files $uri =404;\rfastcgi_pass 127.0.0.1:9000;\rfastcgi_split_path_info ^(.+\\.php)(/.+)$;\rfastcgi_index index.php;\rfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\rinclude fastcgi_params;\r}\r}\r[root@lemp ~]# chown -R nginx:nginx /var/www/html/test.com/\r[root@lemp ~]# systemctl restart nginx\r"
},
{
	"uri": "https://bksanjuk.github.io/",
	"title": "Infra Engineer Reference",
	"tags": [],
	"description": "",
	"content": "작성중인 wiki 입니다. Last Fix Date 2020-03-12\n"
},
{
	"uri": "https://bksanjuk.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bksanjuk.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]